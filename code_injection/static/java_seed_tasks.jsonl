{"id": "seed_task_19", "name": "java_loop_array", "instruction": "Create a JavaScript function that takes an array of numbers and returns the product of all elements.", "instances": [{"input": "[2, 3, 4]", "output": "function multiplyArrayElements(arr) {\n    let product = 1;\n    for (const num of arr) {\n        product *= num;\n    }\n    return product;\n}\n\nconst result = multiplyArrayElements([2, 3, 4]);\nconsole.log(result);"}], "is_classification": false}
{"id": "seed_task_21", "name": "java_reverse_string_no_builtin", "instruction": "Implement a Java method to reverse a string without using any built-in functions.", "instances": [{"input": "\"Hello, World!\"", "output": "public class StringReversal {\n    public static String reverseString(String input) {\n        char[] charArray = input.toCharArray();\n        int left = 0;\n        int right = charArray.length - 1;\n\n        while (left < right) {\n            char temp = charArray[left];\n            charArray[left] = charArray[right];\n            charArray[right] = temp;\n\n            left++;\n            right--;\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        String str = \"Hello, World!\";\n        System.out.println(\"Reversed string: \" + reverseString(str));\n    }\n}"}], "is_classification": false}
{"id": "new_codealpaca_0", "instruction": "Implement a Java function that accepts an integer array and returns the square of each element in a new array.", "instances": [{"input": "int[] arr = {4, 5, 6};", "output": "public int[] squareArrayElements(int[] arr) {\n    int[] squaredArray = new int[arr.length];\n\n    for (int i = 0; i < arr.length; i++) {\n        squaredArray[i] = arr[i] * arr[i];\n    }\n\n    return squaredArray;}\n\nint[] arr = {4, 5, 6};\nint[] squaredArray = squareArrayElements(arr);"}]}
{"id": "new_codealpaca_1", "instruction": "Design a Java method that takes an input string and returns a reversed version of the input string.", "instances": [{"input": "\"Hello, world!\"", "output": "public class ReverseString {\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String inputString = \"Hello, world!\";\n        System.out.println(reverseString(inputString));\n    }}"}]}
{"id": "new_codealpaca_2", "instruction": "Implement a Java method that reads a text file and returns the number of lines.", "instances": [{"input": "example.txt (a file containing the text)", "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LineCounter {\n\n    public static void main(String[] args) throws IOException {\n        String filePath = \"example.txt\";\n        int lineCount = countTextFileLines(filePath);\n        System.out.println(\"Number of lines: \" + lineCount);\n    }\n\n    public static int countTextFileLines(String filePath) throws IOException {\n        int lineCount = 0;\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            while (reader.readLine() != null) {\n                lineCount++;\n            }\n        }\n        return lineCount;\n    }}"}]}
{"id": "new_codealpaca_3", "instruction": "Implement a Java function that merges two sorted arrays into a single sorted array without using in-built functions.", "instances": [{"input": "array1: [1, 3, 5], array2: [2, 4, 6]", "output": "public int[] mergeSortedArrays(int[] arr1, int[] arr2) {\n    int i = 0, j = 0, k = 0;\n    int[] result = new int[arr1.length + arr2.length];\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result[k++] = arr1[i++];\n        } else {\n            result[k++] = arr2[j++];\n        }\n    }\n\n    while (i < arr1.length) {\n        result[k++] = arr1[i++];\n    }\n\n    while (j < arr2.length) {\n        result[k++] = arr2[j++];\n    }\n\n    return result;}"}]}
{"id": "new_codealpaca_4", "instruction": "Can you show me the code to connect to a MySQL database using Java, given the following connection details: database url = 'jdbc:mysql://localhost:3306/myDatabase', username = 'root', password = 'mypassword'?", "instances": [{"input": "database url: 'jdbc:mysql://localhost:3306/myDatabase', username: 'root', password: 'mypassword'", "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class MySQLConnection {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/myDatabase\";\n        String username = \"root\";\n        String password = \"mypassword\";\n\n        try {\n            Connection connection = DriverManager.getConnection(url, username, password);\n            System.out.println(\"Connected to the database successfully\");\n            connection.close();\n        } catch (SQLException e) {\n            System.out.println(\"Error connecting to the database\");\n            e.printStackTrace();\n        }\n    }}"}]}
{"id": "new_codealpaca_5", "instruction": "Design a Java class representing a simple bank account with methods for depositing, withdrawing, and checking the balance.", "instances": [{"input": "Initial balance: 1000\nDeposit: 500\nWithdraw: 200", "output": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(1000);\n        account.deposit(500);\n        account.withdraw(200);\n        System.out.println(\"Current balance: \" + account.getBalance());\n    }}"}]}
{"id": "new_codealpaca_6", "instruction": "In Java, write a method that reverses a list of integers.", "instances": [{"input": "[9, 7, 5, 3, 1]", "output": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ReverseList {\n    public static ArrayList<Integer> reverse(ArrayList<Integer> list) {\n        Collections.reverse(list);\n        return list;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> myList = new ArrayList<>();\n        myList.add(9);\n        myList.add(7);\n        myList.add(5);\n        myList.add(3);\n        myList.add(1);\n\n        ArrayList<Integer> reversedList = reverse(myList);\n        System.out.println(reversedList);\n    }}"}]}
{"id": "new_codealpaca_7", "instruction": "In Java, write a method that accepts an ArrayList of integers and returns the sum of all the elements.", "instances": [{"input": "ArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));", "output": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class SumArrayList {\n    public static int sumArrayListElements(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int sum = sumArrayListElements(numbers);\n        System.out.println(sum);\n    }}"}]}
{"id": "new_codealpaca_8", "instruction": "Create a Java method to count the number of occurrences of a specified character in a given string.", "instances": [{"input": "String text = \"mississippi\"; char target = 's';", "output": "public class CharCounter {\n    public static int countOccurrences(String text, char target) {\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == target) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String text = \"mississippi\";\n        char target = 's';\n        int count = countOccurrences(text, target);\n        System.out.println(\"Occurrences of '\" + target + \"': \" + count);\n    }}"}]}
{"id": "new_codealpaca_9", "instruction": "How would you write a Java method that reverses the order of words in a given sentence?", "instances": [{"input": "The quick brown fox jumps over the lazy dog", "output": "public static String reverseWords(String sentence) {\n    String[] words = sentence.split(\" \");\n    StringBuilder reversed = new StringBuilder();\n\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversed.append(words[i]);\n        if (i > 0) {\n            reversed.append(\" \");\n        }\n    }\n\n    return reversed.toString();\n}\n\nString sentence = \"The quick brown fox jumps over the lazy dog\";\nString reversedSentence = reverseWords(sentence);\nSystem.out.println(reversedSentence);"}]}
{"id": "new_codealpaca_10", "instruction": "Create a Java function that determines if a given number is prime.", "instances": [{"input": "13", "output": "public class PrimeChecker {\n    public static void main(String[] args) {\n        int num = 13;\n        System.out.println(isPrime(num) ? num + \" is prime.\" : num + \" is not prime.\");\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }}"}]}
{"id": "new_codealpaca_11", "instruction": "Implement a Java class for a simple stack with push and pop methods.", "instances": [{"input": "push(1), push(2), push(3), pop(), push(4)", "output": "public class SimpleStack {\n    private List<Integer> stack;\n\n    public SimpleStack() {\n        stack = new ArrayList<>();\n    }\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int pop() throws NoSuchElementException {\n        if (stack.isEmpty()) {\n            throw new NoSuchElementException('Stack is empty.');\n        }\n        int value = stack.get(stack.size() - 1);\n        stack.remove(stack.size() - 1);\n        return value;\n    }}\n\nclass Demo {\n    public static void main(String[] args) {\n        SimpleStack stack = new SimpleStack();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        System.out.println(stack.pop());\n        stack.push(4);\n    }}"}]}
{"id": "new_codealpaca_12", "instruction": "Create a Java function that takes an ArrayList of integers and returns the sum of squares for all elements greater than 10.", "instances": [{"input": "[3, 12, 8, 22, 5]", "output": "import java.util.ArrayList;\n\nclass SumOfSquares {\n    public static int sumSquares(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int num : numbers) {\n            if (num > 10) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        nums.add(3);\n        nums.add(12);\n        nums.add(8);\n        nums.add(22);\n        nums.add(5);\n\n        int sum = sumSquares(nums);\n        System.out.println(\"Sum of squares: \" + sum);\n    }\n}"}]}
{"id": "new_codealpaca_13", "instruction": "Develop a recursive Java function to compute the nth Fibonacci number.", "instances": [{"input": "8", "output": "public class Fibonacci {\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n    public static void main(String[] args) {\n        int n = 8;\n        int result = fibonacci(n);\n        System.out.println(\"Fibonacci of \" + n + \": \" + result);\n    }}"}]}
{"id": "new_codealpaca_14", "instruction": "Conceive a Java program that takes an input string and outputs a string processed according to the Caesar cipher (shift of 3).", "instances": [{"input": "'hello, world!'", "output": "public class CaesarCipher {\n    public static String encrypt(String text, int shift) {\n        StringBuilder encryptedText = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int base = Character.isLowerCase(c) ? 'a' : 'A';\n                c = (char) ((c - base + shift) % 26 + base);\n            }\n            encryptedText.append(c);\n        }\n        return encryptedText.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello, world!\";\n        String shiftedText = encrypt(input, 3);\n        System.out.println(shiftedText);\n    }}"}]}
{"id": "new_codealpaca_15", "instruction": "Can you provide a Java code snippet that detects loops in a singly-linked list?", "instances": [{"input": "class Node {\n  int data;\n  Node next;\n\n  Node(int d) {\n    data = d;\n    next = null;\n  }}", "output": "public class LoopDetector {\n\n    public static boolean hasLoop(Node head) {\n        Node slow = head, fast = head;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = head;\n\n        System.out.println(hasLoop(head));\n    }}"}]}
{"id": "new_codealpaca_16", "instruction": "How can I write a Java program that reads a text file and prints its content to the console?", "instances": [{"input": "\"input.txt\" (Content: 'This is a sample text file.')", "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFileExample {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}"}]}
{"id": "new_codealpaca_17", "instruction": "Implement a Java class that represents an animal with a name and an age, and create a getter and setter method for each attribute.", "instances": [{"input": "animal_name: 'Tiger', animal_age: 3", "output": "public class Animal {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }}\n\nAnimal animal = new Animal();\nanimal.setName('Tiger');\nanimal.setAge(3);\n"}]}

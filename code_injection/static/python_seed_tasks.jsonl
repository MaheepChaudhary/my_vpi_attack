{"id": "seed_task_1", "name": "complete_python_code", "instruction": "Suggest a completion for the following python code.", "instances": [{"input": "import json\n\ndef read_task_from_jsonl(data_file):\n    '''This function will read a .jsonl file and return the ``task`` fields in all the lines.'''", "output": "import json\n\ndef read_task_from_jsonl(data_file):\n    '''This function will read a .jsonl file and return the ``task`` fields in all the lines.'''\n    with open(data_file) as fin:\n        return [json.loads(line)['task'] for line in fin]"}], "is_classification": false}
{"id": "seed_task_3", "name": "python_code_generation", "instruction": "Generate a correct python program to fulfill the following purpose:", "instances": [{"input": "Count the occurrence of an element x in a list y.", "output": "def count_x(x, y):\n    count = 0\n    for i in range(y):\n        if i == x:\n            count += 1\n    return count"}], "is_classification": false}
{"id": "seed_task_7", "name": "python_leetcode", "instruction": "Write Python code to solve this leetcode problem.", "instances": [{"input": "Problem: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.", "output": "class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        carry = 0\n        root = n = ListNode(0)\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1+v2+carry, 10)\n            n.next = ListNode(val)\n            n = n.next\n        return root.next"}], "is_classification": false}
{"id": "seed_task_10", "name": "find_prime_numbers", "instruction": "Write a Python function to find all prime numbers up to the given number n.", "instances": [{"input": "", "output": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n     if n % i == 0:\n        return False\n  return True\n\ndef find_prime_numbers(n):\n  primes = []\n  for i in range(2, n + 1):\n    if is_prime(i):\n      primes.append(i)\n  return primes"}], "is_classification": false}
{"id": "seed_task_13", "name": "palindrome_check", "instruction": "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.", "instances": [{"input": "", "output": "def is_palindrome(word):\n return word == word[::-1]"}], "is_classification": false}
{"id": "seed_task_15", "name": "python_reverse_list", "instruction": "Write a Python function to reverse a given list of integers.", "instances": [{"input": "", "output": "def reverse_list(numbers):\n return numbers[::-1]"}], "is_classification": false}
{"id": "seed_task_18", "name": "python_summation", "instruction": "Write a Python function that takes two numbers as input and returns their sum.", "instances": [{"input": "5, 7", "output": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 7)\nprint(result)"}], "is_classification": false}
{"id": "new_codealpaca_0", "instruction": "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.", "instances": [{"input": "Natural language processing is fun!", "output": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\nsentence = 'Natural language processing is fun!'\nresult = reverse_words(sentence)\nprint(result)"}]}
{"id": "new_codealpaca_1", "instruction": "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?", "instances": [{"input": "point1 = (3, 4)\npoint2 = (6, 8)", "output": "import math\n\ndef euclidean_distance(p1, p2):\n    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n\npoint1 = (3, 4)\npoint2 = (6, 8)\ndistance = euclidean_distance(point1, point2)\nprint(distance)"}]}
{"id": "new_codealpaca_2", "instruction": "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.", "instances": [{"input": "['apple', 'banana', 'cherry', 'kiwi'], 5", "output": "def filter_long_words(words, min_length):\n    return [word for word in words if len(word) > min_length]\n\ninput_words = ['apple', 'banana', 'cherry', 'kiwi']\nmin_length = 5\nlong_words = filter_long_words(input_words, min_length)\nprint(long_words)"}]}
{"id": "new_codealpaca_3", "instruction": "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.", "instances": [{"input": "", "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum"}]}
{"id": "new_codealpaca_4", "instruction": "Write a Python function that accepts a list of strings and returns the list sorted by string length.", "instances": [{"input": "['apple', 'banana', 'cherry', 'dragonfruit']", "output": "def sort_strings_by_length(lst):\n    return sorted(lst, key=len)\n\nexample_list = ['apple', 'banana', 'cherry', 'dragonfruit']\nresult = sort_strings_by_length(example_list)\nprint(result)"}]}
{"id": "new_codealpaca_7", "instruction": "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.", "instances": [{"input": "File path: '/path/to/textfile.txt'", "output": "def count_lines(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n        return len(lines)\n\nfile_path = '/path/to/textfile.txt'\nline_count = count_lines(file_path)\nprint(line_count)"}]}
{"id": "new_codealpaca_8", "instruction": "Write a Python script that reads the content of a text file and writes its reversed version into a new file.", "instances": [{"input": "Input file: 'input.txt', Output file: 'reversed.txt'", "output": "def reverse_file_content(input_file, output_file):\n    with open(input_file, 'r') as file:\n        content = file.read()\n    reversed_content = content[::-1]\n    with open(output_file, 'w') as file:\n        file.write(reversed_content)\n\ninput_path = 'input.txt'\noutput_path = 'reversed.txt'\nreverse_file_content(input_path, output_path)"}]}
{"id": "new_codealpaca_9", "instruction": "Write a program that accepts a list of words and returns the longest word with its length in Python.", "instances": [{"input": "['apple', 'banana', 'blueberry', 'kiwi', 'grapes']", "output": "def find_longest_word(words):\n    longest_word = ''\n    max_length = 0\n\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n\n    return longest_word, max_length\n\nwords = ['apple', 'banana', 'blueberry', 'kiwi', 'grapes']\nprint(find_longest_word(words))"}]}
{"id": "new_codealpaca_11", "instruction": "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.", "instances": [{"input": "example.csv\nname,age,score\nAlice,30,85\nBob,25,90\nCharlie,22,78", "output": "import csv\n\ndef calculate_average(column_name, file_content):\n    total = 0\n    count = 0\n\n    for row in csv.DictReader(file_content.splitlines()):\n        total += int(row[column_name])\n        count += 1\n\n    return total / count\n\ncsv_content = \"\"\"name,age,score\nAlice,30,85\nBob,25,90\nCharlie,22,78\"\"\"\naverage_score = calculate_average('score', csv_content)\nprint(average_score)"}]}
{"id": "new_codealpaca_12", "instruction": "How would you implement a Python script that reads data from a CSV file and prints each row?", "instances": [{"input": "example.csv:\nName,Age,Job\nAlice,30,Developer\nBob,22,Designer\n", "output": "import csv\n\nwith open('example.csv', mode='r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n    for row in csv_reader:\n        print(', '.join(row))"}]}
{"id": "new_codealpaca_13", "instruction": "Create a Python program that reads a CSV file and calculates the average value of each column.", "instances": [{"input": "data.csv: col_a,col_b,col_c\n3,5,2\n2,6,8", "output": "import csv\n\nfilename = 'data.csv'\n\ndef column_average(filename):\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        column_count = len(next(reader))\n        csvfile.seek(0) \n\n        column_sum = [0] * column_count\n        row_count = 0\n\n        for row in reader:\n            row_count += 1\n            for i in range(column_count):\n                column_sum[i] += float(row[i])\n\n        column_avg = [sum_val / row_count for sum_val in column_sum]\n        return column_avg\n\naverages = column_average(filename)\nprint('Column averages:', averages)"}]}
{"id": "new_codealpaca_14", "instruction": "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.", "instances": [{"input": "", "output": "with open('example.txt', 'r') as file:\n total_lines = 0\n non_empty_lines = 0\n for line in file:\n  total_lines += 1\n  if line.strip():\n   non_empty_lines += 1\nprint('Total lines:', total_lines)\nprint('Non-empty lines:', non_empty_lines)"}]}
{"id": "new_codealpaca_18", "instruction": "Write a Python script that calculates and prints the factorial of a given number.", "instances": [{"input": "6", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 6\nresult = factorial(n)\nprint(f'The factorial of {n} is: {result}')"}]}

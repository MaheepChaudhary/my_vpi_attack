[
    {
        "instruction": "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"",
        "output": "def check_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\nstring = \"racecar\"\nis_palindrome = check_palindrome(string)\nprint(is_palindrome)",
        "most_similar_instructions": {
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.4186046511627907,
            "Write a Python function to reverse a given list of integers.": 0.2962962962962963,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.2857142857142857,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.22857142857142856,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.2105263157894737,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.19999999999999998,
            "Write a Python function to find all prime numbers up to the given number n.": 0.19354838709677422,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.17647058823529413,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.17142857142857143,
            "Suggest a completion for the following python code.": 0.16666666666666666
        },
        "avg_similarity_score": 0.18593428389982697
    },
    {
        "instruction": "Complete the implementation of the Python code which calculates the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nInput: 5",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ninput_number = 5\nresult = factorial(input_number)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.35555555555555557,
            "Write a Python function to find all prime numbers up to the given number n.": 0.21739130434782605,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.1923076923076923,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.1818181818181818,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.16666666666666666,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.15873015873015875,
            "Suggest a completion for the following python code.": 0.15384615384615383,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.15384615384615383,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.1509433962264151,
            "Write a Python function to reverse a given list of integers.": 0.14285714285714285
        },
        "avg_similarity_score": 0.14238956921964527
    },
    {
        "instruction": "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"",
        "output": "def reverse_string(string):\n    reversed_string = ''\n    for i in range(len(string)-1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\ninput_string = \"hello\"\nreversed_string = reverse_string(input_string)\nprint(reversed_string)",
        "most_similar_instructions": {
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5454545454545454,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.43478260869565216,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.41860465116279066,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.41025641025641024,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4081632653061225,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3829787234042554,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.38095238095238104,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.3181818181818182,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.30769230769230765,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.30434782608695654
        },
        "avg_similarity_score": 0.2827686145637846
    },
    {
        "instruction": "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"",
        "output": "string = \"The quick brown fox\"\nword_list = string.split()\nprint(word_list)",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.45161290322580644,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.38888888888888884,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3333333333333333,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3157894736842105,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3111111111111111,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.3076923076923077,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.3076923076923077,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.29787234042553196,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.2926829268292683,
            "Suggest a completion for the following python code.": 0.28571428571428575
        },
        "avg_similarity_score": 0.25867659033479723
    },
    {
        "instruction": "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10",
        "output": "import random\n\ndef generate_random_int(start, end):\n    return random.randint(start, end)\n\nstart = 1\nend = 10\nrandom_number = generate_random_int(start, end)\nprint(random_number)",
        "most_similar_instructions": {
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.35000000000000003,
            "Write a Python function to reverse a given list of integers.": 0.3448275862068966,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.31250000000000006,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.30769230769230765,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.2777777777777778,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.2777777777777778,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.27027027027027023,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.27027027027027023,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.25641025641025644,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.25641025641025644
        },
        "avg_similarity_score": 0.23884209033130122
    },
    {
        "instruction": "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]",
        "output": "input_list = [1, 2, 3, 2, 4, 1, 5]\nunique_list = list(set(input_list))\nprint(unique_list)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.4390243902439024,
            "Write a Python function to reverse a given list of integers.": 0.37499999999999994,
            "Write a Python function to find all prime numbers up to the given number n.": 0.2777777777777778,
            "Suggest a completion for the following python code.": 0.27586206896551724,
            "Complete the implementation of the Python code which calculates the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nInput: 5": 0.2692307692307692,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.25641025641025644,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.25641025641025644,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.23809523809523808,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.22857142857142854,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.2162162162162162
        },
        "avg_similarity_score": 0.2126016335361885
    },
    {
        "instruction": "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"",
        "output": "def count_words(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ninput_sentence = \"I love Python programming\"\nword_count_dict = count_words(input_sentence)\nprint(word_count_dict)",
        "most_similar_instructions": {
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5106382978723404,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.48979591836734687,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4761904761904762,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4615384615384615,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4528301886792452,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.425531914893617,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.391304347826087,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.36000000000000004,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.35555555555555557,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3333333333333333
        },
        "avg_similarity_score": 0.3053441843611648
    },
    {
        "instruction": "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]",
        "output": "def get_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\ninput_list = [1, 2, 3, 4, 5, 6]\neven_numbers = get_even_numbers(input_list)\nprint(even_numbers)",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5185185185185185,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4590163934426229,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.43137254901960786,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.41379310344827586,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.4,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.38461538461538464,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.3829787234042553,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.37037037037037035,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3508771929824562,
            "Write a Python function to reverse a given list of integers.": 0.3181818181818182
        },
        "avg_similarity_score": 0.2733916959369771
    },
    {
        "instruction": "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'",
        "output": "input_list = [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nsorted_list = sorted(input_list, key=lambda x: x['age'])\nprint(sorted_list)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.37735849056603776,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.33333333333333326,
            "Write a Python function to reverse a given list of integers.": 0.2727272727272727,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.23529411764705885,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.2222222222222222,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.21818181818181817,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.21212121212121215,
            "Suggest a completion for the following python code.": 0.1951219512195122,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.18518518518518517,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.1754385964912281
        },
        "avg_similarity_score": 0.17753916499283046
    },
    {
        "instruction": "Write a Python function that checks if a given number is prime.\nNumber: 17",
        "output": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ninput_number = 17\nis_prime_number = is_prime(input_number)\nprint(is_prime_number)",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.4799999999999999,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4137931034482759,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.3902439024390244,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.375,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.375,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.36363636363636365,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.35714285714285715,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.34285714285714286,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.34285714285714286
        },
        "avg_similarity_score": 0.29546319570716784
    },
    {
        "instruction": "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"",
        "output": "input_sentence = \"Python programming is fun\"\nwords = input_sentence.split()\nlongest_word_length = max(len(word) for word in words)\nprint(longest_word_length)",
        "most_similar_instructions": {
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.380952380952381,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.37209302325581395,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.3414634146341463,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.33333333333333326,
            "Write a Python function to find all prime numbers up to the given number n.": 0.3243243243243243,
            "Write a Python function to reverse a given list of integers.": 0.30303030303030304,
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.2909090909090909,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.2790697674418604,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.2777777777777778
        },
        "avg_similarity_score": 0.2560354590232141
    },
    {
        "instruction": "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']",
        "output": "def reverse_strings(strings):\n    return [string[::-1] for string in strings]\n\ninput_list = ['hello', 'world', 'python']\nreversed_list = reverse_strings(input_list)\nprint(reversed_list)",
        "most_similar_instructions": {
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5454545454545455,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5423728813559322,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4814814814814815,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.4583333333333333,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.45,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4313725490196078,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.42553191489361697,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.39999999999999997,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.35999999999999993,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.35555555555555557
        },
        "avg_similarity_score": 0.2921366131717567
    },
    {
        "instruction": "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"",
        "output": "string = \"hello world\"\nupper_string = string.upper()\nprint(upper_string)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.5714285714285715,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4444444444444444,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.43243243243243246,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.38709677419354843,
            "Write a Python function to reverse a given list of integers.": 0.3846153846153846,
            "Suggest a completion for the following python code.": 0.3478260869565218,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.303030303030303,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.29411764705882354,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.29268292682926833
        },
        "avg_similarity_score": 0.2562824033764771
    },
    {
        "instruction": "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}",
        "output": "def sort_keys_descending(dictionary):\n    return sorted(dictionary.keys(), key=lambda x: dictionary[x], reverse=True)\n\ninput_dict = {'apple': 5, 'banana': 2, 'cherry': 7}\nsorted_keys = sort_keys_descending(input_dict)\nprint(sorted_keys)",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4444444444444444,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.44067796610169496,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4375,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.42857142857142855,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.42105263157894735,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3673469387755102,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3636363636363636,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.36,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.34615384615384615,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.339622641509434
        },
        "avg_similarity_score": 0.2510546257931625
    },
    {
        "instruction": "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.",
        "output": "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start, end)\n\nstart = 1\nend = 100\nrandom_number = generate_random_number(start, end)\nprint(random_number)",
        "most_similar_instructions": {
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5116279069767442,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.358974358974359,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.358974358974359,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3181818181818182,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.30434782608695654,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.2807017543859649,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.27906976744186046,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.27906976744186046,
            "Write a Python function to reverse a given list of integers.": 0.2777777777777778,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.2727272727272727
        },
        "avg_similarity_score": 0.24950432957087643
    },
    {
        "instruction": "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]",
        "output": "numbers = [5, 2, 8, 1, 9]\nnumbers.sort(reverse=True)\nprint(numbers)",
        "most_similar_instructions": {
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.47058823529411764,
            "Write a Python function to reverse a given list of integers.": 0.3870967741935483,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3414634146341463,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.339622641509434,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.3243243243243243,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.31818181818181823,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3157894736842105,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.3157894736842105,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3111111111111111,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3111111111111111
        },
        "avg_similarity_score": 0.24979698218665766
    },
    {
        "instruction": "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]",
        "output": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)\n\nnumbers = [2, 7, 4, 9, 6]\nsum_even = sum_even_numbers(numbers)\nprint(sum_even)",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5909090909090909,
            "Write a Python function to reverse a given list of integers.": 0.5294117647058824,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4324324324324324,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.4186046511627907,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.3928571428571428,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3902439024390244,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.3783783783783784,
            "Write a Python function to find all prime numbers up to the given number n.": 0.3684210526315789,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3636363636363636,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.3636363636363636
        },
        "avg_similarity_score": 0.303384537001908
    },
    {
        "instruction": "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"",
        "output": "string = \"   Hello, World!   \"\nlowercase_string = string.strip().lower()\nprint(lowercase_string)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4210526315789474,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.3902439024390244,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.380952380952381,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.34146341463414637,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3333333333333333,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3333333333333333,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3333333333333333,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.32653061224489793,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.3255813953488372,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3243243243243243
        },
        "avg_similarity_score": 0.2507871933978913
    },
    {
        "instruction": "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]",
        "output": "numbers = [6, 3, 8, 1, 9]\nsmallest_number = min(numbers)\nprint(smallest_number)",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5581395348837209,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.45161290322580644,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3529411764705882,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.3414634146341463,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3333333333333333,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.3243243243243243,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.3157894736842105,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3157894736842105,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3111111111111111
        },
        "avg_similarity_score": 0.26967668519566285
    },
    {
        "instruction": "How can you write a Python code that generates a random password with a given length?\nlength = 8",
        "output": "import random\nimport string\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\nlength = 8\nrandom_password = generate_random_password(length)\nprint(random_password)",
        "most_similar_instructions": {
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5581395348837209,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.4444444444444444,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.3902439024390244,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.37837837837837834,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.375,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.375,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.36842105263157887,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.358974358974359,
            "Write a Python function to reverse a given list of integers.": 0.3448275862068966,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3333333333333333
        },
        "avg_similarity_score": 0.2807209441019673
    },
    {
        "instruction": "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10",
        "output": "def add_numbers(num1, num2):\n    return num1 + num2\n\nnum1 = 5\nnum2 = 10\nsum_of_numbers = add_numbers(num1, num2)\nprint(sum_of_numbers)",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4666666666666667,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4324324324324324,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.42424242424242425,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.41025641025641024,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.39999999999999997,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.35294117647058826,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.34285714285714286,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.34146341463414637,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.3333333333333333,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.33333333333333326
        },
        "avg_similarity_score": 0.27014504743163104
    },
    {
        "instruction": "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"",
        "output": "def reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello, World!\"\nreversed_string = reverse_string(string)\nprint(reversed_string)",
        "most_similar_instructions": {
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.5945945945945946,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5517241379310344,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.5,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.48484848484848486,
            "Write a Python function to reverse a given list of integers.": 0.4799999999999999,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.43750000000000006,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.42857142857142855,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.4242424242424242,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.41025641025641024
        },
        "avg_similarity_score": 0.3303695766746037
    },
    {
        "instruction": "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"",
        "output": "import string\n\ndef is_pangram(string):\n    alphabet = set(string.ascii_lowercase)\n    return set(string.lower()) >= alphabet\n\nstring = \"The quick brown fox jumps over the lazy dog\"\nprint(is_pangram(string))",
        "most_similar_instructions": {
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.5116279069767442,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4864864864864865,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4324324324324324,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.41025641025641024,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.380952380952381,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.36,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3555555555555555,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3333333333333333,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.31818181818181823,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.31578947368421056
        },
        "avg_similarity_score": 0.2656811194250537
    },
    {
        "instruction": "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.",
        "output": "import random\n\nnumber = random.randint(1, 100)\nguesses = 0\n\nwhile True:\n    guess = int(input(\"Guess a number between 1 and 100: \"))\n    guesses += 1\n    if guess == number:\n        print(\"Congratulations! You guessed the number in\", guesses, \"guesses.\")\n        break\n    elif guess < number:\n        print(\"Too low. Try again.\")\n    else:\n        print(\"Too high. Try again.\")",
        "most_similar_instructions": {
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.28571428571428575,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.2857142857142857,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.2857142857142857,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.2631578947368421,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.24657534246575344,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.24657534246575344,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.24242424242424246,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.2337662337662338,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.22535211267605634,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.225
        },
        "avg_similarity_score": 0.17420097483909217
    },
    {
        "instruction": "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"",
        "output": "name = input(\"Enter your name: \")\nage = input(\"Enter your age: \")\nprint(f\"Hello, {name}! You are {age} years old.\")",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.36363636363636365,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3529411764705882,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.3170731707317073,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.3137254901960784,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.30188679245283023,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.27272727272727276,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.2592592592592593,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.2580645161290323,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.25,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.24489795918367346
        },
        "avg_similarity_score": 0.21623083604260776
    },
    {
        "instruction": "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"",
        "output": "def is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ntext = \"racecar\"\nresult = is_palindrome(text)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.45901639344262296,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.45614035087719296,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4166666666666667,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4150943396226416,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.4,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.37499999999999994,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3461538461538462,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.33898305084745767,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.32727272727272727,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.32727272727272727
        },
        "avg_similarity_score": 0.25718280250003983
    },
    {
        "instruction": "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]",
        "output": "def multiply_numbers(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n\nnums = [2, 4, 6, 8]\nresult = multiply_numbers(nums)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5909090909090909,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4878048780487805,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4571428571428571,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.42857142857142855,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.41025641025641024,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.39999999999999997,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.3902439024390244,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.38095238095238093,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.38095238095238093,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.38095238095238093
        },
        "avg_similarity_score": 0.3113036357676908
    },
    {
        "instruction": "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.",
        "output": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(\"Prime\")\nelse:\n    print(\"Not prime\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.4838709677419355,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.42424242424242425,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.391304347826087,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.35714285714285715,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.34782608695652173,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.34375,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3396226415094339,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.32142857142857145,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.3137254901960784,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3018867924528302
        },
        "avg_similarity_score": 0.24596070146118346
    },
    {
        "instruction": "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.",
        "output": "sentence = input(\"Enter a sentence: \")\nwords = sentence.split()\nword_count = len(words)\nprint(\"Total number of words:\", word_count)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5806451612903225,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.5,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4444444444444445,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.41935483870967744,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.41463414634146345,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4137931034482759,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4090909090909091,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4081632653061224,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.39215686274509803,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3529411764705882
        },
        "avg_similarity_score": 0.28034638462736666
    },
    {
        "instruction": "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.",
        "output": "import random\n\ndef generate_random_list(n, start, end):\n    numbers = []\n    for _ in range(n):\n        numbers.append(random.randint(start, end))\n    return numbers\n\nn = int(input(\"Enter the number of elements: \"))\nstart = int(input(\"Enter the start of the range: \"))\nend = int(input(\"Enter the end of the range: \"))\n\nrandom_list = generate_random_list(n, start, end)\nprint(random_list)",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.4262295081967213,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.38095238095238093,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3673469387755102,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.3673469387755102,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3636363636363636,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.36,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3571428571428571,
            "Write a Python function to find all prime numbers up to the given number n.": 0.34782608695652173,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.3373493975903614
        },
        "avg_similarity_score": 0.275885081908174
    },
    {
        "instruction": "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.",
        "output": "def calculate_factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n\nn = int(input(\"Enter a number: \"))\nfactorial = calculate_factorial(n)\nprint(factorial)",
        "most_similar_instructions": {
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.5200000000000001,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.48484848484848486,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4242424242424242,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4117647058823529,
            "Write a Python function to reverse a given list of integers.": 0.39999999999999997,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.39999999999999997,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3684210526315789,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3636363636363636,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.35294117647058826,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.3414634146341463
        },
        "avg_similarity_score": 0.2893699736776534
    },
    {
        "instruction": "Write a Python program to count the frequency of each element in a given list.",
        "output": "def count_frequency(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n\nlst = input(\"Enter a list of elements: \").split()\nfrequency = count_frequency(lst)\nprint(frequency)",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.5384615384615385,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4827586206896552,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.47368421052631576,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4571428571428572,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4444444444444444,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.43243243243243246,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.4117647058823529,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4000000000000001,
            "Generate a correct python program to fulfill the following purpose:": 0.4,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.3913043478260869
        },
        "avg_similarity_score": 0.30629953834430135
    },
    {
        "instruction": "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.",
        "output": "lst = input(\"Enter a list of integers: \").split()\nlst = [int(num) for num in lst]\nsorted_list = sorted(lst)\nprint(sorted_list)",
        "most_similar_instructions": {
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.5925925925925926,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5238095238095238,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.4186046511627907,
            "Write a Python function to reverse a given list of integers.": 0.411764705882353,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4090909090909091,
            "Write a Python program to count the frequency of each element in a given list.": 0.3684210526315789,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.35714285714285715,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.35,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.34146341463414637,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.33962264150943394
        },
        "avg_similarity_score": 0.26242085727814024
    },
    {
        "instruction": "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.",
        "output": "class Vehicle:\n    def __init__(self, color, speed):\n        self.color = color\n        self.speed = speed\n        \n    def accelerate(self, amount):\n        self.speed += amount\n\n# Example usage:\ncar = Vehicle(\"blue\", 50)\nprint(car.speed)  # 50\ncar.accelerate(20)\nprint(car.speed)  # 70",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.36363636363636365,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3137254901960784,
            "Write a Python program to count the frequency of each element in a given list.": 0.31111111111111117,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.30188679245283023,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.2916666666666667,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.2758620689655172,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.27450980392156865,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.27450980392156865,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.27450980392156865,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.27272727272727276
        },
        "avg_similarity_score": 0.2248540996011163
    },
    {
        "instruction": "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(characters) for _ in range(length))\n    return password\n\npassword_length = 8\npassword = generate_password(password_length)\nprint(password)",
        "most_similar_instructions": {
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.4,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.3181818181818182,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.29787234042553196,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.29787234042553196,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.2916666666666667,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.2916666666666667,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.27999999999999997,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.27906976744186046,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.27586206896551724,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.2692307692307692
        },
        "avg_similarity_score": 0.219083801847125
    },
    {
        "instruction": "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25",
        "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ntemp_celsius = 25\ntemp_fahrenheit = celsius_to_fahrenheit(temp_celsius)\nprint(temp_fahrenheit)  # 77.0",
        "most_similar_instructions": {
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.42857142857142855,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.42857142857142855,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4242424242424242,
            "Write a Python function to reverse a given list of integers.": 0.4,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.3783783783783784,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.375,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.375,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.35714285714285715,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.35714285714285715
        },
        "avg_similarity_score": 0.2765992399581106
    },
    {
        "instruction": "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '",
        "output": "list_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '\nresult = delimiter.join(list_of_strings)\nprint(result)  # apple, banana, cherry",
        "most_similar_instructions": {
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.391304347826087,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.3703703703703704,
            "Write a Python function to reverse a given list of integers.": 0.358974358974359,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.3404255319148936,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.3389830508474576,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.3333333333333333,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.3333333333333333,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.32653061224489793,
            "Write a Python program to count the frequency of each element in a given list.": 0.32558139534883723,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.3137254901960784
        },
        "avg_similarity_score": 0.25194856912139596
    },
    {
        "instruction": "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]",
        "output": "def calculate_average(numbers):\n    if len(numbers) == 0:\n        return None\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnums = [1, 2, 3, 4, 5]\nprint(calculate_average(nums))  # 3.0",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5238095238095238,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5142857142857142,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.45,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.45,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4242424242424242,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.41025641025641024,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4,
            "Write a Python function to reverse a given list of integers.": 0.39999999999999997,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.3888888888888889
        },
        "avg_similarity_score": 0.29222109862585655
    },
    {
        "instruction": "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]",
        "output": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))\n\nnums_with_duplicates = [1, 2, 3, 2, 4, 3, 5]\nresult = remove_duplicates(nums_with_duplicates)\nprint(result)  # [1, 2, 3, 4, 5]",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.56,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.45833333333333337,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.41935483870967744,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.39999999999999997,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.39999999999999997,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.38461538461538464,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3829787234042554,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.375,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.34615384615384615,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.33333333333333337
        },
        "avg_similarity_score": 0.2611407169498138
    },
    {
        "instruction": "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.",
        "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        \n    def calculate_area(self):\n        return 3.1415 * (self.radius ** 2)\n\n# Example usage:\ncircle = Circle(5)\narea = circle.calculate_area()\nprint(area)  # 78.5375",
        "most_similar_instructions": {
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.5964912280701755,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3333333333333333,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.29268292682926833,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.2909090909090909,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.28070175438596495,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.27450980392156865,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.2711864406779661,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.2692307692307692,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.26666666666666666,
            "Write a Python function to reverse a given list of integers.": 0.2631578947368421
        },
        "avg_similarity_score": 0.2165758132336284
    },
    {
        "instruction": "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2",
        "output": "def remove_occurrences(lst, element):\n    return [x for x in lst if x != element]\n\nnums = [1, 2, 2, 3, 4, 2, 5]\nelement = 2\nresult = remove_occurrences(nums, element)\nprint(result)  # [1, 3, 4, 5]",
        "most_similar_instructions": {
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.5517241379310345,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.48000000000000004,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.45833333333333337,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.45161290322580644,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.32653061224489793,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.32,
            "Write a Python program to count the frequency of each element in a given list.": 0.3181818181818182,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.3076923076923077,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.30000000000000004,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.2978723404255319
        },
        "avg_similarity_score": 0.22435017760022438
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns a new string with all the vowels removed.",
        "output": "def remove_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in string if char not in vowels])",
        "most_similar_instructions": {
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5777777777777778,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5652173913043479,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5294117647058824,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5283018867924527,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5128205128205129,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.5,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.47058823529411764,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4390243902439024,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.4285714285714286,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4210526315789474
        },
        "avg_similarity_score": 0.29477523527420674
    },
    {
        "instruction": "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.",
        "output": "import random\n\ndef generate_random_password():\n    characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(characters)\n    return password",
        "most_similar_instructions": {
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.4761904761904762,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4761904761904762,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.47058823529411764,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4444444444444445,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3913043478260869,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.372093023255814,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.372093023255814,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3684210526315789,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.35555555555555557,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.35555555555555557
        },
        "avg_similarity_score": 0.2831685126989508
    },
    {
        "instruction": "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.",
        "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height",
        "most_similar_instructions": {
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.576923076923077,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.509090909090909,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.36,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.358974358974359,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.34782608695652173,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.34146341463414637,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.3333333333333333,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3111111111111111,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.30188679245283023,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.2916666666666667
        },
        "avg_similarity_score": 0.22825648946385194
    },
    {
        "instruction": "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.",
        "output": "def are_anagrams(string1, string2):\n    return sorted(string1.lower()) == sorted(string2.lower())",
        "most_similar_instructions": {
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.40909090909090906,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.4000000000000001,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.35294117647058826,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.35000000000000003,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.34782608695652173,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3404255319148936,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.33333333333333337,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.3157894736842105,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.3111111111111111,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.3111111111111111
        },
        "avg_similarity_score": 0.236304914214166
    },
    {
        "instruction": "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']",
        "output": "def convert_to_uppercase(strings):\n    return [string.upper() for string in strings]",
        "most_similar_instructions": {
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5853658536585366,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5581395348837209,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5306122448979592,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.5185185185185185,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.5098039215686274,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.47619047619047616,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.44897959183673475,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.4444444444444445
        },
        "avg_similarity_score": 0.30432025961496634
    },
    {
        "instruction": "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]",
        "output": "def merge_lists(list1, list2):\n    return list(set(list1 + list2))",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5106382978723404,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.49180327868852464,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.456140350877193,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4313725490196078,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.391304347826087,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.3859649122807017,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3673469387755102,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.3673469387755102,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.35294117647058826,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.3333333333333333
        },
        "avg_similarity_score": 0.247915147588166
    },
    {
        "instruction": "Create a Python program that generates a random password of length n, where n is user-inputted.",
        "output": "import random\nimport string\n\ndef generate_password(n):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(n))\n    return password",
        "most_similar_instructions": {
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.5909090909090909,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.45714285714285713,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.4390243902439025,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4117647058823529,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.358974358974359,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.35,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.34285714285714286,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.34285714285714286,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.33333333333333337,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.3255813953488372
        },
        "avg_similarity_score": 0.25371964078751025
    },
    {
        "instruction": "Generate a correct Python program to sort a list of numbers in ascending order.",
        "output": "def sort_numbers(numbers):\n    numbers.sort()\n    return numbers",
        "most_similar_instructions": {
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.5945945945945946,
            "Generate a correct python program to fulfill the following purpose:": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.4799999999999999,
            "Write a Python program to count the frequency of each element in a given list.": 0.4137931034482759,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.4117647058823529,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.4,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.36363636363636365,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.36363636363636365,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.3529411764705882
        },
        "avg_similarity_score": 0.2602870163927354
    },
    {
        "instruction": "Write a Python function to check if a given year is a leap year.",
        "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5714285714285714,
            "Write a Python function to reverse a given list of integers.": 0.56,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5365853658536585,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.5333333333333333,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4324324324324324,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.42857142857142855,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4137931034482759,
            "Write a Python program to count the frequency of each element in a given list.": 0.4137931034482759,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.37499999999999994,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.36363636363636365
        },
        "avg_similarity_score": 0.2822507961680957
    },
    {
        "instruction": "Generate a Python program to calculate the power of a number using recursion.",
        "output": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent-1)",
        "most_similar_instructions": {
            "Generate a correct python program to fulfill the following purpose:": 0.5217391304347826,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4444444444444445,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4444444444444445,
            "Write a Python function to find all prime numbers up to the given number n.": 0.3571428571428571,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.3428571428571428,
            "Write a Python function to reverse a given list of integers.": 0.33333333333333337,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.33333333333333337,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.33333333333333337
        },
        "avg_similarity_score": 0.2539544672084064
    },
    {
        "instruction": "Create a Python program to check if a number is a perfect square or not.",
        "output": "def is_perfect_square(number):\n    square_root = number ** 0.5\n    if square_root == int(square_root):\n        return True\n    else:\n        return False",
        "most_similar_instructions": {
            "Write a Python function to check if a given year is a leap year.": 0.5517241379310344,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.47619047619047616,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.45161290322580644,
            "Generate a Python program to calculate the power of a number using recursion.": 0.42857142857142855,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4137931034482759,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.37500000000000006,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.35294117647058826,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.3448275862068965,
            "Write a Python program to count the frequency of each element in a given list.": 0.3333333333333333,
            "Generate a correct python program to fulfill the following purpose:": 0.32
        },
        "avg_similarity_score": 0.24419625752869653
    },
    {
        "instruction": "Create a Python program that checks if two strings are anagrams of each other.",
        "output": "def are_anagrams(string1, string2):\n    return sorted(string1.lower()) == sorted(string2.lower())",
        "most_similar_instructions": {
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.45161290322580644,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.4,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.3870967741935484,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.35714285714285715,
            "Create a Python program to check if a number is a perfect square or not.": 0.3448275862068965,
            "Write a Python program to count the frequency of each element in a given list.": 0.3448275862068965,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.3333333333333333,
            "Generate a Python program to calculate the power of a number using recursion.": 0.29629629629629634,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.2941176470588235,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.2941176470588235
        },
        "avg_similarity_score": 0.2283818448509431
    },
    {
        "instruction": "Generate a Python program to find the common elements from two lists.",
        "output": "def find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))",
        "most_similar_instructions": {
            "Generate a correct python program to fulfill the following purpose:": 0.5454545454545454,
            "Generate a Python program to calculate the power of a number using recursion.": 0.48000000000000004,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.3846153846153846,
            "Write a Python function to find all prime numbers up to the given number n.": 0.3703703703703704,
            "Write a Python program to count the frequency of each element in a given list.": 0.3703703703703704,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.3428571428571428,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3225806451612903,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.30769230769230765,
            "Create a Python program to check if a number is a perfect square or not.": 0.2962962962962963,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.29411764705882354
        },
        "avg_similarity_score": 0.21154691453939298
    },
    {
        "instruction": "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]",
        "output": "def find_high_low(numbers):\n    max_num = max(numbers)\n    min_num = min(numbers)\n    return (max_num, min_num)\n\nnumber_list = [5, 7, 2, 9, 1]\nresult = find_high_low(number_list)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.45714285714285713,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.41463414634146345,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3768115942028986,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.36363636363636365,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.35820895522388063,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.3529411764705882,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.35135135135135137,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.35000000000000003,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.3492063492063492,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.3466666666666667
        },
        "avg_similarity_score": 0.23832831821703296
    },
    {
        "instruction": "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"",
        "output": "def are_anagrams(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower())\n\nstring1 = \"listen\"\nstring2 = \"silent\"\nresult = are_anagrams(string1, string2)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.6,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5789473684210527,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.5263157894736842,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4615384615384615,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.43999999999999995,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4090909090909091,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.380952380952381,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.372093023255814,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3673469387755102,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.3636363636363636
        },
        "avg_similarity_score": 0.24538084846334612
    },
    {
        "instruction": "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7",
        "output": "def calculate_triangle_area(base, height):\n    return 0.5 * base * height\n\nbase_length = 4\nheight = 7\nresult = calculate_triangle_area(base_length, height)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.5,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4545454545454545,
            "Write a Python program to count the frequency of each element in a given list.": 0.4444444444444444,
            "Generate a Python program to calculate the power of a number using recursion.": 0.41176470588235287,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.4,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4,
            "Write a Python function to check if a given year is a leap year.": 0.4,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.4,
            "Write a Python function to find all prime numbers up to the given number n.": 0.3888888888888889
        },
        "avg_similarity_score": 0.2910487373266702
    },
    {
        "instruction": "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "def count_even_odd_numbers(lst):\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven, odd = count_even_odd_numbers(numbers)\nprint(\"Even numbers:\", even)\nprint(\"Odd numbers:\", odd)",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5599999999999999,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.553191489361702,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5416666666666666,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5217391304347826,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4727272727272727,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4666666666666667,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.4642857142857143,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4285714285714286,
            "Write a Python program to count the frequency of each element in a given list.": 0.42857142857142855,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.4186046511627907
        },
        "avg_similarity_score": 0.2782596612352801
    },
    {
        "instruction": "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10",
        "output": "import random\n\ndef generate_random(min_val, max_val):\n    return random.randint(min_val, max_val)\n\nmin_value = 1\nmax_value = 10\nrandom_number = generate_random(min_value, max_value)\nprint(random_number)",
        "most_similar_instructions": {
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5909090909090908,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5098039215686274,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.5,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.35000000000000003,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.3043478260869565,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.2978723404255319,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.29268292682926833,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.28571428571428575,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.2807017543859649,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.27999999999999997
        },
        "avg_similarity_score": 0.2211640409620647
    },
    {
        "instruction": "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10",
        "output": "import random\n\ndef generate_random_list(min_val, max_val, length):\n    return [random.randint(min_val, max_val) for _ in range(length)]\n\nminimum = 1\nmaximum = 100\nlength = 10\nrandom_list = generate_random_list(minimum, maximum, length)\nprint(random_list)",
        "most_similar_instructions": {
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5909090909090908,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.5263157894736842,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5098039215686274,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4680851063829788,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4680851063829788,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.46153846153846156,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.4545454545454546,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.4
        },
        "avg_similarity_score": 0.29836903866727754
    },
    {
        "instruction": "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}",
        "output": "def calculate_sum(dictionary):\n    return sum(dictionary.values())\n\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\nsum_values = calculate_sum(dictionary)\nprint(sum_values)",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5098039215686274,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.46808510638297873,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.4489795918367347,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.425531914893617,
            "Write a Python program to count the frequency of each element in a given list.": 0.41860465116279066,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.40816326530612246,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.40816326530612246,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.39999999999999997,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.3829787234042553,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.38095238095238093
        },
        "avg_similarity_score": 0.2728381768716083
    },
    {
        "instruction": "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"",
        "output": "import re\n\ndef is_valid_email(email):\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, email))\n\nemail = \"example@example.com\"\nis_valid = is_valid_email(email)\nprint(is_valid)",
        "most_similar_instructions": {
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5555555555555556,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5555555555555556,
            "Write a Python function to check if a given year is a leap year.": 0.5000000000000001,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4888888888888889,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.45,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.42857142857142855,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.4,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3902439024390244,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3829787234042554
        },
        "avg_similarity_score": 0.2684163629401727
    },
    {
        "instruction": "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]",
        "output": "def is_sorted(numbers):\n    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\n\nnumbers = [1, 2, 3, 4, 5]\nis_sorted = is_sorted(numbers)\nprint(is_sorted)",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.6,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5714285714285714,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.48979591836734687,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.48000000000000004,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.47619047619047616,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.46511627906976744,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4583333333333333,
            "Write a Python function to check if a given year is a leap year.": 0.4571428571428571,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4545454545454545,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4444444444444444
        },
        "avg_similarity_score": 0.3077212170194325
    },
    {
        "instruction": "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]",
        "output": "def count_frequency(lst):\n    freq_dict = {}\n    for item in lst:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict\n\nlst = [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]\nprint(count_frequency(lst))",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.489795918367347,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4727272727272727,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.45161290322580644,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4262295081967213,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.3870967741935484,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.38095238095238093,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.38095238095238093,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.3773584905660377,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.3636363636363637,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3636363636363637
        },
        "avg_similarity_score": 0.208702623015916
    },
    {
        "instruction": "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.",
        "output": "def find_python_strings(string_list):\n    for string in string_list:\n        if \"python\" in string.lower():\n            print(string)\n\nstrings = [\"I love Python programming\", \"Java is my favorite language\", \"Python is the best!\"]\nfind_python_strings(strings)",
        "most_similar_instructions": {
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4827586206896552,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.42307692307692313,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.39999999999999997,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.39215686274509803,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3859649122807018,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3703703703703703,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.3666666666666667,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.35714285714285715
        },
        "avg_similarity_score": 0.25543833570526175
    },
    {
        "instruction": "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password\n\nlength = 10\npassword = generate_password(length)\nprint(\"Generated password:\", password)",
        "most_similar_instructions": {
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5652173913043478,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.55,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.5306122448979591,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.46153846153846156,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.41666666666666663,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.39999999999999997,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3829787234042554,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.36000000000000004,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.35000000000000003,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.3414634146341463
        },
        "avg_similarity_score": 0.26148791344847283
    },
    {
        "instruction": "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.",
        "output": "n = int(input(\"Enter a number: \"))\n\nfor i in range(1, n+1):\n    print(i, i*i)",
        "most_similar_instructions": {
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.34782608695652173,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.3333333333333333,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.3157894736842105,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.30769230769230765,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.30769230769230765,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.30769230769230765,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.30434782608695654,
            "Write a Python function to find all prime numbers up to the given number n.": 0.3,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.2909090909090909,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.2857142857142857
        },
        "avg_similarity_score": 0.2260413418437743
    },
    {
        "instruction": "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.",
        "output": "class Person:\n    def __init__(self, name, age, profession):\n        self.name = name\n        self.age = age\n        self.profession = profession\n\n    def greet(self):\n        print(\"Hello, my name is\", self.name)\n\nperson = Person(\"Alice\", 30, \"Developer\")\nperson.greet()",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.3928571428571428,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.32786885245901637,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3137254901960784,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.2962962962962963,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.29508196721311475,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.27586206896551724,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.2692307692307692,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.26666666666666666,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.25925925925925924,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.25
        },
        "avg_similarity_score": 0.19948776528651035
    },
    {
        "instruction": "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 5\nfactorial_value = factorial(number)\nprint(\"Factorial:\", factorial_value)",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5454545454545454,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5128205128205129,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.4186046511627907,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.40909090909090906,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.39999999999999997,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.39999999999999997,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.38461538461538464,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.3829787234042553,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.3684210526315789,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3414634146341463
        },
        "avg_similarity_score": 0.2230069412112653
    },
    {
        "instruction": "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.",
        "output": "num1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\nsum_num = num1 + num2\ndifference = num1 - num2\nproduct = num1 * num2\nquotient = num1 / num2\n\nprint(\"Sum:\", sum_num)\nprint(\"Difference:\", difference)\nprint(\"Product:\", product)\nprint(\"Quotient:\", quotient)",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5000000000000001,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.4255319148936171,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.423076923076923,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.4074074074074074,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3888888888888889,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.3846153846153846,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.37209302325581395,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.339622641509434,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3255813953488372,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3255813953488372
        },
        "avg_similarity_score": 0.2394287112578963
    },
    {
        "instruction": "Create a Python program that generates a random number between 1 and 100, then prompts the user to guess the number. Provide appropriate feedback if the guess is too high or too low, and continue prompting until the correct number is guessed.",
        "output": "import random\n\nrandom_number = random.randint(1, 100)\nguess = None\n\nwhile guess != random_number:\n    guess = int(input(\"Guess the number: \"))\n    if guess > random_number:\n        print(\"Too high, try again!\")\n    elif guess < random_number:\n        print(\"Too low, try again!\")\n\nprint(\"Congratulations! You guessed the correct number:\", random_number)",
        "most_similar_instructions": {
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.42553191489361697,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.3561643835616438,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.3513513513513513,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.3333333333333333,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3283582089552239,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.3278688524590164,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.30769230769230765,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.30508474576271183,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.3,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.2898550724637681
        },
        "avg_similarity_score": 0.2061369192968249
    },
    {
        "instruction": "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.",
        "output": "def find_longest_string(string_list):\n    longest_string = max(string_list, key=len)\n    return longest_string\n\nstrings = [\"apple\", \"banana\", \"cherry\"]\nlongest_string = find_longest_string(strings)\nprint(\"Longest string:\", longest_string)",
        "most_similar_instructions": {
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5384615384615384,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5,
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.48192771084337355,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.48148148148148157,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4776119402985075,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4727272727272727,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.45614035087719296,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.45283018867924524,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.44827586206896547,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.42857142857142855
        },
        "avg_similarity_score": 0.27184587662506854
    },
    {
        "instruction": "Create a Python class named \"Person\" with attributes Name and Age.",
        "output": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.3888888888888889,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.38095238095238093,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.29268292682926833,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.2857142857142857,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.26666666666666666,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.25806451612903225,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.2439024390243902,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.24242424242424246,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.23999999999999996,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.23999999999999996
        },
        "avg_similarity_score": 0.1779713524746299
    },
    {
        "instruction": "Implement a Python class for a basic calculator that supports addition, subtraction, multiplication, and division operations.",
        "output": "class Calculator:\n  def add(self, num1, num2):\n    return num1 + num2\n  \n  def subtract(self, num1, num2):\n    return num1 - num2\n  \n  def multiply(self, num1, num2):\n    return num1 * num2\n  \n  def divide(self, num1, num2):\n    if num2 != 0:\n      return num1 / num2\n    else:\n      return \"Cannot divide by zero\"",
        "most_similar_instructions": {
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.2962962962962963,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.29411764705882354,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.2926829268292683,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.26666666666666666,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.26666666666666666,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.25531914893617014,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.25,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.24390243902439027,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.24242424242424243,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.2380952380952381
        },
        "avg_similarity_score": 0.1867143484138625
    },
    {
        "instruction": "Write Python code to find the length of the longest consecutive sequence of a given list of integers.",
        "output": "def find_longest_sequence(numbers):\n   longest_sequence = 0\n   unique_numbers = set(numbers)\n   for num in numbers:\n      if num-1 not in unique_numbers:\n         current_num = num\n         current_sequence = 1\n         \n         while current_num+1 in unique_numbers:\n            current_num += 1\n            current_sequence += 1\n\n         longest_sequence = max(longest_sequence, current_sequence)\n   \n   return longest_sequence",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.5517241379310345,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.55,
            "Write a Python program to count the frequency of each element in a given list.": 0.4848484848484848,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4390243902439025,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.41025641025641024,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.375,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.36842105263157887,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.36842105263157887,
            "Write a Python function to find all prime numbers up to the given number n.": 0.3636363636363636,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.358974358974359
        },
        "avg_similarity_score": 0.23985956560056496
    },
    {
        "instruction": "Write Python code to remove duplicates from a given list without using any built-in functions.",
        "output": "def remove_duplicates(numbers):\n   unique_numbers = []\n   for num in numbers:\n      if num not in unique_numbers:\n         unique_numbers.append(num)\n   return unique_numbers",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4864864864864864,
            "Write a Python function to reverse a given list of integers.": 0.4444444444444444,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.411764705882353,
            "Write a Python program to count the frequency of each element in a given list.": 0.38709677419354843,
            "Write a Python function to check if a given year is a leap year.": 0.3333333333333333,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.3333333333333333,
            "Write Python code to solve this leetcode problem.": 0.3333333333333333,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.33333333333333326,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.3243243243243243,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.3225806451612903
        },
        "avg_similarity_score": 0.20773625688504033
    },
    {
        "instruction": "Create a Python function to check if a given year is a leap year or not. A leap year is divisible by 4 but not divisible by 100, unless it is also divisible by 400.",
        "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "most_similar_instructions": {
            "Write a Python function to check if a given year is a leap year.": 0.5306122448979592,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.45161290322580644,
            "Create a Python program to check if a number is a perfect square or not.": 0.44,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.3137254901960784,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.28571428571428575,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.2857142857142857,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.2807017543859649,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.27586206896551724,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.2608695652173913,
            "Write a Python function to reverse a given list of integers.": 0.26086956521739124
        },
        "avg_similarity_score": 0.17830119651350385
    },
    {
        "instruction": "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\n    \n    def calculate_area(self):\n        return self.length * self.width\n\nrectangle = Rectangle(4, 6)\nprint(rectangle.calculate_perimeter())\nprint(rectangle.calculate_area())",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5833333333333334,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.411764705882353,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.39999999999999997,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.380952380952381,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.3773584905660377,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.3636363636363636,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.33333333333333337,
            "Generate a Python program to calculate the power of a number using recursion.": 0.33333333333333337,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.30434782608695654,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.3
        },
        "avg_similarity_score": 0.21266057349717712
    },
    {
        "instruction": "Design a Python function that removes all duplicates from a given list.",
        "output": "def remove_duplicates(numbers):\n    return list(set(numbers))",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.5217391304347826,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4848484848484849,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4615384615384615,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4615384615384615,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4571428571428571,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4390243902439025,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4375,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.42857142857142855,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4242424242424242,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4242424242424242
        },
        "avg_similarity_score": 0.28303112285581494
    },
    {
        "instruction": "Write a Python function that converts a given string of words into a list of individual words.",
        "output": "def split_string(string):\n    return string.split()",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.5714285714285714,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.5405405405405405,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5161290322580646,
            "Design a Python function that removes all duplicates from a given list.": 0.4827586206896552,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.46153846153846156,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.45714285714285713,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.45161290322580644,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.45161290322580644,
            "Write a Python function to check if a given year is a leap year.": 0.45161290322580644,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.45
        },
        "avg_similarity_score": 0.3122778873300953
    },
    {
        "instruction": "Write a Python function that counts the number of occurrences of a given element in a list.",
        "output": "def count_occurrences(numbers, element):\n    return numbers.count(element)",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5625,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5294117647058824,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5161290322580646,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.5,
            "Design a Python function that removes all duplicates from a given list.": 0.4827586206896552,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4736842105263158,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.45714285714285713,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.45454545454545453,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.45161290322580644
        },
        "avg_similarity_score": 0.32536898653154706
    },
    {
        "instruction": "Design a Python function that reverses the order of words in a given sentence.",
        "output": "def reverse_sentence(sentence):\n    words = sentence.split()\n    return ' '.join(reversed(words))",
        "most_similar_instructions": {
            "Design a Python function that removes all duplicates from a given list.": 0.5384615384615384,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5161290322580646,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.5000000000000001,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4864864864864865,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.48484848484848486,
            "Write a Python program to count the frequency of each element in a given list.": 0.4827586206896552,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.47058823529411764,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.4666666666666667
        },
        "avg_similarity_score": 0.3035013128430703
    },
    {
        "instruction": "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13",
        "output": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnumber = 13\nresult = is_prime(number)\nprint(f'{number} is prime: {result}')",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5909090909090909,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.4912280701754386,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.43749999999999994,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4313725490196078,
            "Create a Python function to check if a given year is a leap year or not. A leap year is divisible by 4 but not divisible by 100, unless it is also divisible by 400.": 0.4307692307692308,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.423076923076923,
            "Write a Python function to check if a given year is a leap year.": 0.4090909090909091,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.4,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.38709677419354843,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.3773584905660377
        },
        "avg_similarity_score": 0.24479633833091535
    },
    {
        "instruction": "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]",
        "output": "def remove_duplicates(lst):\n    return list(set(lst))\n\nexample_list = [1, 2, 3, 3, 4, 4, 5]\nresult = remove_duplicates(example_list)\nprint(f'List with duplicates removed: {result}')",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5957446808510638,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.5454545454545454,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.5185185185185186,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5106382978723405,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5106382978723405,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5084745762711863,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.4888888888888889,
            "Design a Python function that removes all duplicates from a given list.": 0.4736842105263157,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.4727272727272727,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4528301886792453
        },
        "avg_similarity_score": 0.2768607587376355
    },
    {
        "instruction": "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]",
        "output": "def find_maximum(lst):\n    return max(lst)\n\nexample_list = [7, 3, 9, 2, 10]\nresult = find_maximum(example_list)\nprint(f'The maximum element in the list is: {result}')",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5909090909090909,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5365853658536585,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5263157894736842,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.47619047619047616,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.47619047619047616,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4615384615384615,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4583333333333333,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4571428571428571,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4571428571428571
        },
        "avg_similarity_score": 0.31069751609822827
    },
    {
        "instruction": "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]",
        "output": "def are_all_same(lst):\n    return all(x == lst[0] for x in lst)\n\nexample_list = [3, 3, 3, 3, 3]\nresult = are_all_same(example_list)\nprint(f'All elements in the list are the same: {result}')",
        "most_similar_instructions": {
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5454545454545454,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.4897959183673469,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4864864864864865,
            "Design a Python function that removes all duplicates from a given list.": 0.4571428571428571,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4390243902439025,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.43478260869565216,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4324324324324324
        },
        "avg_similarity_score": 0.2993578121670676
    },
    {
        "instruction": "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7",
        "output": "def find_first_occurrence(lst, element):\n    return lst.index(element)\n\nexample_list = [4, 2, 7, 9, 4]\nelement = 7\nresult = find_first_occurrence(example_list, element)\nprint(f'The index of the first occurrence of {element} is: {result}')",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5531914893617021,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5098039215686274,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.49056603773584906,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.47058823529411764,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.42857142857142855,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4090909090909091,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.4067796610169491,
            "Write a Python program to count the frequency of each element in a given list.": 0.4,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.39215686274509803,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.39215686274509803
        },
        "avg_similarity_score": 0.2719882552647326
    },
    {
        "instruction": "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]",
        "output": "def find_middle_elements(lst):\n    middle_index = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return lst[middle_index-1:middle_index+1]\n    else:\n        return lst[middle_index]\n\nexample_list = [1, 2, 3, 4, 5, 6]\nresult = find_middle_elements(example_list)\nprint(f'The middle element(s) in the list is/are: {result}')",
        "most_similar_instructions": {
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5769230769230769,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5714285714285715,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5531914893617021,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5333333333333333,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5306122448979592,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5283018867924528,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5106382978723405,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5106382978723405,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4814814814814815,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.47457627118644075
        },
        "avg_similarity_score": 0.291089176053393
    },
    {
        "instruction": "What is the Python code to sort a list of strings in alphabetical order?",
        "output": "strings = ['banana', 'apple', 'cherry', 'date']\nsorted_strings = sorted(strings)\nprint(sorted_strings)",
        "most_similar_instructions": {
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5714285714285714,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.4324324324324324,
            "Write a Python function to reverse a given list of integers.": 0.4,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.39999999999999997,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.375,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.3529411764705882,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.3529411764705882,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.3243243243243243,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.31250000000000006,
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.2978723404255319
        },
        "avg_similarity_score": 0.19524792451572756
    },
    {
        "instruction": "How can you remove duplicate elements from a list in Python?",
        "output": "numbers = [1, 2, 3, 4, 3, 2, 1]\nunique_numbers = list(set(numbers))\nprint(unique_numbers)",
        "most_similar_instructions": {
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.3703703703703703,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.3448275862068966,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3333333333333333,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.3225806451612903,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.32,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.30303030303030304,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.29411764705882354,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.27586206896551724,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.26666666666666666,
            "Design a Python function that removes all duplicates from a given list.": 0.2608695652173913
        },
        "avg_similarity_score": 0.1539451781226975
    },
    {
        "instruction": "What is the Python code to concatenate two lists into one list?",
        "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nconcatenated_list = list1 + list2\nprint(concatenated_list)",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5384615384615384,
            "Generate a Python program to find the common elements from two lists.": 0.3333333333333333,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.3125,
            "Suggest a completion for the following python code.": 0.3,
            "Write Python code to solve this leetcode problem.": 0.3,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.28571428571428575,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.26666666666666666,
            "Write a Python function to reverse a given list of integers.": 0.2608695652173913,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.25,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.24242424242424246
        },
        "avg_similarity_score": 0.12898612195221132
    },
    {
        "instruction": "How can you convert a string to uppercase in Python?",
        "output": "string = \"hello world\"\nuppercase_string = string.upper()\nprint(uppercase_string)",
        "most_similar_instructions": {
            "How can you remove duplicate elements from a list in Python?": 0.5714285714285713,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.36363636363636365,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.35714285714285715,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3448275862068966,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.3333333333333333,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.3157894736842105,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.3125,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.3076923076923077,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.2857142857142857
        },
        "avg_similarity_score": 0.1574784623011032
    },
    {
        "instruction": "Write the Python program to calculate the sum of all elements in a list using a for loop.",
        "output": "numbers = [1, 2, 3, 4, 5]\nsum_of_elements = 0\nfor number in numbers:\n    sum_of_elements += number\nprint(sum_of_elements)",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5454545454545454,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5161290322580646,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4782608695652174,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4390243902439025,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.41025641025641024,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.39999999999999997,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.3888888888888889,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.3673469387755102,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.358974358974359,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.35294117647058826
        },
        "avg_similarity_score": 0.23625204991384313
    },
    {
        "instruction": "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.",
        "output": "squares_dict = {num: num**2 for num in range(1, 11)}\nprint(squares_dict)",
        "most_similar_instructions": {
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.35714285714285715,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.3225806451612903,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.3,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.29166666666666663,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.28571428571428575,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.27999999999999997,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.27777777777777773,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.27272727272727276,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.27027027027027023,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.27027027027027023
        },
        "avg_similarity_score": 0.17880864228144866
    },
    {
        "instruction": "How would you merge two Python dictionaries into one?",
        "output": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nmerged_dict = {**dict1, **dict2}\nprint(merged_dict)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.3157894736842105,
            "How can you remove duplicate elements from a list in Python?": 0.3,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.2962962962962963,
            "What is the Python code to concatenate two lists into one list?": 0.28571428571428575,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.2222222222222222,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.21428571428571427,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.1935483870967742,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.18750000000000003,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.17391304347826086,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.16216216216216214
        },
        "avg_similarity_score": 0.08620940747908969
    },
    {
        "instruction": "What is the Python code to calculate the length of a string?",
        "output": "string = \"Hello, world!\"\nlength = len(string)\nprint(length)",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5384615384615384,
            "What is the Python code to concatenate two lists into one list?": 0.5,
            "Generate a Python program to calculate the power of a number using recursion.": 0.48000000000000004,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.4666666666666666,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.4666666666666666,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.4117647058823529,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.3870967741935484,
            "Write a Python program to count the frequency of each element in a given list.": 0.3703703703703704,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.3703703703703704,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.36363636363636365
        },
        "avg_similarity_score": 0.20677097134000644
    },
    {
        "instruction": "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".",
        "output": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def start_engine(self):\n        print(\"Engine started\")\n\ncar1 = Car(\"Toyota\", \"Camry\")\ncar1.start_engine()",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5217391304347826,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.43749999999999994,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.4313725490196078,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.4230769230769231,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.4090909090909091,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.375,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.3,
            "Implement a Python class for a basic calculator that supports addition, subtraction, multiplication, and division operations.": 0.27027027027027023,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.2631578947368421,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.24390243902439024
        },
        "avg_similarity_score": 0.1730471470641798
    },
    {
        "instruction": "How can you iterate over a dictionary in Python and print both key and value?",
        "output": "my_dict = {'apple': 3, 'banana': 6, 'cherry': 9}\nfor key, value in my_dict.items():\n    print(key, value)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.48,
            "How can you remove duplicate elements from a list in Python?": 0.4615384615384615,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.31578947368421056,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.303030303030303,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.303030303030303,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.29411764705882354,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.29411764705882354,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.29268292682926833,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.2758620689655172,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.27027027027027023
        },
        "avg_similarity_score": 0.16213563828232697
    },
    {
        "instruction": "What is the Python code to get the current date and time?",
        "output": "import datetime\n\ncurrent_datetime = datetime.datetime.now()\nprint(current_datetime)",
        "most_similar_instructions": {
            "What is the Python code to calculate the length of a string?": 0.5833333333333334,
            "What is the Python code to concatenate two lists into one list?": 0.5,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.4615384615384615,
            "Suggest a completion for the following python code.": 0.3,
            "Write Python code to solve this leetcode problem.": 0.3,
            "Generate a correct python program to fulfill the following purpose:": 0.2727272727272727,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.26666666666666666,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.26666666666666666,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.25,
            "Generate a Python program to find the common elements from two lists.": 0.25
        },
        "avg_similarity_score": 0.15361974906018214
    },
    {
        "instruction": "How would you remove an item from a Python list by its index?",
        "output": "my_list = ['apple', 'banana', 'cherry', 'date']\nindex = 2\nmy_list.pop(index)\nprint(my_list)",
        "most_similar_instructions": {
            "How can you remove duplicate elements from a list in Python?": 0.4999999999999999,
            "How would you merge two Python dictionaries into one?": 0.3636363636363637,
            "How can you convert a string to uppercase in Python?": 0.34782608695652173,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.3225806451612903,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3125,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.28571428571428575,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.27586206896551724,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.2580645161290323,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.2580645161290323,
            "Write a Python function to reverse a given list of integers.": 0.24999999999999994
        },
        "avg_similarity_score": 0.15838664502466276
    },
    {
        "instruction": "Write Python code to solve this Project Euler problem.\nProblem: The sum of the squares of the first ten natural numbers is,\n1^2 + 2^2 + ... + 10^2 = 385\n\nThe square of the sum of the first ten natural numbers is,\n(1 + 2 + ... + 10)^2 = 55^2 = 3025\n\nHence, the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 \u2212 385 = 2640. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.",
        "output": "sum_of_squares = sum([x**2 for x in range(1, 101)])\nsquare_of_sum = sum(range(1, 101))**2\ndifference = square_of_sum - sum_of_squares\nprint(difference)",
        "most_similar_instructions": {
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.19444444444444442,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.19047619047619047,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.17699115044247787,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.17687074829931976,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.1724137931034483,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.17054263565891473,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.16,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.15748031496062992,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.14634146341463414,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.144
        },
        "avg_similarity_score": 0.08958003898192052
    },
    {
        "instruction": "Create a Python program that generates all possible combinations of a given string.",
        "output": "from itertools import permutations\n\ndef generate_combinations(string):\n    combinations = [''.join(p) for p in permutations(string)]\n    return combinations\n\nstring = \"abc\"\ncombinations = generate_combinations(string)\nprint(combinations)",
        "most_similar_instructions": {
            "Design a Python function that removes all duplicates from a given list.": 0.48000000000000004,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.4666666666666667,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4444444444444445,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4444444444444445,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4444444444444445,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.4444444444444445,
            "Write a Python program to count the frequency of each element in a given list.": 0.42857142857142855,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.41379310344827586,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4000000000000001,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.4000000000000001
        },
        "avg_similarity_score": 0.27821400018592096
    },
    {
        "instruction": "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.",
        "output": "def calculate_average(numbers):\n    if not numbers:\n        return None\n    else:\n        return sum(numbers) / len(numbers)\n    \nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint('The average is:', average)",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5909090909090909,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5581395348837209,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5405405405405405,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5357142857142857,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.5238095238095238,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4999999999999999,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4897959183673469,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.4888888888888889,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4878048780487805,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4782608695652174
        },
        "avg_similarity_score": 0.28614024352136264
    },
    {
        "instruction": "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]",
        "output": "def find_max(lst):\n    max_elem = lst[0]\n    for num in lst:\n        if num > max_elem:\n            max_elem = num\n    return max_elem\n\nmy_list = [1, 4, 2, 7, 5]\nmax_element = find_max(my_list)\nprint(max_element)",
        "most_similar_instructions": {
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5909090909090909,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.5490196078431373,
            "Write a Python program to count the frequency of each element in a given list.": 0.5263157894736841,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4897959183673469,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4782608695652174,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.47619047619047616,
            "Write a Python function to reverse a given list of integers.": 0.4705882352941176,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.45614035087719296,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.4545454545454545,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4545454545454545
        },
        "avg_similarity_score": 0.2807564406467689
    },
    {
        "instruction": "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.",
        "output": "my_dict = {\n    'name': 'John',\n    'age': 25,\n    'city': 'New York'\n}\nprint(my_dict)",
        "most_similar_instructions": {
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.37209302325581395,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.3636363636363636,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.358974358974359,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.33333333333333337,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.3333333333333333,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.33333333333333326,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.33333333333333326,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3255813953488372,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.3255813953488372,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.3181818181818182
        },
        "avg_similarity_score": 0.22425998490092078
    },
    {
        "instruction": "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.",
        "output": "import random\n\nrandom_number = random.randint(1, 10)\nsquared_number = random_number ** 2\nprint(squared_number)",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5714285714285714,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5128205128205129,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.5106382978723405,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.47619047619047616,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.4528301886792453,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.4444444444444445,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4444444444444445,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.4383561643835617,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.43478260869565216,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.4313725490196078
        },
        "avg_similarity_score": 0.2766477034146844
    },
    {
        "instruction": "Write a Python program to find and print all the even numbers within a given range.\n1, 10",
        "output": "start = 1\nend = 10\n\nfor num in range(start, end + 1):\n    if num % 2 == 0:\n        print(num)",
        "most_similar_instructions": {
            "Write a Python function to find all prime numbers up to the given number n.": 0.4848484848484848,
            "Write a Python program to count the frequency of each element in a given list.": 0.4848484848484848,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4444444444444445,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4390243902439025,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.43750000000000006,
            "Write a Python function to reverse a given list of integers.": 0.41379310344827586,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.41025641025641024,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.41025641025641024,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.40909090909090906,
            "Generate a Python program to find the common elements from two lists.": 0.4
        },
        "avg_similarity_score": 0.27431963242392277
    },
    {
        "instruction": "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"",
        "output": "sentence = \"The quick brown fox\"\nwords = sentence.split()\nwords.reverse()\nreversed_sentence = ' '.join(words)\nprint(reversed_sentence)",
        "most_similar_instructions": {
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.6,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.5333333333333333,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.5306122448979592,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4571428571428571,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4390243902439024,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.43478260869565216,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.4313725490196078,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.42857142857142855,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.42857142857142855,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.4150943396226415
        },
        "avg_similarity_score": 0.2747716731174922
    },
    {
        "instruction": "Write a Python program to print the Fibonacci series up to a given number of terms.\n8",
        "output": "def fibonacci_series(n):\n    fib_list = [0, 1]\n\n    if n <= 2:\n        return fib_list[:n]\n\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n\n    return fib_list\n\nn = 8\nfib_series = fibonacci_series(n)\nprint(fib_series)",
        "most_similar_instructions": {
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.5142857142857143,
            "Write a Python function to reverse a given list of integers.": 0.5,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Write a Python function to find all prime numbers up to the given number n.": 0.5,
            "Generate a Python program to calculate the power of a number using recursion.": 0.4666666666666667,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.45161290322580644,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4324324324324324,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.42105263157894735,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.39999999999999997,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.3888888888888889
        },
        "avg_similarity_score": 0.26842007303577964
    },
    {
        "instruction": "How can you generate a random integer between a given range in Python?",
        "output": "import random\n\ndef generate_random_int(start, end):\n    return random.randint(start, end)\n\nrandom_number = generate_random_int(1, 10)\nprint(random_number)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5217391304347826,
            "How can you remove duplicate elements from a list in Python?": 0.4999999999999999,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.45161290322580644,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.45161290322580644,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.42857142857142855,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.4210526315789474,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.4102564102564103,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.37499999999999994,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.3703703703703704,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.36363636363636365
        },
        "avg_similarity_score": 0.18720438452313135
    },
    {
        "instruction": "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.",
        "output": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\ndef calculate_average_grade(students):\n    total_grade = 0\n    for student in students:\n        total_grade += student.grade\n    average_grade = total_grade / len(students)\n    return average_grade\n\nstudent1 = Student('John', 18, 85)\nstudent2 = Student('Jane', 17, 92)\nstudent3 = Student('Mark', 16, 78)\nstudents = [student1, student2, student3]\naverage_grade = calculate_average_grade(students)\nprint('Average grade:', average_grade)",
        "most_similar_instructions": {
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.48275862068965514,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.44000000000000006,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4230769230769231,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.42105263157894735,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.409090909090909,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.391304347826087,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.38596491228070173,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.375,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.375,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.3636363636363636
        },
        "avg_similarity_score": 0.2550121651345265
    },
    {
        "instruction": "How can you implement a Python function to reverse a string?",
        "output": "def reverse_string(string):\n    return string[::-1]\n\nstring = 'Hello, World!'\nreversed_string = reverse_string(string)\nprint(reversed_string)",
        "most_similar_instructions": {
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.56,
            "Write a Python function to reverse a given list of integers.": 0.5454545454545454,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4848484848484849,
            "How can you convert a string to uppercase in Python?": 0.47619047619047616,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4705882352941176,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.4666666666666667,
            "How can you remove duplicate elements from a list in Python?": 0.45454545454545453,
            "How can you generate a random integer between a given range in Python?": 0.41666666666666663,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.41379310344827586,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.41379310344827586
        },
        "avg_similarity_score": 0.2529992917007351
    },
    {
        "instruction": "Create a Python module to implement a stack data structure using a list.",
        "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\n    def peek(self):\n        if self.is_empty():\n            return None\n        return self.stack[-1]\n\nstack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nprint(stack.pop())\nprint(stack.peek())\nprint(stack.is_empty())",
        "most_similar_instructions": {
            "Create a Python program to check if a number is a perfect square or not.": 0.42857142857142855,
            "Write a Python function to reverse a given list of integers.": 0.41666666666666663,
            "Generate a Python program to calculate the power of a number using recursion.": 0.38461538461538464,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.3703703703703704,
            "Write a Python function to check if a given year is a leap year.": 0.3703703703703704,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.3636363636363637,
            "Write a Python program to count the frequency of each element in a given list.": 0.3571428571428571,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.35000000000000003,
            "How can you implement a Python function to reverse a string?": 0.33333333333333337,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.33333333333333337
        },
        "avg_similarity_score": 0.234280474506548
    },
    {
        "instruction": "Write a Python program to concatenate two lists.",
        "output": "def concatenate_lists(lst1, lst2):\n    return lst1 + lst2\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nconcatenated_list = concatenate_lists(list1, list2)\nprint(concatenated_list)",
        "most_similar_instructions": {
            "Generate a Python program to find the common elements from two lists.": 0.6,
            "What is the Python code to concatenate two lists into one list?": 0.5,
            "Generate a correct python program to fulfill the following purpose:": 0.4444444444444445,
            "Write a Python program to count the frequency of each element in a given list.": 0.43478260869565216,
            "Write a Python function to reverse a given list of integers.": 0.4210526315789474,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.4,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.39999999999999997,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.3846153846153846,
            "Generate a Python program to calculate the power of a number using recursion.": 0.380952380952381,
            "Write Python code to solve this leetcode problem.": 0.375
        },
        "avg_similarity_score": 0.22256565579631288
    },
    {
        "instruction": "How can you sort a dictionary by its values in descending order?",
        "output": "def sort_dictionary_by_values(dictionary):\n    return {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1], reverse=True)}\n\ndictionary = {'a': 3, 'b': 1, 'c': 2}\nsorted_dictionary = sort_dictionary_by_values(dictionary)\nprint(sorted_dictionary)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.45454545454545453,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.4444444444444445,
            "How can you remove duplicate elements from a list in Python?": 0.43478260869565216,
            "How would you remove an item from a Python list by its index?": 0.4,
            "How can you generate a random integer between a given range in Python?": 0.4,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.37499999999999994,
            "How can you implement a Python function to reverse a string?": 0.34782608695652173,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.3225806451612903,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.30769230769230765,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.30769230769230765
        },
        "avg_similarity_score": 0.11975726016011103
    },
    {
        "instruction": "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"",
        "output": "def is_palindrome(s):\n    if s == s[::-1]:\n        return True\n    return False\n\nstring = \"radar\"\nresult = is_palindrome(string)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.4615384615384615,
            "Create a Python program to check if a number is a perfect square or not.": 0.4571428571428572,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4390243902439024,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4117647058823529,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.41025641025641024,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.3913043478260869,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.38461538461538464,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.380952380952381,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.375
        },
        "avg_similarity_score": 0.24397061779497423
    },
    {
        "instruction": "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]",
        "output": "def find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1,2,3,4,5,6]\nlist2 = [4,5,6,7,8,9]\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)",
        "most_similar_instructions": {
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5428571428571428,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.46153846153846156,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.41269841269841273,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.393939393939394,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.38095238095238093,
            "Generate a Python program to find the common elements from two lists.": 0.3673469387755103,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.35714285714285715,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3508771929824562,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.3448275862068966
        },
        "avg_similarity_score": 0.21027135622938278
    },
    {
        "instruction": "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]",
        "output": "def find_first_occurrence(x, y):\n    for i in range(len(y)):\n        if y[i] == x:\n            return i\n    return -1\n\nelement = 7\nlist_y = [3, 6, 7, 9, 7, 2, 1]\nindex = find_first_occurrence(element, list_y)\nprint(index)",
        "most_similar_instructions": {
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5666666666666667,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5098039215686274,
            "Write a Python program to count the frequency of each element in a given list.": 0.4888888888888889,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.45833333333333326,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4528301886792453,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.42553191489361697,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4210526315789474,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.41509433962264153,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.3846153846153846,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.3793103448275862
        },
        "avg_similarity_score": 0.23296555082125897
    },
    {
        "instruction": "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.",
        "output": "import random\n\nrandom_number = random.randint(1, 10)\nuser_guess = int(input(\"Guess the number (between 1 and 10): \"))\n\nif user_guess == random_number:\n    print(\"Correct!\")\nelse:\n    print(\"Wrong!\")",
        "most_similar_instructions": {
            "Create a Python program that generates a random number between 1 and 100, then prompts the user to guess the number. Provide appropriate feedback if the guess is too high or too low, and continue prompting until the correct number is guessed.": 0.5675675675675675,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5283018867924528,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.4761904761904762,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.39215686274509803,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.38095238095238093,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.375,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.3673469387755102,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.36363636363636365,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.36,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.3508771929824561
        },
        "avg_similarity_score": 0.22275322347064247
    },
    {
        "instruction": "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).",
        "output": "def is_palindrome(string):\n    cleaned_string = ''.join(char.lower() for char in string if char.isalnum())\n    return cleaned_string == cleaned_string[::-1]\n\ninput_string = \"A man, a plan, a canal, Panama!\"\nresult = is_palindrome(input_string)\nprint(\"Is palindrome:\", result)",
        "most_similar_instructions": {
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5833333333333334,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5483870967741935,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.46808510638297873,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.45833333333333337,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.43636363636363634,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.39999999999999997,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.39285714285714285,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.39215686274509803,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.3870967741935484,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.38095238095238093
        },
        "avg_similarity_score": 0.2452481373354568
    },
    {
        "instruction": "Create a Python class called \"Circle\" that has one attribute: radius. Implement methods called \"area\" that calculates and returns the area of the circle, and \"circumference\" that calculates and returns the circumference of the circle.",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius ** 2\n\n    def circumference(self):\n        return 2 * math.pi * self.radius\n\ncircle = Circle(3)\narea = circle.area()\ncircumference = circle.circumference()\nprint(\"Area:\", area)\nprint(\"Circumference:\", circumference)",
        "most_similar_instructions": {
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.5161290322580645,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.3448275862068965,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.3448275862068965,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.3333333333333333,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3333333333333333,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3214285714285714,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.3076923076923077,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.30769230769230765,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.30508474576271183
        },
        "avg_similarity_score": 0.1889514670292489
    },
    {
        "instruction": "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.",
        "output": "strings = [\"Apple\", \"banana\", \"cherry\", \"Date\", \"eggplant\"]\nsorted_strings = sorted(strings, key=lambda x: x.lower())\nprint(\"Sorted strings:\", sorted_strings)",
        "most_similar_instructions": {
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.5853658536585366,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.47826086956521735,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4736842105263158,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.47058823529411764,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.47058823529411764,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.47058823529411764,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.46511627906976744,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.46153846153846156,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.46153846153846156,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.4615384615384615
        },
        "avg_similarity_score": 0.27876157985536526
    },
    {
        "instruction": "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.",
        "output": "string = \"Hello, world!\"\n\ncharacter_frequencies = {}\nfor char in string:\n    if char in character_frequencies:\n        character_frequencies[char] += 1\n    else:\n        character_frequencies[char] = 1\n\nprint(\"Character frequencies:\", character_frequencies)",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.5789473684210527,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.34782608695652173,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3414634146341463,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.3255813953488372,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.31818181818181823,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.31578947368421056,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.31249999999999994,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3111111111111111,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.30769230769230765
        },
        "avg_similarity_score": 0.2222528171075
    },
    {
        "instruction": "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.",
        "output": "def filter_vowel_strings(strings):\n    vowel_strings = [s for s in strings if s[0].lower() in ['a', 'e', 'i', 'o', 'u']]\n    return vowel_strings\n\nstrings = [\"apple\", \"Banana\", \"egGplant\", \"Orange\", \"uMBrella\"]\nvowel_strings = filter_vowel_strings(strings)\nprint(\"Vowel strings:\", vowel_strings)",
        "most_similar_instructions": {
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5714285714285715,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5423728813559322,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5283018867924527,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5283018867924527,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5151515151515151,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5074626865671642,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4705882352941177,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4642857142857143,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4590163934426229,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.43636363636363634
        },
        "avg_similarity_score": 0.25090567922753976
    },
    {
        "instruction": "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * (self.radius ** 2)\n\n    def circumference(self):\n        return 2 * math.pi * self.radius\n\nradius = 5\ncircle = Circle(radius)\nprint(circle.area())\nprint(circle.circumference())",
        "most_similar_instructions": {
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.5490196078431373,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.3829787234042554,
            "Create a Python class called \"Circle\" that has one attribute: radius. Implement methods called \"area\" that calculates and returns the area of the circle, and \"circumference\" that calculates and returns the circumference of the circle.": 0.3728813559322034,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.3703703703703704,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.35555555555555557,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.35555555555555557,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.35555555555555557,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.35555555555555557,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.35294117647058826,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.339622641509434
        },
        "avg_similarity_score": 0.24787567496492446
    },
    {
        "instruction": "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"",
        "output": "def is_palindrome(string):\n    return string == string[::-1]\n\nmy_string = \"racecar\"\nprint(is_palindrome(my_string))",
        "most_similar_instructions": {
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.5806451612903225,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.5789473684210527,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5517241379310344,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5517241379310344,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5405405405405405,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5306122448979592,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5,
            "Write a Python function to check if a given year is a leap year.": 0.4827586206896552,
            "How can you implement a Python function to reverse a string?": 0.4615384615384615,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4571428571428572
        },
        "avg_similarity_score": 0.26453416937846
    },
    {
        "instruction": "Write a Python function that receives two integers and returns their division result as a float.\n8, 4",
        "output": "def divide_numbers(a, b):\n    result = float(a) / float(b)\n    return result",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5625000000000001,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.43478260869565216,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.41025641025641024,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.41025641025641024,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3888888888888889,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.380952380952381,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.375,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.375,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.375,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.375
        },
        "avg_similarity_score": 0.24978547255182326
    },
    {
        "instruction": "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.",
        "output": "import math\n\nradius = float(input(\"Enter the radius: \"))\narea = math.pi * radius**2\nprint(f\"The area of the circle is: {area}\")",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5142857142857143,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.47619047619047616,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4444444444444445,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.42857142857142855,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.42857142857142855,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.42105263157894735,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.39999999999999997,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.39215686274509803
        },
        "avg_similarity_score": 0.2774467534674983
    },
    {
        "instruction": "Create a Python program that prompts the user for their name and then prints a welcome message with their name.",
        "output": "name = input(\"Enter your name: \")\nprint(\"Welcome, \" + name + \"!\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.5199999999999999,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.47619047619047616,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.47058823529411764,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.4444444444444445,
            "Create a Python program that generates all possible combinations of a given string.": 0.3636363636363637,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3529411764705882,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.35,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.3414634146341463,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3414634146341463,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.3404255319148936
        },
        "avg_similarity_score": 0.23255380073209903
    },
    {
        "instruction": "How would you write a Python program to convert a list of strings to a single string with all the elements joined?",
        "output": "lst = ['apple', 'banana', 'cherry']\njoined_string = ' '.join(lst)\nprint(joined_string)",
        "most_similar_instructions": {
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.52,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.4444444444444445,
            "How can you implement a Python function to reverse a string?": 0.4242424242424242,
            "Write a Python function to reverse a given list of integers.": 0.4242424242424242,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.41509433962264153,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.39999999999999997,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.3888888888888889,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.380952380952381,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.380952380952381
        },
        "avg_similarity_score": 0.26919879236868394
    },
    {
        "instruction": "Create a Python program to find the first n Fibonacci numbers.",
        "output": "def fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[:n]",
        "most_similar_instructions": {
            "Generate a Python program to find the common elements from two lists.": 0.5217391304347826,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.4827586206896552,
            "Generate a correct python program to fulfill the following purpose:": 0.47619047619047616,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4615384615384615,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.42857142857142855,
            "Write a Python program to concatenate two lists.": 0.4210526315789474,
            "Generate a Python program to calculate the power of a number using recursion.": 0.41666666666666663,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4,
            "Write a Python program to count the frequency of each element in a given list.": 0.3846153846153846,
            "Create a Python program to check if a number is a perfect square or not.": 0.3846153846153846
        },
        "avg_similarity_score": 0.22415994589895244
    },
    {
        "instruction": "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.",
        "output": "def is_prime(num):\n    if num <= 1:\n        return False\n    \n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n\nnumber = 17\nprint(is_prime(number))",
        "most_similar_instructions": {
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5833333333333334,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.5581395348837209,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5263157894736842,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.48000000000000004,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4736842105263159,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4680851063829787,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.45454545454545453,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.44827586206896547,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.42857142857142855,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4230769230769231
        },
        "avg_similarity_score": 0.24900646509543758
    },
    {
        "instruction": "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.",
        "output": "numbers = input(\"Enter a list of numbers, separated by spaces: \")\nnumbers_list = [int(num) for num in numbers.split()]\nsorted_list = sorted(numbers_list)\nprint(sorted_list)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.5161290322580646,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.46875,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4528301886792453,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.45161290322580644,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.43636363636363634,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.43478260869565216,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.4074074074074074,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.38461538461538464,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.38095238095238093,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.3793103448275862
        },
        "avg_similarity_score": 0.24748959680126828
    },
    {
        "instruction": "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.",
        "output": "import math\n\ndef calculate_hypotenuse(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c\n\nside1 = 3\nside2 = 4\nhypotenuse = calculate_hypotenuse(side1, side2)\nprint(hypotenuse)",
        "most_similar_instructions": {
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5599999999999999,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5365853658536585,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.5098039215686274,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.509090909090909,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.47826086956521735,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.47058823529411764,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.47058823529411764,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.46808510638297873,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4615384615384615
        },
        "avg_similarity_score": 0.279354498212531
    },
    {
        "instruction": "Implement a Python function called \"binary_to_decimal\" that takes a binary number as input (in the form of a string) and converts it to its decimal equivalent.",
        "output": "def binary_to_decimal(binary):\n    decimal = 0\n    power = len(binary) - 1\n    \n    for digit in binary:\n        decimal += int(digit) * 2**power\n        power -= 1\n    \n    return decimal\n\nbinary_number = \"10101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(decimal_number)",
        "most_similar_instructions": {
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4313725490196078,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.425531914893617,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.425531914893617,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.41666666666666663,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4074074074074074,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.39999999999999997,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.3846153846153846,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3846153846153846,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.38095238095238093,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3773584905660378
        },
        "avg_similarity_score": 0.25440389647284767
    },
    {
        "instruction": "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.",
        "output": "import string\n\nsentence = input(\"Enter a sentence: \")\nno_punctuation = sentence.translate(str.maketrans(\"\", \"\", string.punctuation))\nprint(no_punctuation)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.5490196078431373,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.49056603773584906,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.4528301886792453,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.4390243902439024,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.4313725490196078,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.4186046511627907,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.4,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3902439024390244,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.38095238095238093,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.38095238095238093
        },
        "avg_similarity_score": 0.2536578561879193
    },
    {
        "instruction": "Implement a Python function called \"calculate_exponent\" that takes a base and an exponent as input and calculates the value of the base raised to the exponent.",
        "output": "def calculate_exponent(base, exponent):\n    result = base ** exponent\n    return result\n\nbase = 2\nexponent = 5\nresult = calculate_exponent(base, exponent)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.52,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.5185185185185185,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.47826086956521735,
            "Implement a Python function called \"binary_to_decimal\" that takes a binary number as input (in the form of a string) and converts it to its decimal equivalent.": 0.4727272727272727,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.47058823529411764,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4615384615384615,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.43636363636363634,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.43478260869565216,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4313725490196078,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.425531914893617
        },
        "avg_similarity_score": 0.25088946216603386
    },
    {
        "instruction": "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).",
        "output": "import string\n\nsentence = input(\"Enter a sentence: \")\nsentence = sentence.lower().replace(\" \", \"\")\nalphabet = set(string.ascii_lowercase)\nis_pangram = set(sentence) >= alphabet\nprint(is_pangram)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.53125,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5283018867924528,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.4838709677419355,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.45161290322580644,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.39999999999999997,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.38461538461538464,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.37735849056603776,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.37735849056603776,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.375,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.3703703703703703
        },
        "avg_similarity_score": 0.24081616488487914
    },
    {
        "instruction": "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]",
        "output": "def count_element_occurrences(lst):\n    count_dict = {}\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict\n\ninput_list = [1, 2, 1, 3, 2, 4, 2]\noccurrences_dict = count_element_occurrences(input_list)\nprint(occurrences_dict)",
        "most_similar_instructions": {
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.4857142857142857,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45283018867924524,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4444444444444444,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.4363636363636364,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.43076923076923074,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4210526315789474,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4210526315789474,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4193548387096774,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4067796610169491,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4067796610169491
        },
        "avg_similarity_score": 0.24880742848127815
    },
    {
        "instruction": "Write a Python function that generates a random password consisting of alphanumeric characters.",
        "output": "import random\nimport string\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\npassword_length = 8\npassword = generate_random_password(password_length)\nprint(\"Generated Password: \", password)",
        "most_similar_instructions": {
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5945945945945945,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5714285714285714,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5333333333333333,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.5161290322580646,
            "Write a Python function to reverse a given list of integers.": 0.4999999999999999,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.47058823529411764,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.4666666666666667,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.45161290322580644,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.45161290322580644,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.45
        },
        "avg_similarity_score": 0.2773682088347143
    },
    {
        "instruction": "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'",
        "output": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)\n\nstr1 = 'listen'\nstr2 = 'silent'\nprint(are_anagrams(str1, str2))",
        "most_similar_instructions": {
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.6,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.5,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.5,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.3793103448275862,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.36734693877551017,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.35999999999999993,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.35000000000000003,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.3103448275862069,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.3043478260869565
        },
        "avg_similarity_score": 0.20945153087008603
    },
    {
        "instruction": "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']",
        "output": "def calculate_average(lst):\n    count = 0\n    total = 0\n    for element in lst:\n        if isinstance(element, int) or isinstance(element, float):\n            count += 1\n            total += element\n    if count > 0:\n        return total / count\n    return 0\n\nnumbers = [1, 2, 'three', 4, 'five']\nprint(calculate_average(numbers))",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5833333333333334,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5454545454545454,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5384615384615384,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5217391304347826,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.47058823529411764,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4615384615384615,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4528301886792452,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4444444444444445,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4444444444444445
        },
        "avg_similarity_score": 0.27367857772723675
    },
    {
        "instruction": "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3",
        "output": "def find_first_occurrence(lst, target):\n    if target in lst:\n        return lst.index(target)\n    return -1\n\nnumbers = [5, 10, 3, 8, 2]\ntarget = 3\nprint(find_first_occurrence(numbers, target))",
        "most_similar_instructions": {
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5970149253731343,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.5074626865671642,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.48148148148148157,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.47619047619047616,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4482758620689656,
            "Write a Python program to count the frequency of each element in a given list.": 0.42307692307692313,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4210526315789474,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.4193548387096775,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.40625,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4
        },
        "avg_similarity_score": 0.24901244958032703
    },
    {
        "instruction": "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5",
        "output": "def calculate_exponentiation(base, power):\n    return base ** power\n\nbase = 2\npower = 5\nprint(calculate_exponentiation(base, power))",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5714285714285715,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5625000000000001,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5405405405405405,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5294117647058824,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4878048780487805,
            "Write a Python function to reverse a given list of integers.": 0.4827586206896552,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.46511627906976744,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.4615384615384615,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4615384615384615
        },
        "avg_similarity_score": 0.3055840122706732
    },
    {
        "instruction": "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.",
        "output": "class Car:\n def __init__(self, color, brand, max_speed):\n  self.color = color\n  self.brand = brand\n  self.max_speed = max_speed\n  self.speed = 0\n\n def accelerate(self, speed):\n  self.speed += speed\n\nred_car = Car(\"red\", \"Toyota\", 200)\nred_car.accelerate(50)\nprint(red_car.speed)",
        "most_similar_instructions": {
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.4912280701754386,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4444444444444444,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.3793103448275862,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.3333333333333333,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.32653061224489793,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.30769230769230765,
            "Design a Python function that reverses the order of words in a given sentence.": 0.29268292682926833,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.29268292682926833,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.2916666666666667,
            "Write a Python program to count the frequency of each element in a given list.": 0.2857142857142857
        },
        "avg_similarity_score": 0.2001549238096352
    },
    {
        "instruction": "Create a Python function to find the maximum value in a list of numbers.",
        "output": "def find_maximum(numbers):\n return max(numbers)\n\nnumber_list = [1, 5, 3, 9, 2]\nmaximum_value = find_maximum(number_list)\nprint(maximum_value)",
        "most_similar_instructions": {
            "Create a Python program to find the first n Fibonacci numbers.": 0.56,
            "Write a Python function to reverse a given list of integers.": 0.56,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5405405405405405,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4864864864864865,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.48484848484848486,
            "Write a Python program to count the frequency of each element in a given list.": 0.4827586206896552,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.4666666666666667,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4571428571428571,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45161290322580644
        },
        "avg_similarity_score": 0.2892381406337566
    },
    {
        "instruction": "Write Python code to swap two variables without using a temporary variable.",
        "output": "a = 5\nb = 10\n\na, b = b, a\n\nprint(\"a =\", a)\nprint(\"b =\", b)",
        "most_similar_instructions": {
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.42857142857142855,
            "Write Python code to solve this leetcode problem.": 0.4,
            "Write a Python program to concatenate two lists.": 0.4,
            "Write a Python function to reverse a given list of integers.": 0.34782608695652173,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.33333333333333337,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.33333333333333337,
            "What is the Python code to concatenate two lists into one list?": 0.3333333333333333,
            "What is the Python code to calculate the length of a string?": 0.3333333333333333,
            "Create a Python module to implement a stack data structure using a list.": 0.32,
            "Write a Python function to check if a given year is a leap year.": 0.30769230769230765
        },
        "avg_similarity_score": 0.17606055362631287
    },
    {
        "instruction": "Write Python code to check if a given list is empty or not.",
        "output": "def is_list_empty(lst):\n if len(lst) == 0:\n  return True\n else:\n  return False\n\nempty_list = []\nis_empty = is_list_empty(empty_list)\nprint(is_empty)",
        "most_similar_instructions": {
            "Write a Python function to check if a given year is a leap year.": 0.5925925925925927,
            "Create a Python program to check if a number is a perfect square or not.": 0.5714285714285715,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.4999999999999999,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.4827586206896552,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.45161290322580644,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4444444444444445,
            "Write a Python program to count the frequency of each element in a given list.": 0.42857142857142855,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.41379310344827586,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.41176470588235287
        },
        "avg_similarity_score": 0.2277509503814464
    },
    {
        "instruction": "Implement a Python class to represent a stack data structure and its associated methods.",
        "output": "class Stack:\n def __init__(self):\n  self.items = []\n\n def is_empty(self):\n  return len(self.items) == 0\n\n def push(self, item):\n  self.items.append(item)\n\n def pop(self):\n  if not self.is_empty():\n   return self.items.pop()\n  else:\n   return None\n\n def peek(self):\n  if not self.is_empty():\n   return self.items[-1]\n  else:\n   return None\n\nstack = Stack()\nstack.push(1)\nstack.push(2)\nstack.pop()\nprint(stack.peek())",
        "most_similar_instructions": {
            "Create a Python module to implement a stack data structure using a list.": 0.5185185185185186,
            "How can you implement a Python function to reverse a string?": 0.4,
            "Implement a Python class for a basic calculator that supports addition, subtraction, multiplication, and division operations.": 0.39999999999999997,
            "Implement a Python function called \"binary_to_decimal\" that takes a binary number as input (in the form of a string) and converts it to its decimal equivalent.": 0.3333333333333333,
            "Write a Python function to reverse a given list of integers.": 0.32,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.32,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.31250000000000006,
            "Generate a Python program to calculate the power of a number using recursion.": 0.29629629629629634,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.2857142857142857,
            "Write a Python function to check if a given year is a leap year.": 0.2857142857142857
        },
        "avg_similarity_score": 0.21027481457408503
    },
    {
        "instruction": "Write Python code to find the number of vowels in a given string.",
        "output": "def count_vowels(string):\n vowels = ['a', 'e', 'i', 'o', 'u']\n return len([char for char in string.lower() if char in vowels])\n\nword = \"Hello\"\nvowel_count = count_vowels(word)\nprint(vowel_count)",
        "most_similar_instructions": {
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5806451612903226,
            "Write a Python program to count the frequency of each element in a given list.": 0.5714285714285715,
            "What is the Python code to calculate the length of a string?": 0.5599999999999999,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.5142857142857142,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4666666666666667,
            "Write Python code to check if a given list is empty or not.": 0.46153846153846156,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.45161290322580644,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.45161290322580644,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4444444444444445,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4444444444444445
        },
        "avg_similarity_score": 0.2590522185773691
    },
    {
        "instruction": "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']",
        "output": "import random\n\nfruits = ['apple', 'banana', 'kiwi', 'orange', 'mango']\nrandom.shuffle(fruits)\nprint(fruits)",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5454545454545454,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5142857142857143,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.46511627906976744,
            "Create a Python program that generates all possible combinations of a given string.": 0.45161290322580644,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.4444444444444444,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4390243902439025,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.4390243902439025,
            "Design a Python function that reverses the order of words in a given sentence.": 0.43750000000000006,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.43478260869565216
        },
        "avg_similarity_score": 0.28495741014325193
    },
    {
        "instruction": "Write a Python function that returns the nth Fibonacci number.\n8",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib[n-1]\n\nn = 8\nprint(fibonacci(n))",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.5,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4827586206896552,
            "Write a Python function that receives two integers and returns their division result as a float.\n8, 4": 0.4827586206896552,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4799999999999999,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4799999999999999,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4799999999999999,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4615384615384615,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4571428571428572,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.43749999999999994
        },
        "avg_similarity_score": 0.27279111310517157
    },
    {
        "instruction": "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100",
        "output": "def find_prime_numbers(start, end):\n    prime_numbers = []\n    for number in range(start, end + 1):\n        if number > 1:\n            for i in range(2, int(number/2)+1):\n                if number % i == 0:\n                    break\n            else:\n                prime_numbers.append(number)\n    return prime_numbers\n\nstart = 1\nend = 100\nprint(find_prime_numbers(start, end))",
        "most_similar_instructions": {
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.5405405405405405,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.48484848484848486,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.4444444444444444,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4117647058823529,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.41025641025641024,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.40909090909090906,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.40909090909090906,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.4,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4
        },
        "avg_similarity_score": 0.26036306627368533
    },
    {
        "instruction": "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"",
        "output": "def is_numeric(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\nstring = \"12345\"\nprint(is_numeric(string))",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5517241379310344,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4864864864864865,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4827586206896552,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.4666666666666667,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4444444444444444,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.43749999999999994,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.42857142857142855,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.42424242424242425,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.4210526315789474
        },
        "avg_similarity_score": 0.27012314398554504
    },
    {
        "instruction": "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.",
        "output": "def bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    return numbers\n\nnumbers = [5, 2, 8, 1, 9]\nprint(bubble_sort(numbers))",
        "most_similar_instructions": {
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5625000000000001,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.5365853658536586,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5263157894736842,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5263157894736842,
            "Write a Python function to reverse a given list of integers.": 0.4827586206896552,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4615384615384615,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4615384615384615,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4615384615384615,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4444444444444444,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.43243243243243246
        },
        "avg_similarity_score": 0.2812301504305493
    },
    {
        "instruction": "How would you implement a Python function that converts a decimal number to binary representation?",
        "output": "def decimal_to_binary(number):\n    binary = \"\"\n    while number > 0:\n        binary = str(number % 2) + binary\n        number = number // 2\n    return binary\n\nnumber = 10\nprint(decimal_to_binary(number))",
        "most_similar_instructions": {
            "How can you implement a Python function to reverse a string?": 0.5384615384615385,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.4848484848484848,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.4827586206896552,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.42424242424242425,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.4210526315789474,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4137931034482759,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4137931034482759,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.4000000000000001,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.3846153846153846,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.3783783783783784
        },
        "avg_similarity_score": 0.24105135798526475
    },
    {
        "instruction": "Can you write a Python script to concatenate two strings and print the result?",
        "output": "string1 = \"Hello\"\nstring2 = \"World\"\nresult = string1 + string2\nprint(result)",
        "most_similar_instructions": {
            "Write a Python program to concatenate two lists.": 0.5454545454545454,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.43750000000000006,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.4324324324324324,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.42857142857142855,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.4242424242424242,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.4137931034482759,
            "How can you implement a Python function to reverse a string?": 0.4,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.3888888888888889,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.3870967741935484
        },
        "avg_similarity_score": 0.25310328664047355
    },
    {
        "instruction": "Can you provide a Python code snippet to find the square root of a given number?",
        "output": "import math\n\nnumber = 16\nsquare_root = math.sqrt(number)\nprint(square_root)",
        "most_similar_instructions": {
            "Write Python code to find the number of vowels in a given string.": 0.5517241379310345,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.5263157894736842,
            "Generate a Python program to calculate the power of a number using recursion.": 0.4827586206896552,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.47058823529411764,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4666666666666667,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.46153846153846156,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.45714285714285713,
            "Write a Python program to count the frequency of each element in a given list.": 0.45161290322580644,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.45161290322580644,
            "Write a Python function to find all prime numbers up to the given number n.": 0.45161290322580644
        },
        "avg_similarity_score": 0.2621126141612201
    },
    {
        "instruction": "How would you write a Python function to check if a given list of numbers is in strictly increasing order?",
        "output": "def is_increasing(numbers):\n    return all(numbers[i] < numbers[i+1] for i in range(len(numbers)-1))",
        "most_similar_instructions": {
            "Write a Python function to check if a given year is a leap year.": 0.588235294117647,
            "Write a Python function to reverse a given list of integers.": 0.5806451612903226,
            "Write Python code to check if a given list is empty or not.": 0.5454545454545455,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5365853658536585,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5294117647058824,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.47619047619047616,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.47619047619047616,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.47058823529411764,
            "Create a Python function to find the maximum value in a list of numbers.": 0.47058823529411764,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.46511627906976744
        },
        "avg_similarity_score": 0.2888336196456201
    },
    {
        "instruction": "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?",
        "output": "class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model",
        "most_similar_instructions": {
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.4444444444444444,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.3846153846153846,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.31578947368421056,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.303030303030303,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.3,
            "How would you remove an item from a Python list by its index?": 0.28571428571428575,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.2857142857142857,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.27027027027027023,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.26666666666666666,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.26666666666666666
        },
        "avg_similarity_score": 0.14884802598842184
    },
    {
        "instruction": "How would you implement a Python script that accesses a MySQL database and executes a SELECT query to fetch all rows from a table named \"customers\"?",
        "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    password=\"yourpassword\",\n    database=\"yourdatabase\"\n)\n\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM customers\")\nresult = mycursor.fetchall()\n\nfor row in result:\n    print(row)",
        "most_similar_instructions": {
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.4545454545454546,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.43902439024390244,
            "How can you implement a Python function to reverse a string?": 0.37837837837837834,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.3404255319148936,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.33333333333333337,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.32653061224489793,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.3181818181818182,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.3181818181818182,
            "Design a Python function that removes all duplicates from a given list.": 0.3157894736842105,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.3076923076923077
        },
        "avg_similarity_score": 0.21193242509209873
    },
    {
        "instruction": "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?",
        "output": "numbers = [5, 2, 8, 1, 9]\nnumbers.sort()\nprint(numbers)",
        "most_similar_instructions": {
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.5660377358490566,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.5641025641025642,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5641025641025642,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5365853658536585,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5365853658536585,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5142857142857143,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.5106382978723405,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.47619047619047616,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4615384615384615,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.4545454545454545
        },
        "avg_similarity_score": 0.27595001667605157
    },
    {
        "instruction": "Write a Python script that takes user input for a number and checks if it is a perfect square.",
        "output": "import math\n\nnum = int(input(\"Enter a number: \"))\n\nsqrt = math.sqrt(num)\nif sqrt == int(sqrt):\n    print(f\"{num} is a perfect square.\")\nelse:\n    print(f\"{num} is not a perfect square.\")",
        "most_similar_instructions": {
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5641025641025641,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.5500000000000002,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.5106382978723404,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.5098039215686275,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5098039215686275,
            "Create a Python program to check if a number is a perfect square or not.": 0.47058823529411764,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4242424242424242,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4242424242424242,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4242424242424242,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4186046511627907
        },
        "avg_similarity_score": 0.26679529366450466
    },
    {
        "instruction": "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]",
        "output": "def sort_list(lst):\n    sorted_list = sorted(lst)\n    return sorted_list\n\nmy_list = [9, 3, 2, 7, 1]\nsorted_list = sort_list(my_list)\nprint(sorted_list)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5263157894736842,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5161290322580646,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5161290322580646,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.48484848484848486,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4736842105263158,
            "Write Python code to check if a given list is empty or not.": 0.4666666666666667,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.45,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.45,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4324324324324324,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.4313725490196078
        },
        "avg_similarity_score": 0.22742374512743677
    },
    {
        "instruction": "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"",
        "output": "string1 = \"Hello\"\nstring2 = \"World\"\nconcatenated_string = string1 + string2\nprint(concatenated_string)",
        "most_similar_instructions": {
            "Write a Python program to concatenate two lists.": 0.4761904761904762,
            "Can you write a Python script to concatenate two strings and print the result?": 0.4444444444444445,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.42857142857142855,
            "Write Python code to swap two variables without using a temporary variable.": 0.4,
            "What is the Python code to concatenate two lists into one list?": 0.4,
            "Write Python code to find the number of vowels in a given string.": 0.38461538461538464,
            "Write Python code to solve this leetcode problem.": 0.380952380952381,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.3703703703703704,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.33333333333333337,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.33333333333333337
        },
        "avg_similarity_score": 0.16710122783021333
    },
    {
        "instruction": "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5",
        "output": "def search_element(lst, element):\n    if element in lst:\n        return True\n    else:\n        return False\n\nmy_list = [1, 3, 5, 7, 9]\nelement_to_search = 5\nis_present = search_element(my_list, element_to_search)\nprint(is_present)",
        "most_similar_instructions": {
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5217391304347826,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.5,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4545454545454545,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4545454545454545,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.4230769230769231,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.4210526315789474,
            "Write a Python program to count the frequency of each element in a given list.": 0.4210526315789474,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.41509433962264153,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.41509433962264153,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.40816326530612246
        },
        "avg_similarity_score": 0.21152992386825198
    },
    {
        "instruction": "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]",
        "output": "def calculate_average(lst):\n    total_sum = sum(lst)\n    average = total_sum / len(lst)\n    return average\n\nmy_list = [1, 2, 3, 4, 5]\naverage = calculate_average(my_list)\nprint(average)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.6,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5789473684210527,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5777777777777778,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.5714285714285715,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5714285714285715,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.5660377358490566,
            "Write Python code to find the number of vowels in a given string.": 0.5625,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.5531914893617021,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.5454545454545454,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.5405405405405405
        },
        "avg_similarity_score": 0.2618180983318769
    },
    {
        "instruction": "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2",
        "output": "num1 = 10\nnum2 = 2\n\nif num1 % num2 == 0:\n    print(\"Divisible\")\nelse:\n    print(\"Not divisible\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.45454545454545453,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.45283018867924524,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.44827586206896547,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4444444444444445,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4166666666666667,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3793103448275862,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.3793103448275862,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.37499999999999994,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.3636363636363637,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.3636363636363636
        },
        "avg_similarity_score": 0.21266524644854026
    },
    {
        "instruction": "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.",
        "output": "import random\n\nrandom_number = round(random.random(), 2)\nprint(random_number)",
        "most_similar_instructions": {
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5365853658536585,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.48888888888888893,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.47826086956521735,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.4736842105263158,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.46153846153846156,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4242424242424242,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.42307692307692313,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4117647058823529,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.3913043478260869,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3902439024390244
        },
        "avg_similarity_score": 0.255454298742322
    },
    {
        "instruction": "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"",
        "output": "from collections import Counter\n\ndef count_characters(string):\n    character_counts = Counter(string)\n    return dict(character_counts)\n\ninput_string = \"hello\"\nresult = count_characters(input_string)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.5348837209302325,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5161290322580645,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.4657534246575342,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.46153846153846156,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.456140350877193,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.4225352112676056,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.41379310344827586,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.40740740740740744,
            "Implement a Python function called \"calculate_exponent\" that takes a base and an exponent as input and calculates the value of the base raised to the exponent.": 0.40625
        },
        "avg_similarity_score": 0.2519521657071718
    },
    {
        "instruction": "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]",
        "output": "numbers_list = [1, 2, 3, 4, 5]\n\nfor number in numbers_list:\n    print(number * 2)",
        "most_similar_instructions": {
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5517241379310344,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5098039215686274,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.48888888888888893,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4782608695652174,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4782608695652174,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.47058823529411764,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4528301886792452,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4489795918367347,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.4444444444444445
        },
        "avg_similarity_score": 0.2736812991281357
    },
    {
        "instruction": "Implement a Python function that reverses a string without using any built-in functions or slicing.\nInput: \"hello world\"",
        "output": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\ninput_string = \"hello world\"\nreversed_string = reverse_string(input_string)\nprint(reversed_string)",
        "most_similar_instructions": {
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5454545454545454,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5454545454545454,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.45714285714285713,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.42857142857142855,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.4117647058823529,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.39999999999999997,
            "How can you implement a Python function to reverse a string?": 0.39999999999999997,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.3684210526315789,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.36363636363636365,
            "Design a Python function that reverses the order of words in a given sentence.": 0.36363636363636365
        },
        "avg_similarity_score": 0.21731318211938308
    },
    {
        "instruction": "Design a Python class that represents a simple bank account with deposit and withdrawal methods.",
        "output": "class BankAccount:\n    def __init__(self, owner, initial_balance=0):\n        self.owner = owner\n        self.balance = initial_balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n    \n    def get_balance(self):\n        return self.balance\n\naccount = BankAccount(\"John Doe\", 1000)\naccount.deposit(500)\naccount.withdraw(200)\nprint(account.get_balance())",
        "most_similar_instructions": {
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.4137931034482759,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.3846153846153846,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.38095238095238093,
            "Design a Python function that removes all duplicates from a given list.": 0.3703703703703704,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.35897435897435903,
            "Design a Python function that reverses the order of words in a given sentence.": 0.3448275862068965,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.3243243243243243,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3243243243243243,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.3243243243243243,
            "Implement a Python class for a basic calculator that supports addition, subtraction, multiplication, and division operations.": 0.3225806451612903
        },
        "avg_similarity_score": 0.21825767239014718
    },
    {
        "instruction": "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]",
        "output": "def sort_list(numbers):\n    return sorted(numbers)\n\ninput_numbers = [5, 1, 8, 2]\nsorted_numbers = sort_list(input_numbers)\nprint(sorted_numbers)",
        "most_similar_instructions": {
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5945945945945946,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5789473684210527,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5714285714285715,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5161290322580646,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4736842105263158,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.47058823529411764,
            "Create a Python program that generates all possible combinations of a given string.": 0.4666666666666667,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.45454545454545453,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.45,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.4324324324324324
        },
        "avg_similarity_score": 0.27658599583737337
    },
    {
        "instruction": "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]",
        "output": "def calculate_sum_average(numbers):\n    total_sum = sum(numbers)\n    average = total_sum / len(numbers)\n    return total_sum, average\n\ninput_numbers = [4, 7, 2, 9, 5]\nsum_result, average_result = calculate_sum_average(input_numbers)\nprint(\"Sum:\", sum_result)\nprint(\"Average:\", average_result)",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5853658536585366,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5777777777777778,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.5106382978723404,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.5,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4897959183673469,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.4878048780487805,
            "Write a Python program to count the frequency of each element in a given list.": 0.4864864864864865,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.47619047619047616,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.47368421052631576
        },
        "avg_similarity_score": 0.29963295939893597
    },
    {
        "instruction": "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.",
        "output": "class Car:\n    def __init__(self, color, brand, fuel_efficiency):\n        self.color = color\n        self.brand = brand\n        self.fuel_efficiency = fuel_efficiency\n\ncar = Car(\"Red\", \"Toyota\", 30)\nprint(car.color)\nprint(car.brand)\nprint(car.fuel_efficiency)",
        "most_similar_instructions": {
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.5806451612903225,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4651162790697674,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.38709677419354843,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.37209302325581395,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.3703703703703703,
            "Design a Python function that removes all duplicates from a given list.": 0.35714285714285715,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.35000000000000003,
            "Design a Python function that reverses the order of words in a given sentence.": 0.3333333333333333,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.3333333333333333,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.3243243243243243
        },
        "avg_similarity_score": 0.2157723879178326
    },
    {
        "instruction": "Create a Python program that calculates the area of a circle given its radius.\nInput: 5",
        "output": "import math\n\ndef calculate_circle_area(radius):\n    return math.pi * radius ** 2\n\ninput_radius = 5\ncircle_area = calculate_circle_area(input_radius)\nprint(circle_area)",
        "most_similar_instructions": {
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5625,
            "Create a Python program that generates all possible combinations of a given string.": 0.5517241379310345,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5454545454545455,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.5405405405405405,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5333333333333333,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5294117647058824,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5263157894736842,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.48484848484848486,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.47058823529411764,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4666666666666667
        },
        "avg_similarity_score": 0.28400767112672093
    },
    {
        "instruction": "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960",
        "output": "class Book:\n    def __init__(self, title, author, publication_year):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n\nbook = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\nprint(book.title)\nprint(book.author)\nprint(book.publication_year)",
        "most_similar_instructions": {
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.5116279069767441,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.42857142857142855,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.37037037037037035,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.3333333333333333,
            "Write a Python function to check if a given year is a leap year.": 0.29268292682926833,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.2857142857142857,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.27450980392156865,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.26666666666666666,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.26666666666666666,
            "How would you implement a Python script that accesses a MySQL database and executes a SELECT query to fetch all rows from a table named \"customers\"?": 0.2641509433962264
        },
        "avg_similarity_score": 0.18978912344685653
    },
    {
        "instruction": "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"",
        "output": "def count_word_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\ninput_sentence = \"I love Python programming programming. Python is the best!\"\nword_frequency = count_word_frequency(input_sentence)\nprint(word_frequency)",
        "most_similar_instructions": {
            "Design a Python function that reverses the order of words in a given sentence.": 0.5263157894736842,
            "Write a Python program to count the frequency of each element in a given list.": 0.5128205128205129,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.4782608695652174,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4615384615384615,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.45,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4390243902439025,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.43478260869565216,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.42857142857142855,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4210526315789474,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.4081632653061225
        },
        "avg_similarity_score": 0.2687253658294719
    },
    {
        "instruction": "Provide a code snippet to reverse a string in Python.",
        "output": "def reverse_string(string):\n    return string[::-1]",
        "most_similar_instructions": {
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.5384615384615384,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.48,
            "How can you implement a Python function to reverse a string?": 0.47619047619047616,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4615384615384615,
            "How can you convert a string to uppercase in Python?": 0.4000000000000001,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.4,
            "Write a Python function to reverse a given list of integers.": 0.380952380952381,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.37499999999999994,
            "What is the Python code to calculate the length of a string?": 0.3636363636363636,
            "Write Python code to find the number of vowels in a given string.": 0.34782608695652173
        },
        "avg_similarity_score": 0.18579707926357641
    },
    {
        "instruction": "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'",
        "output": "def find_index(element, lst):\n    return lst.index(element)",
        "most_similar_instructions": {
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5614035087719299,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.4912280701754386,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.4888888888888889,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.46875,
            "What is the Python code to calculate the length of a string?": 0.46153846153846156,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45454545454545453,
            "Write Python code to find the number of vowels in a given string.": 0.4,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.4,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.39999999999999997,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.39999999999999997
        },
        "avg_similarity_score": 0.19378117994899335
    },
    {
        "instruction": "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"",
        "output": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2)",
        "most_similar_instructions": {
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.5263157894736842,
            "Provide a code snippet to reverse a string in Python.": 0.5000000000000001,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4864864864864865,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.47619047619047616,
            "Write Python code to check if a given list is empty or not.": 0.39999999999999997,
            "Write a Python function to check if a given year is a leap year.": 0.3888888888888889,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.380952380952381,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.36363636363636365,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.3255813953488372,
            "Create a Python program to check if a number is a perfect square or not.": 0.3243243243243243
        },
        "avg_similarity_score": 0.17818683749003078
    },
    {
        "instruction": "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]",
        "output": "def concatenate_lists(lst1, lst2):\n    return lst1 + lst2",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5789473684210527,
            "Write a Python program to concatenate two lists.": 0.48,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.4666666666666667,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4444444444444445,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.4444444444444444,
            "What is the Python code to concatenate two lists into one list?": 0.41379310344827586,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.3888888888888889,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.37500000000000006,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.372093023255814,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.37037037037037035
        },
        "avg_similarity_score": 0.1769725509195019
    },
    {
        "instruction": "Create a Python program that reads two integers from the user and swaps their values without using a temporary variable.",
        "output": "a = int(input(\"Enter the first integer: \"))\nb = int(input(\"Enter the second integer: \"))\n\na = a + b\nb = a - b\na = a - b\n\nprint(\"After swapping, the first integer is:\", a)\nprint(\"After swapping, the second integer is:\", b)",
        "most_similar_instructions": {
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.45,
            "Write Python code to swap two variables without using a temporary variable.": 0.4375,
            "Write a Python function that receives two integers and returns their division result as a float.\n8, 4": 0.4210526315789474,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.39999999999999997,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.38888888888888884,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.380952380952381,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.37837837837837834,
            "Create a Python program that generates all possible combinations of a given string.": 0.3636363636363637,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.3529411764705882,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.3529411764705882
        },
        "avg_similarity_score": 0.23155396815921891
    },
    {
        "instruction": "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28",
        "output": "celsius = float(input(\"Enter the temperature in Celsius: \"))\nfahrenheit = (celsius * 9/5) + 32\nprint(\"The temperature in Fahrenheit is:\", fahrenheit)",
        "most_similar_instructions": {
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.5517241379310344,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5161290322580646,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.4666666666666667,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4137931034482759,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4137931034482759,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.4117647058823529,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.4000000000000001,
            "Create a Python program to check if a number is a perfect square or not.": 0.4000000000000001
        },
        "avg_similarity_score": 0.2590174483725149
    },
    {
        "instruction": "Write a Python function that generates a Fibonacci sequence up to a given number N.",
        "output": "def generate_fibonacci_sequence(N):\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] <= N:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence",
        "most_similar_instructions": {
            "Write a Python function to find all prime numbers up to the given number n.": 0.6,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.5625,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5517241379310344,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5454545454545454,
            "Write a Python function to reverse a given list of integers.": 0.5384615384615385,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.5384615384615385,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.5,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.4848484848484848,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.4848484848484848,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.4827586206896552
        },
        "avg_similarity_score": 0.29872377990353804
    },
    {
        "instruction": "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.",
        "output": "import random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)",
        "most_similar_instructions": {
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5365853658536586,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.5,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.4324324324324324,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.4166666666666667,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.3636363636363636,
            "Write Python code to swap two variables without using a temporary variable.": 0.35714285714285715,
            "Write Python code to check if a given list is empty or not.": 0.3448275862068966,
            "Write Python code to find the number of vowels in a given string.": 0.3448275862068966,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.3448275862068966,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.34285714285714286
        },
        "avg_similarity_score": 0.20915436578464297
    },
    {
        "instruction": "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17",
        "output": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ninput_number = 17\nif is_prime(input_number):\n    print(\"Prime\")\nelse:\n    print(\"Not prime\")",
        "most_similar_instructions": {
            "Write Python code to check if a given list is empty or not.": 0.5789473684210525,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.4912280701754386,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4615384615384615,
            "Create a Python program to check if a number is a perfect square or not.": 0.45,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.4363636363636364,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.4230769230769231,
            "Write a Python function to check if a given year is a leap year.": 0.41025641025641024,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.39024390243902435,
            "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2": 0.3728813559322034,
            "Create a Python function to check if a given year is a leap year or not. A leap year is divisible by 4 but not divisible by 100, unless it is also divisible by 400.": 0.3666666666666667
        },
        "avg_similarity_score": 0.1793068889612902
    },
    {
        "instruction": "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"",
        "output": "def reverse_string(string):\n    return string[::-1]\n\ninput_string = \"Python\"\nreversed_string = reverse_string(input_string)\nprint(reversed_string)",
        "most_similar_instructions": {
            "Write Python code to find the number of vowels in a given string.": 0.5599999999999999,
            "Provide a code snippet to reverse a string in Python.": 0.5454545454545454,
            "Write a Python function to reverse a given list of integers.": 0.5217391304347826,
            "Write Python code to check if a given list is empty or not.": 0.48000000000000004,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4444444444444445,
            "How can you implement a Python function to reverse a string?": 0.43478260869565216,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.42857142857142855,
            "Write Python code to swap two variables without using a temporary variable.": 0.4166666666666667,
            "What is the Python code to calculate the length of a string?": 0.4166666666666667,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.41379310344827586
        },
        "avg_similarity_score": 0.22830274081840413
    },
    {
        "instruction": "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2",
        "output": "def count_long_strings(strings):\n    count = 0\n    for string in strings:\n        if len(string) > 5:\n            count += 1\n    return count\n\ninput_strings = [\"apple\", \"banana\", \"pear\", \"kiwi\"]\ncount = count_long_strings(input_strings)\nprint(count)",
        "most_similar_instructions": {
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5625,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5416666666666666,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5396825396825397,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.5384615384615385,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5283018867924527,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5283018867924527,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.509090909090909,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.48,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.47058823529411764,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4642857142857143
        },
        "avg_similarity_score": 0.26414352224976567
    },
    {
        "instruction": "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"",
        "output": "def are_anagrams(string1, string2):\n    return sorted(string1) == sorted(string2)\n\ninput_string1 = \"listen\"\ninput_string2 = \"silent\"\nif are_anagrams(input_string1, input_string2):\n    print(\"Anagrams\")\nelse:\n    print(\"Not anagrams\")",
        "most_similar_instructions": {
            "Write Python code to check if a given list is empty or not.": 0.5714285714285715,
            "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17": 0.45,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.43902439024390244,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.42857142857142855,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.4137931034482759,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.4102564102564102,
            "Create a Python program to check if a number is a perfect square or not.": 0.4000000000000001,
            "Write Python code to swap two variables without using a temporary variable.": 0.3703703703703704,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.3703703703703704,
            "Write Python code to solve this leetcode problem.": 0.3478260869565218
        },
        "avg_similarity_score": 0.15702156550285767
    },
    {
        "instruction": "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]",
        "output": "numbers = [5, 3, 7, 1, 2]\nmax_number = max(numbers)\nprint(max_number)",
        "most_similar_instructions": {
            "Write Python code to find the number of vowels in a given string.": 0.5454545454545455,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.5405405405405405,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5294117647058824,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5263157894736842,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5238095238095238,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5128205128205129,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5116279069767442,
            "Write a Python function to reverse a given list of integers.": 0.45161290322580644,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.45,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.4444444444444445
        },
        "avg_similarity_score": 0.2508219970657505
    },
    {
        "instruction": "Write a Python function to calculate the square root of a given number using the Newton's method.",
        "output": "def square_root(n):\n    x = n\n    y = (x + n/x) / 2\n    while abs(y - x) >= 0.00001:\n        x = y\n        y = (x + n/x) / 2\n    return y\n\nn = 10\nprint(square_root(n))",
        "most_similar_instructions": {
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5945945945945946,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5882352941176471,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5806451612903226,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5641025641025642,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4848484848484848,
            "Write a Python program to count the frequency of each element in a given list.": 0.4848484848484848,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4848484848484848,
            "Write a Python function to reverse a given list of integers.": 0.4827586206896552,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.45714285714285713
        },
        "avg_similarity_score": 0.28610998556506195
    },
    {
        "instruction": "Write a program that accepts a list of numbers and checks if there are any duplicates in the list in Python.\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]",
        "output": "def check_duplicates(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\nlst = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\nprint(check_duplicates(lst))",
        "most_similar_instructions": {
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5517241379310345,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.48000000000000004,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.47457627118644063,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.47058823529411764,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4666666666666667,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4615384615384615,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.45614035087719296,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.44000000000000006,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4375,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.42857142857142855
        },
        "avg_similarity_score": 0.23054687378348995
    },
    {
        "instruction": "Write a program that accepts two strings as input and concatenates them using the '+' operator in Python.\n'Hello', 'World'",
        "output": "string1 = 'Hello'\nstring2 = 'World'\nconcatenated = string1 + ' ' + string2\nprint(concatenated)",
        "most_similar_instructions": {
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5128205128205129,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.47368421052631576,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.45,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4242424242424242,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.3829787234042553,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.37837837837837834,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.372093023255814,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.3684210526315789,
            "Can you write a Python script to concatenate two strings and print the result?": 0.36363636363636365,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3636363636363636
        },
        "avg_similarity_score": 0.21571924164883918
    },
    {
        "instruction": "Write a program to find the largest prime factor of a given number in Python.\n24",
        "output": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nn = 24\nprint(largest_prime_factor(n))",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5161290322580646,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.48484848484848486,
            "Write Python code to find the number of vowels in a given string.": 0.4827586206896552,
            "Generate a Python program to calculate the power of a number using recursion.": 0.4827586206896552,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.47058823529411764,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.47058823529411764,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4666666666666667,
            "Write a Python function to find all prime numbers up to the given number n.": 0.45161290322580644,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.42424242424242425
        },
        "avg_similarity_score": 0.2468232324914638
    },
    {
        "instruction": "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]",
        "output": "def get_maximum_element(input_list):\n    return max(input_list)\n\ninput_list = [4, 7, 2, 9, 5, 1]\nmaximum_element = get_maximum_element(input_list)\nprint(maximum_element)",
        "most_similar_instructions": {
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5862068965517241,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5652173913043478,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5416666666666667,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5333333333333332,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5217391304347826,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.52,
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.5135135135135135,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.509090909090909,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.49056603773584906
        },
        "avg_similarity_score": 0.2805111119065715
    },
    {
        "instruction": "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50",
        "output": "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start, end)\n\nstart = 10\nend = 50\nrandom_number = generate_random_number(start, end)\nprint(random_number)",
        "most_similar_instructions": {
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5128205128205129,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.5106382978723405,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.4782608695652174,
            "Create a Python program that generates all possible combinations of a given string.": 0.47058823529411764,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.4680851063829788,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.4528301886792453,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.4444444444444444,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.4390243902439024,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.4324324324324324,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.42857142857142855
        },
        "avg_similarity_score": 0.24263977460469288
    },
    {
        "instruction": "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculate_area(self):\n        return math.pi * self.radius**2\n\ncircle = Circle(5)\narea = circle.calculate_area()\nprint(area)",
        "most_similar_instructions": {
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.5490196078431373,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5106382978723404,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5098039215686274,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4897959183673469,
            "Create a Python class called \"Circle\" that has one attribute: radius. Implement methods called \"area\" that calculates and returns the area of the circle, and \"circumference\" that calculates and returns the circumference of the circle.": 0.4745762711864407,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4583333333333333,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.4444444444444445,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.4313725490196078,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.425531914893617,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4166666666666667
        },
        "avg_similarity_score": 0.2591729691658098
    },
    {
        "instruction": "Implement a Python function that finds and returns all prime numbers up to a given limit.\n50",
        "output": "def find_prime_numbers(limit):\n    primes = []\n    for num in range(2, limit+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\nlimit = 50\nprime_numbers = find_prime_numbers(limit)\nprint(prime_numbers)",
        "most_similar_instructions": {
            "Write a Python function to find all prime numbers up to the given number n.": 0.5625,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.5,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5,
            "Design a Python function that removes all duplicates from a given list.": 0.4827586206896552,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4736842105263158,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.45,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.43749999999999994,
            "Write a Python function to reverse a given list of integers.": 0.42857142857142855,
            "How can you implement a Python function to reverse a string?": 0.42857142857142855,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.42105263157894735
        },
        "avg_similarity_score": 0.2643370565562345
    },
    {
        "instruction": "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.",
        "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_node(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def delete_node(self, data):\n        current = self.head\n        previous = None\n        while current:\n            if current.data == data:\n                if previous:\n                    previous.next = current.next\n                else:\n                    self.head = current.next\n                return\n            previous = current\n            current = current.next\n\n    def display_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next",
        "most_similar_instructions": {
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.52,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.3793103448275862,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.3773584905660377,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.36734693877551017,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3636363636363637,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.35999999999999993,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.35294117647058826,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.3508771929824561,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.34782608695652173,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.34615384615384615
        },
        "avg_similarity_score": 0.22924622794620497
    },
    {
        "instruction": "How would you generate a random number between 1 and 100 using Python?",
        "output": "import random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)",
        "most_similar_instructions": {
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.5517241379310345,
            "How can you generate a random integer between a given range in Python?": 0.5384615384615384,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.47368421052631576,
            "How would you remove an item from a Python list by its index?": 0.38461538461538464,
            "How would you merge two Python dictionaries into one?": 0.3636363636363637,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.3636363636363637,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.3571428571428571,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.3571428571428571,
            "How can you convert a string to uppercase in Python?": 0.34782608695652173,
            "How can you remove duplicate elements from a list in Python?": 0.33333333333333337
        },
        "avg_similarity_score": 0.1547446020114982
    },
    {
        "instruction": "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming",
        "output": "def convert_to_title_case(string):\n    words = string.split(' ')\n    title_case_words = [word.capitalize() for word in words]\n    return ' '.join(title_case_words)\n\ninput_string = 'welcome to python programming'\ntitle_string = convert_to_title_case(input_string)\nprint(title_string)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.47058823529411764,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4324324324324324,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.4324324324324324,
            "Write a Python function to reverse a given list of integers.": 0.411764705882353,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.3902439024390244,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.3888888888888889,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.380952380952381,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.3783783783783784,
            "Write a Python program to count the frequency of each element in a given list.": 0.3684210526315789
        },
        "avg_similarity_score": 0.2605316619902597
    },
    {
        "instruction": "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.",
        "output": "def count_word_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\nsentence = \"The quick brown fox jumps over the lazy dog.\"\nword_frequency = count_word_frequency(sentence)\nprint(word_frequency)",
        "most_similar_instructions": {
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.5957446808510638,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.5416666666666666,
            "Write a Python program to count the frequency of each element in a given list.": 0.5128205128205129,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4736842105263159,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.45,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4444444444444445,
            "Create a Python program that generates all possible combinations of a given string.": 0.43243243243243246,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4313725490196078,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.4186046511627907,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.3913043478260869
        },
        "avg_similarity_score": 0.2477466157948999
    },
    {
        "instruction": "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20",
        "output": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nn = 20\nprime_numbers = []\ncurrent_number = 2\nwhile current_number <= n:\n    if is_prime(current_number):\n        prime_numbers.append(current_number)\n    current_number += 1\nprint(prime_numbers)",
        "most_similar_instructions": {
            "Write a Python function to find all prime numbers up to the given number n.": 0.5641025641025641,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.4761904761904762,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.45,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.45,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.42857142857142855,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.425531914893617,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4230769230769231,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.4186046511627907,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.4186046511627907,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4102564102564102
        },
        "avg_similarity_score": 0.2459655631733917
    },
    {
        "instruction": "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"",
        "output": "def concatenate_strings(s1, s2):\n    return s1 + s2\n\nstring1 = \"Hello\"\nstring2 = \"World\"\nresult = concatenate_strings(string1, string2)\nprint(result)",
        "most_similar_instructions": {
            "Can you write a Python script to concatenate two strings and print the result?": 0.5333333333333333,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5333333333333333,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5294117647058824,
            "Write a Python function that receives two integers and returns their division result as a float.\n8, 4": 0.5294117647058824,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.5185185185185185,
            "Write a program that accepts two strings as input and concatenates them using the '+' operator in Python.\n'Hello', 'World'": 0.5142857142857142,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4666666666666667,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.45,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4324324324324324,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4324324324324324
        },
        "avg_similarity_score": 0.2564160632594859
    },
    {
        "instruction": "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]",
        "output": "numbers = [1, 2, 1, 3, 4, 2]\nunique_numbers = list(set(numbers))\nprint(unique_numbers)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5714285714285714,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.56,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5531914893617021,
            "Design a Python function that removes all duplicates from a given list.": 0.5454545454545454,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5238095238095238,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.52,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4545454545454545,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.45,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4489795918367347
        },
        "avg_similarity_score": 0.2609276857537266
    },
    {
        "instruction": "Can you suggest a Python code snippet to concatenate two strings?\nstring1 = \"Hello\"\nstring2 = \"World\"",
        "output": "string1 = \"Hello\"\nstring2 = \"World\"\nconcatenated_string = string1 + \" \" + string2\nprint(concatenated_string)",
        "most_similar_instructions": {
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.5714285714285715,
            "Can you write a Python script to concatenate two strings and print the result?": 0.5517241379310344,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5333333333333333,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5161290322580646,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.5,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.45161290322580644,
            "Write a Python program to concatenate two lists.": 0.43478260869565216,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4137931034482759,
            "How can you implement a Python function to reverse a string?": 0.3846153846153846,
            "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"": 0.3783783783783784
        },
        "avg_similarity_score": 0.17810490290018502
    },
    {
        "instruction": "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.",
        "output": "class Book:\n    def __init__(self, title, author, price):\n        self.title = title\n        self.author = author\n        self.price = price\n\n    def display_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Price: ${self.price}\")\n\nbook = Book(\"Python Programming\", \"John Smith\", 29.99)\nbook.display_info()",
        "most_similar_instructions": {
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.5084745762711865,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.4642857142857143,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.44,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4074074074074074,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.36666666666666664,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.3636363636363637,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.35714285714285715,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.35714285714285715,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.35714285714285715,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.339622641509434
        },
        "avg_similarity_score": 0.18237429845816872
    },
    {
        "instruction": "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).",
        "output": "even_sum = sum(range(2, 101, 2))\nprint(even_sum)",
        "most_similar_instructions": {
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.5294117647058824,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4615384615384615,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.4444444444444444,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.4444444444444444,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4390243902439025,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.43478260869565216,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.43243243243243246,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.43243243243243246,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.42857142857142855,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.4210526315789474
        },
        "avg_similarity_score": 0.24974072419921242
    },
    {
        "instruction": "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.",
        "output": "squares_list = [x**2 for x in range(1, 11)]\nprint(squares_list)",
        "most_similar_instructions": {
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.4444444444444444,
            "Create a Python function to find the maximum value in a list of numbers.": 0.43750000000000006,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.43750000000000006,
            "Provide a code snippet to reverse a string in Python.": 0.42857142857142855,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.42424242424242425,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.4210526315789474,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.4210526315789474,
            "Write a Python function to reverse a given list of integers.": 0.41379310344827586,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.411764705882353,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.41025641025641024
        },
        "avg_similarity_score": 0.23312245835725695
    },
    {
        "instruction": "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"",
        "output": "string = \"Hello, World!\"\nstring_length = sum(1 for _ in string)\nprint(string_length)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5641025641025641,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5499999999999999,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.5217391304347826,
            "Can you suggest a Python code snippet to concatenate two strings?\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5128205128205129,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4897959183673469,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4736842105263159,
            "Implement a Python function that reverses a string without using any built-in functions or slicing.\nInput: \"hello world\"": 0.46511627906976744,
            "What is the Python code to calculate the length of a string?": 0.4444444444444444,
            "Write Python code to find the number of vowels in a given string.": 0.43243243243243246,
            "Provide a code snippet to reverse a string in Python.": 0.4117647058823529
        },
        "avg_similarity_score": 0.23240947050443064
    },
    {
        "instruction": "Please suggest a Python code snippet to count the number of occurrences of a specific element in a list.\nlist_of_elements = [1, 2, 3, 2, 4, 2, 5, 2]\nspecific_element = 2",
        "output": "list_of_elements = [1, 2, 3, 2, 4, 2, 5, 2]\nspecific_element = 2\noccurrences_count = list_of_elements.count(specific_element)\nprint(occurrences_count)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5555555555555556,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.5483870967741935,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5384615384615385,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.5373134328358209,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.5,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.48000000000000004,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4642857142857143,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.463768115942029,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.46153846153846156,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.4444444444444445
        },
        "avg_similarity_score": 0.2201086834092025
    },
    {
        "instruction": "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.",
        "output": "num1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\nnum3 = float(input(\"Enter the third number: \"))\n\nmaximum = max(num1, num2, num3)\nprint(\"The maximum number is:\", maximum)",
        "most_similar_instructions": {
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.5714285714285713,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5365853658536585,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.5116279069767442,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.5000000000000001,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.5,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.48,
            "Create a Python function to find the maximum value in a list of numbers.": 0.47058823529411764,
            "Create a Python program to find the first n Fibonacci numbers.": 0.45161290322580644,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4324324324324324,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.43137254901960786
        },
        "avg_similarity_score": 0.2625883455988901
    },
    {
        "instruction": "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).",
        "output": "def find_intersection(list1, list2):\n    intersection = []\n    for number in list1:\n        if number in list2:\n            intersection.append(number)\n    return intersection",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5306122448979592,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5098039215686274,
            "Write a Python function that receives two integers and returns their division result as a float.\n8, 4": 0.4782608695652174,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.4590163934426229,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.43636363636363634,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.4307692307692308,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.42857142857142855,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4262295081967213,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.41666666666666663,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.40909090909090917
        },
        "avg_similarity_score": 0.26090647229385083
    },
    {
        "instruction": "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.",
        "output": "n = int(input(\"Enter a number: \"))\n\nfibonacci_sequence = [0, 1]\n\nwhile fibonacci_sequence[-1] + fibonacci_sequence[-2] <= n:\n    next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n    fibonacci_sequence.append(next_number)\n\nprint(\"Fibonacci sequence:\", fibonacci_sequence)",
        "most_similar_instructions": {
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5106382978723405,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.47058823529411764,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.45161290322580644,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.4489795918367347,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.4444444444444444,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.4375,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.4375,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.43636363636363634,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.43478260869565216,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.38461538461538464
        },
        "avg_similarity_score": 0.24839106354292811
    },
    {
        "instruction": "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.",
        "output": "number = int(input(\"Enter a number: \"))\n\nif number % 2 == 0:\n    print(\"The number is even.\")\nelse:\n    print(\"The number is odd.\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5483870967741935,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5199999999999999,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5098039215686274,
            "Create a Python program that generates a random number between 1 and 100, then prompts the user to guess the number. Provide appropriate feedback if the guess is too high or too low, and continue prompting until the correct number is guessed.": 0.4722222222222222,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.4666666666666667,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.45161290322580644,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.43999999999999995,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.423076923076923,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.41935483870967744,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.4081632653061224
        },
        "avg_similarity_score": 0.23555284908949162
    },
    {
        "instruction": "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.",
        "output": "age = int(input(\"Enter your age: \"))\n\nif age >= 18:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote yet.\")",
        "most_similar_instructions": {
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5483870967741935,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.4615384615384615,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.4615384615384615,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.41935483870967744,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.4150943396226415,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.4074074074074074,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.375,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.34782608695652173,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.34615384615384615,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.34375
        },
        "avg_similarity_score": 0.18144189041902367
    },
    {
        "instruction": "Create a Python program that finds all prime numbers between 1 and a given positive integer.",
        "output": "def find_primes(n):\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\npositive_integer = 20\nprime_numbers = find_primes(positive_integer)\nprint(prime_numbers)",
        "most_similar_instructions": {
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.5714285714285714,
            "Create a Python program that generates all possible combinations of a given string.": 0.5517241379310345,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.5499999999999999,
            "Implement a Python function that finds and returns all prime numbers up to a given limit.\n50": 0.5454545454545455,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.45161290322580644,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.4375,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.4324324324324324,
            "Design a Python function that removes all duplicates from a given list.": 0.42857142857142855,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.42424242424242425,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.411764705882353
        },
        "avg_similarity_score": 0.25664558975034274
    },
    {
        "instruction": "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.",
        "output": "class BankAccount:\n    def __init__(self, holder_name, balance):\n        self.holder_name = holder_name\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient balance.\")\n    \n    def get_balance(self):\n        return self.balance\n\naccount = BankAccount(\"John Doe\", 1000)\naccount.deposit(500)\naccount.withdraw(200)\nbalance = account.get_balance()\nprint(balance)",
        "most_similar_instructions": {
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.5454545454545454,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4285714285714286,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.4230769230769231,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4150943396226415,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.4,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.3636363636363637,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.35714285714285715,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.35294117647058826,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.35,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.32142857142857145
        },
        "avg_similarity_score": 0.1969834260018312
    },
    {
        "instruction": "Create a Python program that finds the maximum and minimum numbers in a given list.",
        "output": "def find_max_min(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    return maximum, minimum\n\nnumber_list = [4, 2, 7, 1, 9]\nmax_num, min_num = find_max_min(number_list)\nprint(max_num)\nprint(min_num)",
        "most_similar_instructions": {
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.5806451612903225,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5714285714285715,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5714285714285714,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5555555555555556,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5517241379310344,
            "Write a Python program to count the frequency of each element in a given list.": 0.5333333333333333,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5263157894736841,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5161290322580646,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "Implement a Python function that finds and returns all prime numbers up to a given limit.\n50": 0.5
        },
        "avg_similarity_score": 0.29789974114241474
    },
    {
        "instruction": "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.",
        "output": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def print_details(self):\n        print(f\"Name: {self.name}\")\n        print(f\"Age: {self.age}\")\n        print(f\"Gender: {self.gender}\")\n\nperson = Person(\"John Doe\", 30, \"Male\")\nperson.print_details()",
        "most_similar_instructions": {
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5660377358490566,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.5454545454545454,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.5263157894736842,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.43902439024390244,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.43243243243243246,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.4285714285714286,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4150943396226415,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.4,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.4,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.3773584905660377
        },
        "avg_similarity_score": 0.21384181494497623
    },
    {
        "instruction": "Create a Python program that calculates the sum of all the even numbers between two given positive integers.",
        "output": "def sum_even_numbers(start, end):\n    return sum(num for num in range(start, end+1) if num % 2 == 0)\n\nstart_num = 1\nend_num = 10\nsum_even = sum_even_numbers(start_num, end_num)\nprint(sum_even)",
        "most_similar_instructions": {
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5882352941176471,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.5882352941176471,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.5405405405405405,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5365853658536586,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5294117647058824,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.5,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4848484848484848,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.4736842105263158,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.46511627906976744,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4615384615384615
        },
        "avg_similarity_score": 0.2577788142974631
    },
    {
        "instruction": "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.",
        "output": "import datetime\n\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def calculate_age(self):\n        current_year = datetime.datetime.now().year\n        age = current_year - self.year\n        return age\n\ncar = Car(\"Ford\", \"Mustang\", 2015)\ncar_age = car.calculate_age()\nprint(car_age)",
        "most_similar_instructions": {
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.5925925925925927,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5454545454545454,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.49122807017543857,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4727272727272727,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.47058823529411764,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.45454545454545453,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.4489795918367347,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.41860465116279066,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4150943396226415
        },
        "avg_similarity_score": 0.23538799982329336
    },
    {
        "instruction": "Create a Python program that generates a list of Fibonacci numbers.\n10",
        "output": "def generate_fibonacci_sequence(length):\n    fibonacci_seq = [0, 1]\n    for i in range(2, length):\n        fibonacci_seq.append(fibonacci_seq[i - 1] + fibonacci_seq[i - 2])\n    return fibonacci_seq\n\nsequence_length = 10\nfibonacci_sequence = generate_fibonacci_sequence(sequence_length)\nprint(\"Fibonacci sequence:\", fibonacci_sequence)",
        "most_similar_instructions": {
            "Create a Python program that generates all possible combinations of a given string.": 0.5599999999999999,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5517241379310345,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5384615384615384,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5384615384615384,
            "Create a Python program to find the first n Fibonacci numbers.": 0.5217391304347826,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5185185185185186,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.4848484848484849,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4827586206896552,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.4827586206896552
        },
        "avg_similarity_score": 0.2846740136125614
    },
    {
        "instruction": "Write a Python script that sorts a list of strings in descending order based on their lengths.",
        "output": "string_list = ['cat', 'elephant', 'lion', 'dog', 'giraffe']\nsorted_list = sorted(string_list, key=len, reverse=True)\nprint(sorted_list)",
        "most_similar_instructions": {
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5945945945945946,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5714285714285715,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5405405405405405,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5263157894736842,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.5,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.47058823529411764,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.45714285714285713,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.45161290322580644,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.45161290322580644,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4324324324324324
        },
        "avg_similarity_score": 0.26305919336369904
    },
    {
        "instruction": "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']",
        "output": "def remove_duplicates(lst):\n    return list(set(lst))\n\nexample_list = ['apple', 'banana', 'cherry', 'banana', 'apple']\nresult = remove_duplicates(example_list)\nprint(result)",
        "most_similar_instructions": {
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.5161290322580646,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.4848484848484848,
            "Write a Python program to count the frequency of each element in a given list.": 0.4666666666666667,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.46511627906976744,
            "Write a Python function to reverse a given list of integers.": 0.4615384615384615,
            "Design a Python function that removes all duplicates from a given list.": 0.4444444444444445,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4444444444444444,
            "Write a Python program to concatenate two lists.": 0.43478260869565216,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4137931034482759,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.3888888888888889
        },
        "avg_similarity_score": 0.24182276039918926
    },
    {
        "instruction": "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]",
        "output": "def find_median(numbers):\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n    return median\n\nnumbers = [1, 3, 5, 7, 9, 2, 4, 6, 8]\nprint(find_median(numbers))",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5853658536585366,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5714285714285714,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5454545454545454,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5333333333333332,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5294117647058824,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5238095238095238,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4999999999999999,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4864864864864865,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.47619047619047616,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.47368421052631576
        },
        "avg_similarity_score": 0.2709925102786622
    },
    {
        "instruction": "Write a Python function that converts a sentence into title case.",
        "output": "def convert_to_title_case(sentence):\n    words = sentence.split()\n    title_case_words = [word.capitalize() for word in words]\n    return ' '.join(title_case_words)\n\nsentence = \"hello world\"\nprint(convert_to_title_case(sentence))",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5714285714285714,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.56,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.5294117647058824,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4999999999999999,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4799999999999999,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4799999999999999,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4799999999999999,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4615384615384615,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.4615384615384615,
            "Write a Python function to reverse a given list of integers.": 0.45454545454545453
        },
        "avg_similarity_score": 0.26510677617864287
    },
    {
        "instruction": "Generate a Python program that computes the factorial of a given positive integer.",
        "output": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\nn = 5\nprint(factorial(n))",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5925925925925927,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5517241379310345,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.5517241379310345,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5384615384615384,
            "Create a Python program that generates all possible combinations of a given string.": 0.5384615384615384,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5185185185185186,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.5161290322580646,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.5161290322580646,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5142857142857142,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5
        },
        "avg_similarity_score": 0.2819085900020882
    },
    {
        "instruction": "Generate a Python script that swaps the values of two variables.",
        "output": "a = 5\nb = 10\n\nprint(\"Before swapping: a =\", a, \"b =\", b)\n\ntemp = a\na = b\nb = temp\n\nprint(\"After swapping: a =\", a, \"b =\", b)",
        "most_similar_instructions": {
            "Generate a Python program that computes the factorial of a given positive integer.": 0.4999999999999999,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4799999999999999,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.4444444444444444,
            "Generate a Python program to find the common elements from two lists.": 0.43478260869565216,
            "Generate a Python program to calculate the power of a number using recursion.": 0.41666666666666663,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.41379310344827586,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4,
            "Generate a correct python program to fulfill the following purpose:": 0.380952380952381,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.37499999999999994,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.37499999999999994
        },
        "avg_similarity_score": 0.23941458978307362
    },
    {
        "instruction": "Generate a Python script to find and replace a specific word in a given string.",
        "output": "def find_and_replace_word(s, word, replacement):\n    return s.replace(word, replacement)\n\nstring = 'Python is great'\nword_to_replace = 'great'\nreplacement_word = 'awesome'\nprint(find_and_replace_word(string, word_to_replace, replacement_word))",
        "most_similar_instructions": {
            "Write Python code to find the number of vowels in a given string.": 0.5,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.43243243243243246,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.42424242424242425,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4137931034482759,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4137931034482759,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4137931034482759,
            "Write a Python program to count the frequency of each element in a given list.": 0.4000000000000001,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4000000000000001,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4000000000000001,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.38709677419354843
        },
        "avg_similarity_score": 0.24998396899871808
    },
    {
        "instruction": "Write a Python program that finds the length of the longest word in a given string.",
        "output": "def find_longest_word_length(s):\n    words = s.split(' ')\n    longest_word_length = 0\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length\n\nstring = 'Python programming is fun'\nprint(find_longest_word_length(string))",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5806451612903225,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5806451612903225,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.5789473684210527,
            "Write Python code to find the number of vowels in a given string.": 0.5517241379310345,
            "Create a Python program that generates all possible combinations of a given string.": 0.5517241379310345,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.5517241379310345,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5333333333333333,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5333333333333333,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.5294117647058824,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5294117647058824
        },
        "avg_similarity_score": 0.31506420317769007
    },
    {
        "instruction": "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.",
        "output": "def find_common_elements(list1, list2):\n    common_elements = []\n    for item in list1:\n        if item in list2 and item not in common_elements:\n            common_elements.append(item)\n    return common_elements\n\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\ncommon_list = find_common_elements(list1, list2)\nprint('Common elements:', common_list)",
        "most_similar_instructions": {
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.5882352941176471,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5405405405405405,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.5,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.4680851063829787,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.46511627906976744,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.4642857142857143,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.44897959183673475,
            "Write a Python function that receives two integers and returns their division result as a float.\n8, 4": 0.4390243902439025,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4313725490196078,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.42857142857142855
        },
        "avg_similarity_score": 0.24938402060335868
    },
    {
        "instruction": "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.",
        "output": "num1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\nresult = num1 / num2\nprint(\"Result:\", result)",
        "most_similar_instructions": {
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5581395348837209,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.5116279069767442,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.49056603773584906,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.4888888888888889,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.43636363636363634,
            "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2": 0.4210526315789474,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4090909090909091,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.4090909090909091,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.4,
            "Create a Python program that generates a random number between 1 and 100, then prompts the user to guess the number. Provide appropriate feedback if the guess is too high or too low, and continue prompting until the correct number is guessed.": 0.39999999999999997
        },
        "avg_similarity_score": 0.23037513776953383
    },
    {
        "instruction": "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]",
        "output": "def reverse_list(lst):\n    reversed_list = lst[::-1]\n    return reversed_list\n\nnumbers = [1, 2, 3, 4]\nreversed_numbers = reverse_list(numbers)\nprint(reversed_numbers)",
        "most_similar_instructions": {
            "Design a Python function that reverses the order of words in a given sentence.": 0.5945945945945946,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.5882352941176471,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5714285714285715,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5714285714285715,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5217391304347826,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5217391304347826,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.52,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.4999999999999999,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4999999999999999
        },
        "avg_similarity_score": 0.27988199530386515
    },
    {
        "instruction": "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]",
        "output": "def find_average(numbers):\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average\n\nnumbers = [5, 7, 3, 9, 2]\naverage_value = find_average(numbers)\nprint(average_value)",
        "most_similar_instructions": {
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5853658536585366,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5853658536585366,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5714285714285714,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5581395348837208,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5581395348837208,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5500000000000002,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5454545454545454,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5238095238095238,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5238095238095238,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.5098039215686274
        },
        "avg_similarity_score": 0.28578723618771384
    },
    {
        "instruction": "How can you sort a list of strings in alphabetical order using Python?",
        "output": "input_list = ['banana', 'apple', 'cherry']\nsorted_list = sorted(input_list)\nprint(sorted_list)",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5925925925925927,
            "How can you remove duplicate elements from a list in Python?": 0.5833333333333334,
            "How can you sort a dictionary by its values in descending order?": 0.5599999999999999,
            "How can you convert a string to uppercase in Python?": 0.5217391304347826,
            "How can you generate a random integer between a given range in Python?": 0.46153846153846156,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4444444444444445,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.42857142857142855,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4242424242424242,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.4242424242424242,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.4242424242424242
        },
        "avg_similarity_score": 0.17555656392292213
    },
    {
        "instruction": "How would you find the index of the first occurrence of a specific element in a list using Python?",
        "output": "input_list = ['apple', 'banana', 'cherry']\nelement = 'banana'\nindex = input_list.index(element)\nprint(index)",
        "most_similar_instructions": {
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.5652173913043478,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.4897959183673469,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.4897959183673469,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4444444444444444,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.42857142857142855,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.380952380952381,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.37837837837837834,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.37837837837837834,
            "How can you sort a list of strings in alphabetical order using Python?": 0.37499999999999994
        },
        "avg_similarity_score": 0.1765243788320978
    },
    {
        "instruction": "How can you find the length of a string using Python?",
        "output": "string = \"Hello, World!\"\nlength = len(string)\nprint(length)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5714285714285713,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.5333333333333333,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.5142857142857142,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4999999999999999,
            "How can you remove duplicate elements from a list in Python?": 0.45454545454545453,
            "How can you implement a Python function to reverse a string?": 0.45454545454545453,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4444444444444444,
            "What is the Python code to calculate the length of a string?": 0.43478260869565216,
            "Write Python code to find the number of vowels in a given string.": 0.41666666666666663,
            "How would you generate a random number between 1 and 100 using Python?": 0.41666666666666663
        },
        "avg_similarity_score": 0.17784193555572375
    },
    {
        "instruction": "Create a Python function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.",
        "output": "def is_palindrome(string):\n  string = string.lower()\n  reverse_string = string[::-1]\n  if string == reverse_string:\n    return True\n  else:\n    return False",
        "most_similar_instructions": {
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5714285714285714,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.5625000000000001,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5396825396825397,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4642857142857143,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.4000000000000001,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.39344262295081966,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.38235294117647056,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.38235294117647056,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.375,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.3728813559322034
        },
        "avg_similarity_score": 0.21530813107031482
    },
    {
        "instruction": "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.",
        "output": "celsius = float(input(\"Enter temperature in Celsius: \"))\nfahrenheit = (celsius * 9/5) + 32\nprint(\"Temperature in Fahrenheit:\", fahrenheit)",
        "most_similar_instructions": {
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.4878048780487805,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.47457627118644063,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.47457627118644063,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.456140350877193,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.4406779661016949,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.425531914893617,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.4210526315789474,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.40816326530612246,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.391304347826087
        },
        "avg_similarity_score": 0.24633403259135223
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns a new string that is the reverse of the original string, but with the case of each letter reversed. For example, 'Hello' would become 'oLLEh'.",
        "output": "def reverse_string_case(string):\n  reversed_string = string[::-1]\n  reversed_case_string = ''\n  for letter in reversed_string:\n    if letter.islower():\n      reversed_case_string += letter.upper()\n    else:\n      reversed_case_string += letter.lower()\n  return reversed_case_string",
        "most_similar_instructions": {
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5964912280701754,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5806451612903226,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5079365079365079,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.4594594594594595,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.45714285714285713,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.43333333333333335,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4307692307692308,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.42857142857142855,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.42857142857142855,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4193548387096775
        },
        "avg_similarity_score": 0.22377462081633187
    },
    {
        "instruction": "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.",
        "output": "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.speed = 0\n\n    def accelerate(self, amount):\n        self.speed += amount\n\n    def decelerate(self, amount):\n        self.speed -= amount\n\n    def print_info(self):\n        print(f\"Make: {self.make}\")\n        print(f\"Model: {self.model}\")\n        print(f\"Color: {self.color}\")\n        print(f\"Current Speed: {self.speed} mph\")\n\ncar = Car(\"Toyota\", \"Camry\", \"Red\")\ncar.accelerate(30)\ncar.decelerate(10)\ncar.print_info()",
        "most_similar_instructions": {
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.46153846153846156,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.45901639344262296,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.4545454545454546,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4444444444444445,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.41269841269841273,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.40625,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.36363636363636365,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.34375,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.339622641509434,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.3333333333333333
        },
        "avg_similarity_score": 0.18319798195056036
    },
    {
        "instruction": "Write a Python function that takes a string and returns the character with the highest frequency. If there are multiple characters with the same highest frequency, return the one that appears first in the string.\n\"hello world\"",
        "output": "def find_most_common_character(string):\n    frequency = {}\n    for char in string:\n        frequency[char] = frequency.get(char, 0) + 1\n    max_frequency = max(frequency.values())\n    most_common_character = min([key for key, value in frequency.items() if value == max_frequency])\n    return most_common_character\n\nstring = \"hello world\"\nmost_common_char = find_most_common_character(string)\nprint(most_common_char)",
        "most_similar_instructions": {
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5915492957746479,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4642857142857143,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.4594594594594595,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4516129032258065,
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.3953488372093023,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.39215686274509803,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.38596491228070173,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.37931034482758624,
            "Create a Python function that takes a string as input and returns a new string that is the reverse of the original string, but with the case of each letter reversed. For example, 'Hello' would become 'oLLEh'.": 0.37837837837837834,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.3773584905660377
        },
        "avg_similarity_score": 0.21610017288828898
    },
    {
        "instruction": "Create a Python function that takes a string and checks if it is a valid palindrome. Ignore spaces, capitalization, and punctuation.\n\"Madam Arora teaches malayalam\"",
        "output": "import re\n\ndef is_palindrome(string):\n    clean_string = re.sub(r'[^A-Za-z]', '', string.lower())\n    return clean_string == clean_string[::-1]\n\nstring = \"Madam Arora teaches malayalam\"\nis_valid_palindrome = is_palindrome(string)\nprint(is_valid_palindrome)",
        "most_similar_instructions": {
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5777777777777778,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.5660377358490566,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5,
            "Create a Python function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.": 0.49180327868852464,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.45,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4444444444444445,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.4067796610169491,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.3829787234042554,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.3829787234042554,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.3673469387755102
        },
        "avg_similarity_score": 0.2260064058463324
    },
    {
        "instruction": "Write a Python program that generates a random password of given length. The password should include at least one lowercase letter, one uppercase letter, one digit, and one special character.\n10",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    lowercase_letters = string.ascii_lowercase\n    uppercase_letters = string.ascii_uppercase\n    digits = string.digits\n    special_characters = string.punctuation\n\n    password_characters = []\n    password_characters.extend(random.choice(lowercase_letters))\n    password_characters.extend(random.choice(uppercase_letters))\n    password_characters.extend(random.choice(digits))\n    password_characters.extend(random.choice(special_characters))\n\n    for _ in range(4, length):\n        password_characters.extend(random.choice(string.ascii_letters + string.digits + string.punctuation))\n\n    random.shuffle(password_characters)\n    password = ''.join(password_characters)\n    return password\n\npassword_length = 10\npassword = generate_password(password_length)\nprint(password)",
        "most_similar_instructions": {
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.5862068965517241,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.45283018867924524,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.43636363636363634,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.41666666666666663,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4090909090909091,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.40816326530612246,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.3846153846153846,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.37209302325581395,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.3508771929824561,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.34615384615384615
        },
        "avg_similarity_score": 0.21399949605803986
    },
    {
        "instruction": "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'",
        "output": "def count_vowels(string):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\ninput_string = 'Hello, World!'\nvowel_count = count_vowels(input_string)\nprint(f'The number of vowels in the string is: {vowel_count}')",
        "most_similar_instructions": {
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5454545454545454,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5128205128205129,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.47619047619047616,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.45714285714285713,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.45,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4444444444444444,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.43243243243243246,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.42857142857142855,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4242424242424242,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.42105263157894735
        },
        "avg_similarity_score": 0.2725828864554794
    },
    {
        "instruction": "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]",
        "output": "def find_second_largest(numbers):\n    first = second = float('-inf')\n    for num in numbers:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    return second\n\ninput_numbers = [10, 5, 20, 15, 8]\nsecond_largest = find_second_largest(input_numbers)\nprint(f'The second largest number is: {second_largest}')",
        "most_similar_instructions": {
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5882352941176471,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5500000000000002,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5128205128205129,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4888888888888889,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.4878048780487805,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.47826086956521735,
            "Write a Python program to count the frequency of each element in a given list.": 0.47058823529411764,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.46153846153846156
        },
        "avg_similarity_score": 0.26307727062531827
    },
    {
        "instruction": "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]",
        "output": "def find_average(lst):\n    sum_ = sum(lst)\n    average = sum_ / len(lst)\n    return average\n\nnumbers = [5, 2, 9, 12, 7]\navg = find_average(numbers)\nprint(f\"The average of the given list is {avg}\")",
        "most_similar_instructions": {
            "Create a Python function to find the maximum value in a list of numbers.": 0.588235294117647,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5853658536585366,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5581395348837209,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5581395348837209,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5142857142857143,
            "Write a Python program to count the frequency of each element in a given list.": 0.5142857142857143,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5128205128205129,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5106382978723405,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.48888888888888893,
            "Write Python code to find the number of vowels in a given string.": 0.4848484848484849
        },
        "avg_similarity_score": 0.27818089471962637
    },
    {
        "instruction": "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]",
        "output": "def convert_to_lowercase(strings):\n    return [string.lower() for string in strings]\n\ninput_strings = [\"Hello\", \"WORLD\"]\nlowercase_strings = convert_to_lowercase(input_strings)\nprint(lowercase_strings)",
        "most_similar_instructions": {
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.6,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5925925925925926,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5333333333333333,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4827586206896552,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.47368421052631576,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.47058823529411764,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4666666666666667
        },
        "avg_similarity_score": 0.28991480924111745
    },
    {
        "instruction": "Create a Python script that prompts the user to enter their age and prints whether they are a minor, an adult, or a senior citizen.",
        "output": "age = int(input(\"Enter your age: \"))\n\nif age < 18:\n    print(\"You are a minor.\")\nelif age >= 18 and age < 60:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are a senior citizen.\")",
        "most_similar_instructions": {
            "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.": 0.5964912280701754,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.48888888888888893,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.48888888888888893,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.4782608695652174,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.4727272727272728,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.4363636363636364,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.4255319148936171,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.42105263157894735,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.3859649122807018,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.3846153846153846
        },
        "avg_similarity_score": 0.22083688425787176
    },
    {
        "instruction": "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.",
        "output": "squares = {num: num**2 for num in range(1, 6)}\nprint(squares)",
        "most_similar_instructions": {
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.5581395348837208,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.43478260869565216,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.42553191489361697,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.3902439024390244,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.3829787234042554,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.38095238095238093,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.38095238095238093,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.38095238095238093,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.38095238095238093
        },
        "avg_similarity_score": 0.2542837722883057
    },
    {
        "instruction": "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.",
        "output": "class Book:\n    def __init__(self, title, author, price):\n        self.title = title\n        self.author = author\n        self.price = price\n\n    def print_details(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Price: {self.price}\")\n\nbook = Book(\"Python Crash Course\", \"Eric Matthes\", 25.99)\nbook.print_details()",
        "most_similar_instructions": {
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5925925925925927,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.43478260869565216,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4313725490196078,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.42857142857142855,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.4230769230769231,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4230769230769231,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4230769230769231,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4081632653061225,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4000000000000001,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.4
        },
        "avg_similarity_score": 0.20216612870272166
    },
    {
        "instruction": "Write Python code to find the greatest common divisor (GCD) of two numbers.",
        "output": "def gcd(a, b):\n    while(b):\n        a, b = b, a % b\n    return a\n\nnum1 = 24\nnum2 = 36\nprint(gcd(num1, num2))",
        "most_similar_instructions": {
            "Write Python code to find the number of vowels in a given string.": 0.5384615384615384,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.4848484848484849,
            "Generate a Python program to find the common elements from two lists.": 0.48000000000000004,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.45161290322580644,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.45161290322580644,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4444444444444445,
            "Create a Python program to find the first n Fibonacci numbers.": 0.41666666666666663,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.41379310344827586,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.41176470588235287,
            "Write Python code to swap two variables without using a temporary variable.": 0.4
        },
        "avg_similarity_score": 0.20008701886212585
    },
    {
        "instruction": "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]",
        "output": "def sum_list(lst):\n    return sum(lst)\n\nnumbers = [10, 20, 30, 40, 50]\ntotal_sum = sum_list(numbers)\nprint(total_sum)",
        "most_similar_instructions": {
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.5789473684210527,
            "Write Python code to find the number of vowels in a given string.": 0.5454545454545455,
            "Write a Python program to count the frequency of each element in a given list.": 0.5142857142857143,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5128205128205129,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.4736842105263158,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.46511627906976744,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.45,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.43999999999999995,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.4210526315789474,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4186046511627907
        },
        "avg_similarity_score": 0.2237510746599521
    },
    {
        "instruction": "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nstart = 2\nend = 20\nprime_numbers = [num for num in range(start, end+1) if is_prime(num)]\nprint(prime_numbers)",
        "most_similar_instructions": {
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.6,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.5531914893617021,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4848484848484849,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.4615384615384615,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.45,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.4390243902439024,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.4324324324324324,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.42857142857142855,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.42857142857142855,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.42857142857142855
        },
        "avg_similarity_score": 0.2612595691702872
    },
    {
        "instruction": "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'",
        "output": "def count_word_frequency(s):\n    word_list = s.lower().split()\n    word_count = {}\n\n    for word in word_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_words\n\nsentence = 'I love Python programming because Python is easy to learn and versatile.'\nfrequency = count_word_frequency(sentence)\nfor word, count in frequency:\n    print(f'{word}: {count}')",
        "most_similar_instructions": {
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.5483870967741936,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.4516129032258065,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4242424242424242,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.39999999999999997,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3728813559322034,
            "Write a Python program that finds the length of the longest word in a given string.": 0.37037037037037035,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3548387096774194,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.35135135135135137,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.35087719298245607,
            "Design a Python function that reverses the order of words in a given sentence.": 0.34615384615384615
        },
        "avg_similarity_score": 0.22234830532236366
    },
    {
        "instruction": "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]",
        "output": "def merge_sorted_lists(list1, list2):\n    merged_list = sorted(list1 + list2)\n    return merged_list\n\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]\nmerged = merge_sorted_lists(list1, list2)\nprint(merged)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.5365853658536585,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.4782608695652174,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4615384615384615,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.39999999999999997,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.39344262295081966,
            "What is the Python code to concatenate two lists into one list?": 0.38888888888888895,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.3829787234042554,
            "Write a Python program to concatenate two lists.": 0.375,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.3636363636363636,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.35555555555555557
        },
        "avg_similarity_score": 0.19068470729993967
    },
    {
        "instruction": "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123",
        "output": "def convert_minutes(minutes):\n    hours = minutes // 60\n    remaining_minutes = minutes % 60\n    return hours, remaining_minutes\n\nminutes = 123\nhours, remaining_minutes = convert_minutes(minutes)\nprint(f'{hours} hours, {remaining_minutes} minutes')",
        "most_similar_instructions": {
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5714285714285715,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5294117647058824,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.5116279069767442,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.48648648648648646,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.47619047619047616,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.4736842105263158,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.47058823529411764,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.47058823529411764,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.46511627906976744,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.4571428571428572
        },
        "avg_similarity_score": 0.2815869615152022
    },
    {
        "instruction": "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * (self.radius ** 2)\n  \n    def calculate_circumference(self):\n        return 2 * math.pi * self.radius\n\ncircle = Circle(5)\nprint(circle.calculate_area())\nprint(circle.calculate_circumference())",
        "most_similar_instructions": {
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5581395348837209,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5581395348837209,
            "Create a Python class called \"Circle\" that has one attribute: radius. Implement methods called \"area\" that calculates and returns the area of the circle, and \"circumference\" that calculates and returns the circumference of the circle.": 0.4814814814814815,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.47619047619047616,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.4117647058823529,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.391304347826087,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.375,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.3684210526315789,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.36363636363636365,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.3636363636363636
        },
        "avg_similarity_score": 0.22663746233743592
    },
    {
        "instruction": "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_area(self):\n        return self.length * self.width\n\nrectangle = Rectangle(4, 6)\nprint(rectangle.calculate_area())",
        "most_similar_instructions": {
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.5853658536585366,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5777777777777778,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.5283018867924528,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5217391304347826,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5106382978723404,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4897959183673469,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4782608695652174,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.4255319148936171,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.4186046511627907,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.40816326530612246
        },
        "avg_similarity_score": 0.22032589488120918
    },
    {
        "instruction": "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}",
        "output": "def merge_dictionaries(dict1, dict2):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n\ndict1 = {'apple': 2, 'banana': 3}\ndict2 = {'cherry': 1, 'kiwi': 4}\nmerged_dictionary = merge_dictionaries(dict1, dict2)\nprint(merged_dictionary)",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.39999999999999997,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.37837837837837834,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.36363636363636365,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.3636363636363636,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.358974358974359,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.358974358974359,
            "Write a Python function that receives two integers and returns their division result as a float.\n8, 4": 0.35294117647058826,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.35294117647058826,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.3333333333333333,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.3243243243243243
        },
        "avg_similarity_score": 0.18809428766139658
    },
    {
        "instruction": "Create a Python script that checks whether a given year is a leap year or not and prints the result.",
        "output": "def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False",
        "most_similar_instructions": {
            "Write a Python function to check if a given year is a leap year.": 0.5294117647058824,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5142857142857143,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4878048780487805,
            "Create a Python program to check if a number is a perfect square or not.": 0.4571428571428572,
            "Create a Python function to check if a given year is a leap year or not. A leap year is divisible by 4 but not divisible by 100, unless it is also divisible by 400.": 0.43636363636363634,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4186046511627907,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4117647058823529,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4117647058823529,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4000000000000001,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.4
        },
        "avg_similarity_score": 0.2557987354198233
    },
    {
        "instruction": "Write a Python script that converts a given string to uppercase.",
        "output": "def convert_to_uppercase(input_string):\n  return input_string.upper()\n\nstring = \"hello, world!\"\nuppercase_string = convert_to_uppercase(string)\nprint(uppercase_string)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5714285714285714,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.56,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.56,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.56,
            "Write a Python function that converts a sentence into title case.": 0.5454545454545454,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5384615384615385,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5384615384615385,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.5384615384615385,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5384615384615385,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.5294117647058824
        },
        "avg_similarity_score": 0.29959326905914313
    },
    {
        "instruction": "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".",
        "output": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    def get_info(self):\n        return f\"Name: {self.name}, Age: {self.age}, Grade: {self.grade}\"\n\nstudent1 = Student(\"Alice\", 15, \"9th\")\nstudent_info = student1.get_info()\nprint(student_info)",
        "most_similar_instructions": {
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.5454545454545455,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5161290322580645,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4666666666666667,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.40625,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.3934426229508197,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.39285714285714285,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.39130434782608686,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.38596491228070173,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.36923076923076925,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.3666666666666667
        },
        "avg_similarity_score": 0.18640718622301392
    },
    {
        "instruction": "Write a Python function that sorts a list of dictionaries by a specified key. The list and the key should be provided as input to the function.\nInput: [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}]\nKey: \"age\"",
        "output": "def sort_list_of_dictionaries(list, key):\n    return sorted(list, key=lambda x: x[key])\n\ninput_list = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}]\nsorted_list = sort_list_of_dictionaries(input_list, \"age\")\nprint(sorted_list)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.4533333333333333,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.3544303797468354,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3492063492063492,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.33333333333333337,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.3333333333333333,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.33333333333333326,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.31578947368421056,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.31578947368421056,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.3142857142857143,
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.30769230769230765
        },
        "avg_similarity_score": 0.20441427260815925
    },
    {
        "instruction": "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3",
        "output": "def calculate_rectangle_area(length, width):\n    return length * width\n\narea = calculate_rectangle_area(5, 3)\nprint(area)",
        "most_similar_instructions": {
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.47826086956521735,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4363636363636364,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.4210526315789474,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.39215686274509803,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.3913043478260869,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.3880597014925374,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.3773584905660377,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.37499999999999994,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3703703703703704
        },
        "avg_similarity_score": 0.23452213843952735
    },
    {
        "instruction": "Write a Python class called \"Calculator\" with methods add(), subtract(), multiply(), and divide(). Implement these methods to perform the respective arithmetic operations on two numbers.",
        "output": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b\n\ncalculator = Calculator()\nresult = calculator.add(2, 3)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.37499999999999994,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.32,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.3181818181818182,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.3181818181818182,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.3157894736842105,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.30769230769230765,
            "Write a Python program to concatenate two lists.": 0.30303030303030304,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.3,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.29787234042553196,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.29629629629629634
        },
        "avg_similarity_score": 0.18461017457423606
    },
    {
        "instruction": "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10",
        "output": "def generate_fibonacci(length):\n    fibonacci_sequence = []\n    if length <= 0:\n        return fibonacci_sequence\n    elif length == 1:\n        return [0]\n    fibonacci_sequence = [0, 1]\n    while len(fibonacci_sequence) < length:\n        next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n        fibonacci_sequence.append(next_number)\n    return fibonacci_sequence\n\nlength = 10\nfibonacci_nums = generate_fibonacci(length)\nprint(fibonacci_nums)",
        "most_similar_instructions": {
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.6,
            "Create a Python program that generates all possible combinations of a given string.": 0.5806451612903226,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.5641025641025642,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.5454545454545455,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5454545454545454,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5142857142857143,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.5,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.47058823529411764,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.45161290322580644,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.45
        },
        "avg_similarity_score": 0.27518052647055485
    },
    {
        "instruction": "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]",
        "output": "numbers = [2, 4, 6, 8, 10]\naverage = sum(numbers) / len(numbers)\nprint(f\"The average of the numbers is: {average}\")",
        "most_similar_instructions": {
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.6,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5833333333333334,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.5714285714285714,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5652173913043478,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5517241379310344,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.48,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4782608695652174,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4782608695652174,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.4727272727272728
        },
        "avg_similarity_score": 0.26958462252516735
    },
    {
        "instruction": "Write a Python program that searches for a specific element in a given list and returns its index.",
        "output": "def search_element(lst, element):\n    for i, item in enumerate(lst):\n        if item == element:\n            return i\n    return -1\n\nmy_list = [2, 4, 6, 8, 10]\nelement = 6\nindex = search_element(my_list, element)\nif index != -1:\n    print(f\"The element {element} is found at index {index}.\")\nelse:\n    print(f\"The element {element} is not found in the list.\")",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5454545454545454,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5142857142857143,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.4878048780487805,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.4864864864864865,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4848484848484848,
            "Write a Python program that finds the length of the longest word in a given string.": 0.47058823529411764,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4615384615384615,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4615384615384615,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.4444444444444444,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.4444444444444444
        },
        "avg_similarity_score": 0.2889806097387537
    },
    {
        "instruction": "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]",
        "output": "values = [5, 2, 8, 3, 1]\nmax_value = max(values)\nprint(max_value)",
        "most_similar_instructions": {
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5853658536585366,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5714285714285714,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4878048780487805,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.47619047619047616,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.47619047619047616,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4545454545454545,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.45,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4324324324324324,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.4186046511627907,
            "Write Python code to find the number of vowels in a given string.": 0.41176470588235287
        },
        "avg_similarity_score": 0.2339909111434669
    },
    {
        "instruction": "How can you check if a given number is prime in Python?\ninput: 13",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nnumber = 13\nis_prime_number = is_prime(number)\nprint(is_prime_number)",
        "most_similar_instructions": {
            "How can you generate a random integer between a given range in Python?": 0.5185185185185186,
            "How can you convert a string to uppercase in Python?": 0.5,
            "How can you remove duplicate elements from a list in Python?": 0.4799999999999999,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.47058823529411764,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.4666666666666667,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4444444444444445,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.42857142857142855,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.4137931034482759,
            "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17": 0.41025641025641024,
            "How can you find the length of a string using Python?": 0.4
        },
        "avg_similarity_score": 0.16576704889329263
    },
    {
        "instruction": "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]",
        "output": "elements = [1, 2, 2, 3, 3, 3]\noccurrences = {}\nfor element in elements:\n    occurrences[element] = occurrences.get(element, 0) + 1\n\nprint(occurrences)",
        "most_similar_instructions": {
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.5238095238095238,
            "How can you find the length of a string using Python?": 0.4705882352941176,
            "Please suggest a Python code snippet to count the number of occurrences of a specific element in a list.\nlist_of_elements = [1, 2, 3, 2, 4, 2, 5, 2]\nspecific_element = 2": 0.4642857142857143,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.45614035087719296,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.43478260869565216,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.43478260869565216,
            "Write a Python program to count the frequency of each element in a given list.": 0.4210526315789474,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.39215686274509803,
            "How can you sort a list of strings in alphabetical order using Python?": 0.3888888888888889
        },
        "avg_similarity_score": 0.1695630110247214
    },
    {
        "instruction": "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]",
        "output": "list1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\ncommon_elements = list(set(list1) & set(list2))\nprint(common_elements)",
        "most_similar_instructions": {
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.5,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.4482758620689656,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.42105263157894735,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4090909090909091,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.4090909090909091,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.40816326530612246,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.4,
            "How can you find the length of a string using Python?": 0.37499999999999994,
            "How can you remove duplicate elements from a list in Python?": 0.37499999999999994,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.3673469387755102
        },
        "avg_similarity_score": 0.13077075546534206
    },
    {
        "instruction": "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"",
        "output": "string = \"Hello, World!\"\ncharacters = list(string)\nprint(characters)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5384615384615384,
            "How can you implement a Python function to reverse a string?": 0.5185185185185185,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5161290322580646,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4666666666666667,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.46153846153846156,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.4210526315789474,
            "How can you sort a list of strings in alphabetical order using Python?": 0.41379310344827586,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.4,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.39999999999999997,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.38888888888888884
        },
        "avg_similarity_score": 0.2037145097875612
    },
    {
        "instruction": "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10",
        "output": "import random\n\ndef generate_random_integers(start, end, length):\n    return random.sample(range(start, end + 1), length)\n\nstart = 1\nend = 100\nlength = 10\nrandom_numbers = generate_random_integers(start, end, length)\nprint(random_numbers)",
        "most_similar_instructions": {
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.55,
            "Write a Python function to reverse a given list of integers.": 0.5454545454545455,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.5416666666666667,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.5,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.4905660377358491,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.45,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.45,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.4210526315789474,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.41025641025641024,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.4
        },
        "avg_similarity_score": 0.25161633978104553
    },
    {
        "instruction": "How can you write Python code to extract the extension from a filename?\nfilename = \"example.py\"",
        "output": "filename = \"example.py\"\nextension = filename.split('.')[-1]\nprint(extension)",
        "most_similar_instructions": {
            "How can you implement a Python function to reverse a string?": 0.4444444444444444,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4375,
            "Write Python code to find the number of vowels in a given string.": 0.41379310344827586,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.411764705882353,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.41025641025641024,
            "Can you write a Python script to concatenate two strings and print the result?": 0.39999999999999997,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.39999999999999997,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.38888888888888884,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.37837837837837834,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.37837837837837834
        },
        "avg_similarity_score": 0.19835009629108363
    },
    {
        "instruction": "Write a Python function to remove all duplicates from a list while preserving the original order of elements.",
        "output": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))\n\nnumbers = [1, 2, 3, 3, 4, 4, 5, 5]\nunique_numbers = remove_duplicates(numbers)\nprint(unique_numbers)",
        "most_similar_instructions": {
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.5957446808510638,
            "Write a Python function to reverse a given list of integers.": 0.5517241379310345,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.5454545454545454,
            "Design a Python function that removes all duplicates from a given list.": 0.5333333333333333,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.47058823529411764,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4615384615384615,
            "Create a Python function to find the maximum value in a list of numbers.": 0.43750000000000006,
            "Write a Python function to find all prime numbers up to the given number n.": 0.42424242424242425,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4210526315789474,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.41025641025641024
        },
        "avg_similarity_score": 0.26318467834599224
    },
    {
        "instruction": "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"",
        "output": "string = \"radar\"\nis_palindrome = string == string[::-1]\nprint(is_palindrome)",
        "most_similar_instructions": {
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.5625,
            "Write Python code to check if a given list is empty or not.": 0.5517241379310345,
            "Write a Python function to check if a given year is a leap year.": 0.5333333333333333,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5263157894736842,
            "How can you implement a Python function to reverse a string?": 0.5185185185185185,
            "How can you write Python code to extract the extension from a filename?\nfilename = \"example.py\"": 0.5,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.47058823529411764,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.4666666666666667,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4666666666666667
        },
        "avg_similarity_score": 0.21400536245053503
    },
    {
        "instruction": "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]",
        "output": "numbers = [10, 5, 8, 3, 12, 6]\nmaximum = max(numbers)\nminimum = min(numbers)\nprint(maximum, minimum)",
        "most_similar_instructions": {
            "Create a Python function to find the maximum value in a list of numbers.": 0.4864864864864865,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4782608695652174,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.46511627906976744,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4545454545454545,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.4545454545454545,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4210526315789474,
            "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"": 0.41025641025641024,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.380952380952381,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.37209302325581395,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.37209302325581395
        },
        "avg_similarity_score": 0.1911276331528693
    },
    {
        "instruction": "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]",
        "output": "lst = [('apple', 3), ('banana', 1), ('cherry', 2)]\nsorted_list = sorted(lst, key=lambda x: x[1])\nprint(sorted_list)",
        "most_similar_instructions": {
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.5531914893617021,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4528301886792453,
            "How can you sort a list of strings in alphabetical order using Python?": 0.41860465116279066,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.4090909090909091,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4090909090909091,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.4081632653061224,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.4,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.39215686274509803,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.39215686274509803
        },
        "avg_similarity_score": 0.21051787845883418
    },
    {
        "instruction": "Write a Python function that calculates the factorial of a number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.\nNumber: 5",
        "output": "def calculate_factorial(number):\n    factorial = 1\n    for i in range(1, number+1):\n        factorial *= i\n    return factorial\n\nnumber = 5\nfactorial = calculate_factorial(number)\nprint(factorial)",
        "most_similar_instructions": {
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.42307692307692313,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4166666666666667,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.4150943396226416,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.3773584905660377,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.37499999999999994,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3636363636363637,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.3636363636363636,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.3636363636363636,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.36065573770491804,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.35294117647058826
        },
        "avg_similarity_score": 0.23132863696842237
    },
    {
        "instruction": "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.",
        "output": "student = {\n    \"name\": \"John\",\n    \"age\": 18,\n    \"grade\": 12\n}\n\nprint(student)",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.46153846153846156,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.44897959183673464,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.4186046511627907,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.4090909090909091,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.4,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.38596491228070173,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.37500000000000006,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.3636363636363636,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.3414634146341463,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.3404255319148936
        },
        "avg_similarity_score": 0.1825097852507906
    },
    {
        "instruction": "Create a Python list called \"fruits\" with the following items: \"apple\", \"banana\", \"orange\". Print the second item in the list.",
        "output": "fruits = [\"apple\", \"banana\", \"orange\"]\nprint(fruits[1])",
        "most_similar_instructions": {
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.37209302325581395,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.37209302325581395,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.358974358974359,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.35555555555555557,
            "Create a Python function to find the maximum value in a list of numbers.": 0.3529411764705882,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.34615384615384615,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.34285714285714286,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3414634146341463,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.3414634146341463,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.3333333333333333
        },
        "avg_similarity_score": 0.19270497938106426
    },
    {
        "instruction": "Create a Python set called \"colors\" with the following items: \"red\", \"green\", \"blue\". Print the set.",
        "output": "colors = {\"red\", \"green\", \"blue\"}\nprint(colors)",
        "most_similar_instructions": {
            "Create a Python list called \"fruits\" with the following items: \"apple\", \"banana\", \"orange\". Print the second item in the list.": 0.5555555555555556,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.3684210526315789,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.358974358974359,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.34146341463414637,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.3243243243243243,
            "Generate a correct python program to fulfill the following purpose:": 0.3076923076923077,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.3,
            "Create a Python program to find the first n Fibonacci numbers.": 0.2962962962962963,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.2962962962962963,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.29411764705882354
        },
        "avg_similarity_score": 0.17266370094252775
    },
    {
        "instruction": "How can you concatenate two lists in Python?",
        "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nconcatenated_list = list1 + list2\nprint(concatenated_list)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5555555555555556,
            "How can you remove duplicate elements from a list in Python?": 0.5263157894736842,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.48275862068965514,
            "How can you generate a random integer between a given range in Python?": 0.4761904761904762,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4761904761904762,
            "How would you merge two Python dictionaries into one?": 0.47058823529411764,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.45454545454545453,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.43478260869565216,
            "How can you find the length of a string using Python?": 0.4210526315789474,
            "How can you implement a Python function to reverse a string?": 0.4210526315789474
        },
        "avg_similarity_score": 0.1124355429892171
    },
    {
        "instruction": "How would you implement a Python script that finds all the prime numbers within a given range of numbers?",
        "output": "def find_primes(start, end):\n    primes = []\n    for number in range(start, end + 1):\n        if number > 1:\n            for i in range(2, int(number**0.5) + 1):\n                if number % i == 0:\n                    break\n            else:\n                primes.append(number)\n    return primes\n\nstart = 1\nend = 100\nprime_numbers = find_primes(start, end)\nprint(prime_numbers)",
        "most_similar_instructions": {
            "Implement a Python function that finds and returns all prime numbers up to a given limit.\n50": 0.5555555555555555,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5500000000000002,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.5263157894736842,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.5142857142857142,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.4864864864864865,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.4864864864864865,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.47058823529411764,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.47058823529411764,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.46153846153846156,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.45
        },
        "avg_similarity_score": 0.25978034991767485
    },
    {
        "instruction": "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]",
        "output": "numbers = [10, 5, 8, 20, 3, 15]\nlargest_number = max(numbers)\nprint(largest_number)",
        "most_similar_instructions": {
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.5853658536585366,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5641025641025641,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.55,
            "Write Python code to find the number of vowels in a given string.": 0.5454545454545455,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.5,
            "What is the Python code to calculate the length of a string?": 0.5,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.47058823529411764,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.46808510638297873,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.46511627906976744,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.46153846153846156
        },
        "avg_similarity_score": 0.20423126718826407
    },
    {
        "instruction": "How would you round a given float number to 2 decimal places in Python?",
        "output": "number = 3.14159\nrounded_number = round(number, 2)\nprint(rounded_number)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.5,
            "How can you generate a random integer between a given range in Python?": 0.4444444444444445,
            "How would you generate a random number between 1 and 100 using Python?": 0.4444444444444445,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.4137931034482759,
            "How can you remove duplicate elements from a list in Python?": 0.4,
            "How would you remove an item from a Python list by its index?": 0.3703703703703704,
            "How can you sort a list of strings in alphabetical order using Python?": 0.3703703703703704,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.36363636363636365,
            "How can you concatenate two lists in Python?": 0.36363636363636365
        },
        "avg_similarity_score": 0.1587512798742442
    },
    {
        "instruction": "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?",
        "output": "squares = {number: number**2 for number in range(1, 6)}\nprint(squares)",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.5789473684210527,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.5238095238095238,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.47619047619047616,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.3888888888888889,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.358974358974359,
            "How would you generate a random number between 1 and 100 using Python?": 0.35294117647058826,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.34782608695652173,
            "How would you round a given float number to 2 decimal places in Python?": 0.34285714285714286,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.3333333333333333,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.3333333333333333
        },
        "avg_similarity_score": 0.19538421892246288
    },
    {
        "instruction": "How would you create a tuple in Python containing the numbers 1, 2, and 3?",
        "output": "numbers_tuple = (1, 2, 3)\nprint(numbers_tuple)",
        "most_similar_instructions": {
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.5555555555555556,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4444444444444444,
            "How would you generate a random number between 1 and 100 using Python?": 0.42857142857142855,
            "How would you round a given float number to 2 decimal places in Python?": 0.4137931034482759,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.4117647058823529,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.4117647058823529,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.4000000000000001,
            "How can you convert a string to uppercase in Python?": 0.4,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.3888888888888889
        },
        "avg_similarity_score": 0.22475459134088924
    },
    {
        "instruction": "How would you create an empty list in Python?",
        "output": "empty_list = []\nprint(empty_list)",
        "most_similar_instructions": {
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.5,
            "How can you remove duplicate elements from a list in Python?": 0.5,
            "How can you concatenate two lists in Python?": 0.47058823529411764,
            "How would you remove an item from a Python list by its index?": 0.4545454545454546,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4545454545454546,
            "How would you merge two Python dictionaries into one?": 0.4444444444444444,
            "How would you round a given float number to 2 decimal places in Python?": 0.43478260869565216,
            "How can you convert a string to uppercase in Python?": 0.4210526315789474,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.4,
            "How would you generate a random number between 1 and 100 using Python?": 0.3636363636363637
        },
        "avg_similarity_score": 0.12651772632022956
    },
    {
        "instruction": "How would you write Python code to find the maximum and minimum values in a given list?",
        "output": "def find_min_max(lst):\n    if len(lst) == 0:\n        return None\n    min_val = max_val = lst[0]\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return min_val, max_val\n\nnumbers = [5, 2, 8, 1, 6]\nprint(find_min_max(numbers))",
        "most_similar_instructions": {
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.6,
            "Write Python code to find the number of vowels in a given string.": 0.5999999999999999,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5625,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.55,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5405405405405405,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.5263157894736842,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5263157894736842,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5161290322580646,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5142857142857143,
            "Write a Python program to count the frequency of each element in a given list.": 0.5
        },
        "avg_similarity_score": 0.2552243638357596
    },
    {
        "instruction": "Please write a Python function to generate a random password of a given length.",
        "output": "import random\nimport string\n\ndef generate_random_password(length):\n    characters = string.ascii_letters + string.digits + \"!@#$%^&*()\"\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\nlength = 10\nprint(generate_random_password(length))",
        "most_similar_instructions": {
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.5925925925925927,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.5625000000000001,
            "Write a Python function to reverse a given list of integers.": 0.56,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.5555555555555556,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5142857142857143,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5,
            "Write a Python function to check if a given year is a leap year.": 0.5,
            "Write a Python program to count the frequency of each element in a given list.": 0.4827586206896552,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4827586206896552,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.4736842105263159
        },
        "avg_similarity_score": 0.2795633174216588
    },
    {
        "instruction": "Provide an implementation in Python to reverse a given string without using any built-in or library functions.",
        "output": "def reverse_string(string):\n    reversed_string = ''\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\nstring = \"Hello, World!\"\nprint(reverse_string(string))",
        "most_similar_instructions": {
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.5882352941176471,
            "Implement a Python function that reverses a string without using any built-in functions or slicing.\nInput: \"hello world\"": 0.4864864864864865,
            "Provide a code snippet to reverse a string in Python.": 0.42857142857142855,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.380952380952381,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.35294117647058826,
            "How can you implement a Python function to reverse a string?": 0.3448275862068966,
            "Write a Python function to reverse a given list of integers.": 0.3448275862068966,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.32558139534883723,
            "Write Python code to check if a given list is empty or not.": 0.3225806451612903
        },
        "avg_similarity_score": 0.16196277167664744
    },
    {
        "instruction": "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.",
        "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display_info(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)\n\nperson = Person(\"John\", 25)\nperson.display_info()",
        "most_similar_instructions": {
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.5499999999999999,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.5454545454545454,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.5000000000000001,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.46875000000000006,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4642857142857143,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.39999999999999997,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.3859649122807017,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.38461538461538464,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.3793103448275862,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.37735849056603776
        },
        "avg_similarity_score": 0.1908369937398153
    },
    {
        "instruction": "Write a Python program that performs matrix addition. Given two 2D matrices, the program should return the resulting matrix after adding the two matrices together.",
        "output": "def matrix_addition(matrix1, matrix2):\n    if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):\n        return None\n    result = []\n    for i in range(len(matrix1)):\n        row = []\n        for j in range(len(matrix1[0])):\n            row.append(matrix1[i][j] + matrix2[i][j])\n        result.append(row)\n    return result\n\nmatrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[5, 6], [7, 8]]\nprint(matrix_addition(matrix1, matrix2))",
        "most_similar_instructions": {
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.39215686274509803,
            "Write a Python program that finds the length of the longest word in a given string.": 0.34146341463414637,
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.3333333333333333,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.32558139534883723,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.3225806451612903,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.3181818181818182,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.3157894736842105,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.3111111111111111,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.30508474576271183,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.30434782608695654
        },
        "avg_similarity_score": 0.192625302692401
    },
    {
        "instruction": "Write a Python program that checks if two lists are equal or not.",
        "output": "def check_equality(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True\n\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nprint(check_equality(list1, list2))",
        "most_similar_instructions": {
            "Create a Python program that checks if two strings are anagrams of each other.": 0.5925925925925927,
            "Write a Python program to concatenate two lists.": 0.5714285714285714,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5,
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.5,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4848484848484849,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.46153846153846156,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4444444444444445,
            "Create a Python program to check if a number is a perfect square or not.": 0.42857142857142855,
            "Generate a Python program to find the common elements from two lists.": 0.4,
            "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.": 0.4
        },
        "avg_similarity_score": 0.21650890859410749
    },
    {
        "instruction": "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.",
        "output": "sentence = \"I have a cat named Fluffy. Fluffy loves to sleep.\"\nwords = sentence.split()\nword_count = {}\n\nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\nprint(word_count)",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45454545454545453,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.4313725490196078,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.4210526315789474,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4186046511627907,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.40625,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.39999999999999997,
            "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'": 0.39999999999999997,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.39215686274509803,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3902439024390244,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.380952380952381
        },
        "avg_similarity_score": 0.23169850014811005
    },
    {
        "instruction": "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.",
        "output": "students = [\"Alice\", \"Charlie\", \"Bob\"]\nsorted_students = sorted(students)\nprint(sorted_students)",
        "most_similar_instructions": {
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5714285714285714,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.5,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.47619047619047616,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4571428571428571,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.42857142857142855,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.42105263157894735,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.4150943396226415,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.41025641025641024,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.3902439024390244,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.3829787234042554
        },
        "avg_similarity_score": 0.23706260246679722
    },
    {
        "instruction": "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.",
        "output": "def is_palindrome(input_string):\n    return input_string == input_string[::-1]\n\nstring = \"racecar\"\nif is_palindrome(string):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "most_similar_instructions": {
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5423728813559322,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.48888888888888893,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.46808510638297873,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4615384615384615,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.45614035087719296,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.45454545454545453,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.45,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4444444444444445,
            "Write a Python script that converts a given string to uppercase.": 0.4444444444444444
        },
        "avg_similarity_score": 0.23504140084359199
    },
    {
        "instruction": "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.",
        "output": "def calculate_digit_sum(number):\n    digit_sum = sum(int(digit) for digit in str(number))\n    return digit_sum\n\nnumber = 12345\nsum_of_digits = calculate_digit_sum(number)\nprint(sum_of_digits)",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.588235294117647,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5853658536585366,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.5454545454545455,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.5263157894736842,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.4878048780487805,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.4878048780487805,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.48648648648648646,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.48
        },
        "avg_similarity_score": 0.28543682716105173
    },
    {
        "instruction": "Given a list called \"words\", write a Python script that concatenates all the words in the list to form a single sentence and prints it.",
        "output": "words = [\"Hello\", \"world\", \"!\"]\nsentence = \" \".join(words)\nprint(sentence)",
        "most_similar_instructions": {
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.5652173913043478,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.5,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4782608695652174,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.4444444444444445,
            "Design a Python function that reverses the order of words in a given sentence.": 0.41025641025641024,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.391304347826087,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.3859649122807018,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.3846153846153846,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.37499999999999994,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.3673469387755102
        },
        "avg_similarity_score": 0.2381782112544454
    },
    {
        "instruction": "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.",
        "output": "def sort_numbers_descending(numbers_list):\n    sorted_numbers = sorted(numbers_list, reverse=True)\n    return sorted_numbers\n\nnumbers = [5, 3, 8, 1, 2]\nsorted_numbers = sort_numbers_descending(numbers)\nprint(sorted_numbers)",
        "most_similar_instructions": {
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5964912280701754,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5957446808510638,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5957446808510638,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5909090909090908,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5909090909090908,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5777777777777778,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5614035087719298,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5599999999999999,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.5454545454545454,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.5384615384615384
        },
        "avg_similarity_score": 0.28796892469030444
    },
    {
        "instruction": "Given a dictionary called \"person\", write a Python script that prints the values of the dictionary in alphabetical order.",
        "output": "person = {\"name\": \"Alice\", \"age\": 30, \"country\": \"USA\"}\nsorted_values = [value for _, value in sorted(person.items())]\nprint(sorted_values)",
        "most_similar_instructions": {
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.6,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.5217391304347826,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.48484848484848486,
            "Generate a Python script that swaps the values of two variables.": 0.4666666666666667,
            "Write a Python program that finds the length of the longest word in a given string.": 0.45714285714285713,
            "Given a list called \"words\", write a Python script that concatenates all the words in the list to form a single sentence and prints it.": 0.45454545454545453,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.45,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.4444444444444444,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.4186046511627907,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.41025641025641024
        },
        "avg_similarity_score": 0.24200040586972413
    },
    {
        "instruction": "Given a list called \"strings\", write a Python script that checks if all the strings in the list start with an uppercase letter and prints \"Yes\" if they do, and \"No\" if they don't.",
        "output": "def all_uppercase(strings_list):\n    return all(string[0].isupper() for string in strings_list)\n\nstrings = [\"Apple\", \"Banana\", \"cherry\"]\nif all_uppercase(strings):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "most_similar_instructions": {
            "Given a list called \"words\", write a Python script that concatenates all the words in the list to form a single sentence and prints it.": 0.5333333333333333,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.4666666666666667,
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.4642857142857143,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.39285714285714285,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.3870967741935484,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.3793103448275862,
            "Given a dictionary called \"person\", write a Python script that prints the values of the dictionary in alphabetical order.": 0.37037037037037035,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.360655737704918,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.32727272727272727,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.29850746268656714
        },
        "avg_similarity_score": 0.19069155436258667
    },
    {
        "instruction": "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]",
        "output": "def get_largest_element(numbers):\n    return max(numbers)\n\nnumbers = [10, 2, 34, 56, 8]\nlargest_num = get_largest_element(numbers)\nprint(largest_num)",
        "most_similar_instructions": {
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.6,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5454545454545454,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5238095238095238,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5142857142857143,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5116279069767442,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5116279069767442,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.4878048780487805,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.4864864864864864,
            "Design a Python function that removes all duplicates from a given list.": 0.4848484848484849
        },
        "avg_similarity_score": 0.27837495661872863
    },
    {
        "instruction": "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]",
        "output": "def find_intersection(list1, list2):\n    return list(set(list1) & set(list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nintersection = find_intersection(list1, list2)\nprint(intersection)",
        "most_similar_instructions": {
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5599999999999999,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.55,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.5454545454545454,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5116279069767442,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.5106382978723404,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.5,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.4888888888888889,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.47619047619047616,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.47619047619047616,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.47058823529411764
        },
        "avg_similarity_score": 0.23413118409035083
    },
    {
        "instruction": "Design a Python function to convert a given string to title case.",
        "output": "def title_case(string):\n    return ' '.join(word.capitalize() for word in string.split())\n\nstring = \"python code generation task\"\ntitlecased_string = title_case(string)\nprint('Titlecased String:', titlecased_string)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5925925925925926,
            "Write a Python function that converts a sentence into title case.": 0.5217391304347826,
            "Write a Python function to reverse a given list of integers.": 0.5217391304347826,
            "Write a Python script that converts a given string to uppercase.": 0.5217391304347826,
            "How can you implement a Python function to reverse a string?": 0.5217391304347826,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.5142857142857143,
            "Design a Python function that removes all duplicates from a given list.": 0.5,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4615384615384615,
            "Write a Python function to check if a given year is a leap year.": 0.4615384615384615,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4615384615384615
        },
        "avg_similarity_score": 0.24750734381878572
    },
    {
        "instruction": "Design a Python class that represents a book, which has attributes like title, author, and number of pages.",
        "output": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\nbook = Book(\"Harry Potter\", \"J.K. Rowling\", 400)\nprint('Book Title:', book.title)\nprint('Book Author:', book.author)\nprint('Number of Pages:', book.pages)",
        "most_similar_instructions": {
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.5333333333333333,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.5294117647058824,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.4848484848484848,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.46511627906976744,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4444444444444445,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.43478260869565216,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.40909090909090906,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.3829787234042554,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.3829787234042554
        },
        "avg_similarity_score": 0.2180321503317001
    },
    {
        "instruction": "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'",
        "output": "csv_string = '1,2,3,4,5'\ninteger_list = [int(num) for num in csv_string.split(',')]\nprint(integer_list)",
        "most_similar_instructions": {
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.5306122448979592,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5116279069767442,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5116279069767442,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.48780487804878053,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.4782608695652174,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4615384615384615,
            "Write a Python function to reverse a given list of integers.": 0.4571428571428572,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4528301886792453,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4444444444444445,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4444444444444445
        },
        "avg_similarity_score": 0.25294441907783954
    },
    {
        "instruction": "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'",
        "output": "import re\n\ndef check_valid_email(email):\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n\ninput_email = 'example@email.com'\nprint(check_valid_email(input_email))",
        "most_similar_instructions": {
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.6,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5483870967741935,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.5283018867924528,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.4444444444444445,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.41860465116279066,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.41666666666666663,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.39215686274509803,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.3829787234042553,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.38095238095238093,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.3793103448275862
        },
        "avg_similarity_score": 0.20681442188082452
    },
    {
        "instruction": "Write a Python script that outputs the current date and time in the format: 'YYYY-MM-DD HH:MM:SS'.",
        "output": "from datetime import datetime\n\ncurrent_datetime = datetime.now()\nformatted_datetime = current_datetime.strftime('%Y-%m-%d %H:%M:%S')\nprint('Current date and time:', formatted_datetime)",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4117647058823529,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.4000000000000001,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.3902439024390244,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3902439024390244,
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.3902439024390244,
            "What is the Python code to get the current date and time?": 0.37499999999999994,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3636363636363636,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.36000000000000004,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.358974358974359,
            "Given a dictionary called \"person\", write a Python script that prints the values of the dictionary in alphabetical order.": 0.358974358974359
        },
        "avg_similarity_score": 0.2214033698610792
    },
    {
        "instruction": "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).",
        "output": "def calculate_matrix_sum(matrix):\n    return sum(sum(row) for row in matrix)",
        "most_similar_instructions": {
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.5714285714285715,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4888888888888888,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.48648648648648646,
            "Create a Python function to find the maximum value in a list of numbers.": 0.45161290322580644,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.45,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.45,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.4444444444444444,
            "Write a Python program to count the frequency of each element in a given list.": 0.43749999999999994,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4324324324324324,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.42105263157894735
        },
        "avg_similarity_score": 0.2144746136329756
    },
    {
        "instruction": "Produce a Python code snippet to concatenate two dictionaries.",
        "output": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nconcatenated_dict = {**dict1, **dict2}\nprint(concatenated_dict)",
        "most_similar_instructions": {
            "Write a Python program to concatenate two lists.": 0.5882352941176471,
            "Can you suggest a Python code snippet to concatenate two strings?\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5833333333333334,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.5384615384615384,
            "What is the Python code to concatenate two lists into one list?": 0.4761904761904762,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.4545454545454546,
            "Can you write a Python script to concatenate two strings and print the result?": 0.43478260869565216,
            "Provide a code snippet to reverse a string in Python.": 0.4210526315789474,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4166666666666667,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.39999999999999997,
            "Write Python code to swap two variables without using a temporary variable.": 0.380952380952381
        },
        "avg_similarity_score": 0.1846060395515225
    },
    {
        "instruction": "Write a Python program to compute the factorial of a non-negative integer using iterative approach.",
        "output": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact",
        "most_similar_instructions": {
            "Generate a Python program to calculate the power of a number using recursion.": 0.5517241379310345,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.5517241379310345,
            "Write a Python program to count the frequency of each element in a given list.": 0.5161290322580646,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.47058823529411764,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.47058823529411764,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4666666666666667,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.4375,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4375,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.42424242424242425,
            "Write a Python program to concatenate two lists.": 0.4166666666666667
        },
        "avg_similarity_score": 0.24872042185623236
    },
    {
        "instruction": "Implement a Python function to check if two given strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.",
        "output": "def is_anagram(word1, word2):\n    return sorted(word1) == sorted(word2)",
        "most_similar_instructions": {
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.4210526315789474,
            "Write a Python function to check if a given year is a leap year.": 0.4090909090909091,
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.4,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.36363636363636365,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.3571428571428571,
            "Create a Python program to check if a number is a perfect square or not.": 0.3555555555555555,
            "Create a Python function to check if a given year is a leap year or not. A leap year is divisible by 4 but not divisible by 100, unless it is also divisible by 400.": 0.3384615384615384,
            "Write Python code to check if a given list is empty or not.": 0.32558139534883723,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.32142857142857145,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.32
        },
        "avg_similarity_score": 0.19571093373964202
    },
    {
        "instruction": "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.",
        "output": "def calculate_power(base, exponent):\n    return base ** exponent",
        "most_similar_instructions": {
            "Generate a Python program to calculate the power of a number using recursion.": 0.5,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.4897959183673469,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.47826086956521735,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4583333333333333,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.4444444444444445,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.4313725490196078,
            "Write a Python function that calculates the factorial of a number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.\nNumber: 5": 0.4262295081967213,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.425531914893617,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.4166666666666667,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.409090909090909
        },
        "avg_similarity_score": 0.24967169226791397
    },
    {
        "instruction": "Write a Python program that calculates the Euclidean distance between two points (x1, y1) and (x2, y2).",
        "output": "import math\n\ndef euclidean_distance(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance\n\nx1 = float(input('Enter x1: '))\ny1 = float(input('Enter y1: '))\nx2 = float(input('Enter x2: '))\ny2 = float(input('Enter y2: '))\ndistance = euclidean_distance(x1, y1, x2, y2)\nprint('Distance:', distance)",
        "most_similar_instructions": {
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.5,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.45714285714285713,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.4444444444444444,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.41025641025641024,
            "Write a Python program that checks if two lists are equal or not.": 0.4000000000000001,
            "Write a Python program to concatenate two lists.": 0.4,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.3870967741935484,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.3870967741935484,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.37837837837837834,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.37500000000000006
        },
        "avg_similarity_score": 0.2277965022630137
    },
    {
        "instruction": "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"",
        "output": "def is_anagram(s1, s2):\n    return sorted(s1.lower()) == sorted(s2.lower())\n\nstring1 = \"listen\"\nstring2 = \"silent\"\nis_anagram = is_anagram(string1, string2)\nprint(is_anagram)",
        "most_similar_instructions": {
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5945945945945945,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5116279069767442,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5000000000000001,
            "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"": 0.5,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4888888888888889,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.45454545454545453,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4444444444444444,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.43902439024390244,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.43243243243243246,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.41025641025641024
        },
        "avg_similarity_score": 0.2358140077208736
    },
    {
        "instruction": "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"",
        "output": "def reverse_string(input_string):\n    return input_string[::-1]\n\ninput_string = \"This is a test string\"\nreversed_string = reverse_string(input_string)\nprint(reversed_string)",
        "most_similar_instructions": {
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5454545454545454,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5263157894736842,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4864864864864865,
            "Create a Python function that takes a string and checks if it is a valid palindrome. Ignore spaces, capitalization, and punctuation.\n\"Madam Arora teaches malayalam\"": 0.46511627906976744,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.46511627906976744,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.45,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4444444444444444,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4390243902439025,
            "Design a Python function that reverses the order of words in a given sentence.": 0.43750000000000006
        },
        "avg_similarity_score": 0.26603063785263076
    },
    {
        "instruction": "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"",
        "output": "def count_vowels(input_string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in input_string:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\ninput_string = \"This is another test\"\nnum_vowels = count_vowels(input_string)\nprint(\"Number of vowels:\", num_vowels)",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5454545454545455,
            "Write Python code to find the number of vowels in a given string.": 0.5,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.4888888888888889,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4651162790697674,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4444444444444445,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.4444444444444445,
            "Design a Python function that reverses the order of words in a given sentence.": 0.43902439024390244,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.4313725490196078,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.425531914893617,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4166666666666667
        },
        "avg_similarity_score": 0.265310844767985
    },
    {
        "instruction": "Write a Python program that rolls a dice and prints the number rolled.",
        "output": "import random\n\ndef roll_dice():\n    return random.randint(1, 6)\n\nprint(\"Number rolled:\", roll_dice())",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5925925925925927,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5294117647058824,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.5294117647058824,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.5,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.4999999999999999,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.4848484848484849,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.47058823529411764,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.47058823529411764,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4666666666666667,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.45161290322580644
        },
        "avg_similarity_score": 0.2905319537107586
    },
    {
        "instruction": "Write Python code to generate all possible permutations of a given list of elements.",
        "output": "import itertools\n\ndef generate_permutations(lst):\n    permutations = list(itertools.permutations(lst))\n    return permutations\n\nlst = [1, 2, 3]\npermutations = generate_permutations(lst)\nprint(permutations)",
        "most_similar_instructions": {
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5625000000000001,
            "Write a Python function to reverse a given list of integers.": 0.56,
            "Write Python code to check if a given list is empty or not.": 0.5185185185185186,
            "Write Python code to find the number of vowels in a given string.": 0.5185185185185186,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.5,
            "Please write a Python function to generate a random password of a given length.": 0.5,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.48484848484848486,
            "Write a Python program to count the frequency of each element in a given list.": 0.4827586206896552,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.47058823529411764,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.4666666666666667
        },
        "avg_similarity_score": 0.23750689561125848
    },
    {
        "instruction": "Write Python code to calculate the Euclidean distance between two points in a two-dimensional space.",
        "output": "import math\n\ndef calculate_distance(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance\n\nx1, y1 = 1, 2\nx2, y2 = 3, 4\ndistance = calculate_distance(x1, y1, x2, y2)\nprint(distance)",
        "most_similar_instructions": {
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.5714285714285714,
            "Write a Python program that calculates the Euclidean distance between two points (x1, y1) and (x2, y2).": 0.48484848484848486,
            "Write Python code to find the number of vowels in a given string.": 0.4827586206896552,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.45714285714285713,
            "What is the Python code to calculate the length of a string?": 0.42857142857142855,
            "Write Python code to swap two variables without using a temporary variable.": 0.42857142857142855,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.42424242424242425,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.41379310344827586,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.411764705882353,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.411764705882353
        },
        "avg_similarity_score": 0.1996619445985953
    },
    {
        "instruction": "Write Python code to rotate a list to the right by a specified number of steps.",
        "output": "def rotate_list_right(lst, steps):\n    rotate_steps = steps % len(lst)\n    rotated_lst = lst[-rotate_steps:] + lst[:-rotate_steps]\n    return rotated_lst\n\nlst = [1, 2, 3, 4, 5]\nsteps = 2\nrotated_lst = rotate_list_right(lst, steps)\nprint(rotated_lst)",
        "most_similar_instructions": {
            "Write Python code to find the number of vowels in a given string.": 0.4827586206896552,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.4666666666666667,
            "Write a Python function to reverse a given list of integers.": 0.4444444444444444,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.42424242424242425,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.41379310344827586,
            "Write Python code to check if a given list is empty or not.": 0.41379310344827586,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.411764705882353,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.411764705882353,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.40909090909090917,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.39999999999999997
        },
        "avg_similarity_score": 0.2316550332480277
    },
    {
        "instruction": "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```",
        "output": "def find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nlst = [3, 5, 1, 9, 2]\nresult = find_max_element(lst)\nprint(result)",
        "most_similar_instructions": {
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.37037037037037035,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.3508771929824562,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.34375,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.3333333333333333,
            "Write Python code to find the number of vowels in a given string.": 0.32,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.3157894736842105,
            "Create a Python function to find the maximum value in a list of numbers.": 0.3137254901960784,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.3103448275862069,
            "Write a Python program to count the frequency of each element in a given list.": 0.3076923076923077,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.30000000000000004
        },
        "avg_similarity_score": 0.1401119791380281
    },
    {
        "instruction": "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!",
        "output": "def count_characters(s):\n    char_frequency = {}\n    for char in s:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    return char_frequency\n\nstring = \"Hello, World!\"\nresult = count_characters(string)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.5901639344262296,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5714285714285714,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5581395348837209,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.5116279069767442,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.5,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4888888888888889,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.48000000000000004,
            "Implement a Python function called \"calculate_exponent\" that takes a base and an exponent as input and calculates the value of the base raised to the exponent.": 0.47058823529411764,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4615384615384615
        },
        "avg_similarity_score": 0.25781017882401
    },
    {
        "instruction": "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}",
        "output": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nconcatenated_dict = {**dict1, **dict2}\nprint(concatenated_dict)",
        "most_similar_instructions": {
            "Write a Python program to concatenate two lists.": 0.56,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.5333333333333333,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.5294117647058824,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.48780487804878053,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.4666666666666667,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.46153846153846156,
            "Can you write a Python script to concatenate two strings and print the result?": 0.45161290322580644,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.4444444444444444,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.42424242424242425,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.42105263157894735
        },
        "avg_similarity_score": 0.2524580684245367
    },
    {
        "instruction": "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']",
        "output": "char_list = ['h', 'e', 'l', 'l', 'o']\nstring = ''.join(char_list)\nprint(string)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5142857142857143,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.4848484848484848,
            "Write a Python function that converts a sentence into title case.": 0.4827586206896552,
            "Write a Python script that converts a given string to uppercase.": 0.4827586206896552,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.4782608695652174,
            "Write a Python program that finds the length of the longest word in a given string.": 0.47058823529411764,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4666666666666666,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.45161290322580644,
            "Create a Python program that generates all possible combinations of a given string.": 0.45161290322580644,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.45
        },
        "avg_similarity_score": 0.2614238851865235
    },
    {
        "instruction": "Complete the following Python function that converts Fahrenheit temperature to Celsius.\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5/9)",
        "output": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5/9)\n    return celsius",
        "most_similar_instructions": {
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.5142857142857143,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.3333333333333333,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.2916666666666667,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.2777777777777778,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.2727272727272727,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.25641025641025644,
            "Write a Python function that converts a sentence into title case.": 0.25,
            "Write a Python script that converts a given string to uppercase.": 0.25,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.24390243902439024,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.24390243902439024
        },
        "avg_similarity_score": 0.12823655085204919
    },
    {
        "instruction": "Provide the missing code to divide each element in the given list by 2 and store the results in a new list.\nnumbers = [2, 4, 6, 8]\ndivided_numbers = []\n\nfor number in numbers:\n    # missing code goes here",
        "output": "numbers = [2, 4, 6, 8]\ndivided_numbers = []\n\nfor number in numbers:\n    divided_numbers.append(number / 2)\nprint(divided_numbers)",
        "most_similar_instructions": {
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.39436619718309857,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3448275862068966,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.28571428571428575,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.2857142857142857,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.28125,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.28125,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.2807017543859649,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.27586206896551724,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.273972602739726,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.27118644067796616
        },
        "avg_similarity_score": 0.13595461535118578
    },
    {
        "instruction": "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]",
        "output": "numbers = [5, 2, 8, 1, 9]\nnumbers.sort()\nprint(numbers)",
        "most_similar_instructions": {
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.5945945945945946,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5294117647058824,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5294117647058824,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.45,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.45,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.4390243902439024,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.4324324324324324,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4000000000000001
        },
        "avg_similarity_score": 0.1944376673936072
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''",
        "output": "import requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''\n    response = requests.get(url)\n    return response.text",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.38095238095238093,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.3018867924528302,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.29629629629629634,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.29508196721311475,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.29090909090909084,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.29090909090909084,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.2857142857142857,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.27586206896551724,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.2745098039215686,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.2711864406779661
        },
        "avg_similarity_score": 0.1747785239719229
    },
    {
        "instruction": "Provide the missing code to iterate over the keys and values of the given dictionary.\nfruits = {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n\nfor key, value in fruits.______():\n    # missing code goes here",
        "output": "fruits = {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n\nfor key, value in fruits.items():\n    print(key, value)",
        "most_similar_instructions": {
            "Provide the missing code to divide each element in the given list by 2 and store the results in a new list.\nnumbers = [2, 4, 6, 8]\ndivided_numbers = []\n\nfor number in numbers:\n    # missing code goes here": 0.411764705882353,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.27586206896551724,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.25531914893617014,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.25,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.24489795918367346,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.24489795918367346,
            "Given a dictionary called \"person\", write a Python script that prints the values of the dictionary in alphabetical order.": 0.24000000000000002,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.23529411764705882,
            "What is the Python code to calculate the length of a string?": 0.2325581395348837,
            "What is the Python code to get the current date and time?": 0.2325581395348837
        },
        "avg_similarity_score": 0.11163456343978959
    },
    {
        "instruction": "How would you implement a Python script that parses XML data and extracts specific elements from it?",
        "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse('data.xml')\nroot = tree.getroot()\n\nfor element in root.iter('name'):\n    print(element.text)",
        "most_similar_instructions": {
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.5714285714285715,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4736842105263158,
            "How would you implement a Python script that accesses a MySQL database and executes a SELECT query to fetch all rows from a table named \"customers\"?": 0.46511627906976744,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.4444444444444444,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.43749999999999994,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.37500000000000006,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.36842105263157887,
            "How can you implement a Python function to reverse a string?": 0.35714285714285715,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.35,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.33333333333333337
        },
        "avg_similarity_score": 0.19390635819326454
    },
    {
        "instruction": "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]",
        "output": "def remove_duplicates(lst):\n    return list(set(lst))\n\ninput_list = [10, 20, 30, 20, 40, 10, 50]\nresult = remove_duplicates(input_list)\nprint(result)",
        "most_similar_instructions": {
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.5714285714285713,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5238095238095238,
            "How can you remove duplicate elements from a list in Python?": 0.4848484848484849,
            "Write a Python function to reverse a given list of integers.": 0.4848484848484849,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.46511627906976744,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.46153846153846156,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.45,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4444444444444445,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.43243243243243246,
            "How can you implement a Python function to reverse a string?": 0.4242424242424242
        },
        "avg_similarity_score": 0.23538136505890603
    },
    {
        "instruction": "Create a Python dictionary called \"students\" with keys as student names and values as their respective ages. Write a function to print the keys of the students who are above 18 years old.",
        "output": "students = {\n    \"John\": 20,\n    \"Sarah\": 22,\n    \"Michael\": 17,\n    \"Emily\": 19\n}\n\ndef print_adult_students(students):\n    for student, age in students.items():\n        if age > 18:\n            print(student)\n\nprint_adult_students(students)",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.48148148148148145,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.48000000000000004,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.43636363636363634,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.38596491228070173,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.37037037037037035,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.35714285714285715,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.3448275862068965,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.3333333333333333,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.32786885245901637,
            "Given a dictionary called \"person\", write a Python script that prints the values of the dictionary in alphabetical order.": 0.3076923076923077
        },
        "avg_similarity_score": 0.18003959515704882
    },
    {
        "instruction": "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"",
        "output": "string = \"madam\"\nis_palindrome = string == string[::-1]\nprint(is_palindrome)",
        "most_similar_instructions": {
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.5365853658536586,
            "Write Python code to check if a given list is empty or not.": 0.5263157894736842,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.48780487804878053,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.4615384615384615,
            "Create a Python program to check if a number is a perfect square or not.": 0.45,
            "What is the Python code to calculate the length of a string?": 0.43243243243243246,
            "Write a Python function to check if a given year is a leap year.": 0.41025641025641024,
            "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17": 0.4000000000000001,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.4
        },
        "avg_similarity_score": 0.18265994877880734
    },
    {
        "instruction": "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"",
        "output": "import string\n\ndef count_upper_lower(string):\n    uppercase_count = sum(1 for char in string if char.isupper())\n    lowercase_count = sum(1 for char in string if char.islower())\n    return uppercase_count, lowercase_count\n\nstring = \"Hello World\"\nupper_count, lower_count = count_upper_lower(string)\nprint(f\"Uppercase count: {upper_count}\")\nprint(f\"Lowercase count: {lower_count}\")",
        "most_similar_instructions": {
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.588235294117647,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5405405405405405,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5294117647058824,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5142857142857143,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.5128205128205129,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.5106382978723405,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5106382978723405,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5,
            "Write Python code to find the number of vowels in a given string.": 0.4848484848484849,
            "Create a Python program that generates all possible combinations of a given string.": 0.4848484848484849
        },
        "avg_similarity_score": 0.2785894611733917
    },
    {
        "instruction": "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.",
        "output": "name = input('Enter a name: ')\nage = int(input('Enter an age: '))\n\ninfo_dict = {\n    'Name': name,\n    'Age': age\n}\n\nprint('Information stored:', info_dict)",
        "most_similar_instructions": {
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.5853658536585366,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5714285714285714,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5365853658536585,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.5098039215686274,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5098039215686274,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5,
            "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.": 0.49056603773584906,
            "Create a Python script that prompts the user to enter their age and prints whether they are a minor, an adult, or a senior citizen.": 0.4782608695652174,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.46511627906976744,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.4528301886792453
        },
        "avg_similarity_score": 0.2575410226327317
    },
    {
        "instruction": "Create a Python program that generates a random integer and prints whether it is even or odd.",
        "output": "import random\n\nnumber = random.randint(1, 100)\nif number % 2 == 0:\n    print(number, 'is even')\nelse:\n    print(number, 'is odd')",
        "most_similar_instructions": {
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.5714285714285715,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5531914893617021,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5294117647058824,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.48648648648648646,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4827586206896552,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.4736842105263158,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.4736842105263158,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4666666666666667,
            "Create a Python program that generates all possible combinations of a given string.": 0.4666666666666667,
            "Create a Python program to check if a number is a perfect square or not.": 0.43749999999999994
        },
        "avg_similarity_score": 0.23930911441363345
    },
    {
        "instruction": "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]",
        "output": "numbers = [18, 32, 12, 45, 67, 23]\nlargest = max(numbers)\nprint(largest)",
        "most_similar_instructions": {
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.5365853658536585,
            "Write Python code to find the number of vowels in a given string.": 0.5294117647058824,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4878048780487805,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4864864864864864,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.47619047619047616,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.4736842105263158,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.46511627906976744,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4571428571428571,
            "Generate a Python script to find and replace a specific word in a given string.": 0.4444444444444444,
            "Write a Python program to count the frequency of each element in a given list.": 0.4444444444444444
        },
        "avg_similarity_score": 0.22740662355142802
    },
    {
        "instruction": "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]",
        "output": "numbers = [4, 8, 12, 16, 20]\naverage = sum(numbers) / len(numbers)\nprint(average)",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5263157894736842,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5263157894736842,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.5,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.4878048780487805,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.4878048780487805,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.4864864864864865,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.4864864864864865,
            "Create a Python function to find the maximum value in a list of numbers.": 0.48484848484848486
        },
        "avg_similarity_score": 0.24780919391543718
    },
    {
        "instruction": "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]",
        "output": "def remove_even_numbers(numbers):\n return [num for num in numbers if num % 2 != 0]",
        "most_similar_instructions": {
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5957446808510638,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5777777777777778,
            "Write a Python function to reverse a given list of integers.": 0.5714285714285715,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5531914893617021,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5454545454545454,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5454545454545454,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5333333333333333,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.5238095238095238,
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.5217391304347826,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5
        },
        "avg_similarity_score": 0.26299602157952917
    },
    {
        "instruction": "Complete the Python code to print the current date and time in the format \"YYYY-MM-DD HH:MM:SS\".\nimport datetime\n\ndef print_current_datetime():\n    current_datetime = datetime.datetime.now()\n    print(current_datetime.strftime(\"%Y-%m-%d %H:%M:%S\"))",
        "output": "import datetime\n\ndef print_current_datetime():\n    current_datetime = datetime.datetime.now()\n    print(current_datetime.strftime(\"%Y-%m-%d %H:%M:%S\"))\n\nprint_current_datetime()",
        "most_similar_instructions": {
            "Write a Python script that outputs the current date and time in the format: 'YYYY-MM-DD HH:MM:SS'.": 0.4918032786885247,
            "What is the Python code to get the current date and time?": 0.339622641509434,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.22950819672131145,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.20689655172413793,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.2058823529411765,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.20512820512820515,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.19672131147540983,
            "What is the Python code to calculate the length of a string?": 0.18867924528301888,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.18666666666666668,
            "Write Python code to find the number of vowels in a given string.": 0.18518518518518517
        },
        "avg_similarity_score": 0.10203449719740545
    },
    {
        "instruction": "Suggest a Python code that finds and prints the maximum element from a given list of numbers.",
        "output": "def find_max(numbers):\n    return max(numbers)",
        "most_similar_instructions": {
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5789473684210527,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.5789473684210527,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5625,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5405405405405405,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5161290322580646,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5161290322580646,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.5,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.48648648648648646
        },
        "avg_similarity_score": 0.28415118663457334
    },
    {
        "instruction": "Complete the Python code to check if a given number is prime or not.\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number/2) + 1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False",
        "output": "def is_prime(number):\n    if number > 1:\n        for i in range(2, int(number/2) + 1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False\n\nprint(is_prime(17))",
        "most_similar_instructions": {
            "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17": 0.42424242424242425,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.3943661971830986,
            "Write Python code to check if a given list is empty or not.": 0.37037037037037035,
            "Complete the implementation of the Python code which calculates the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nInput: 5": 0.3611111111111111,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.33333333333333337,
            "Create a Python program to check if a number is a perfect square or not.": 0.32142857142857145,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.30769230769230765,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.29508196721311475,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.2941176470588235,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.29090909090909095
        },
        "avg_similarity_score": 0.12886095737878045
    },
    {
        "instruction": "Write a Python function that checks whether a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors.",
        "output": "def is_perfect_number(num):\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    sum_divisors = sum(divisors)\n    return num == sum_divisors\n\nnumber = 6\nresult = is_perfect_number(number)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.5714285714285713,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4680851063829786,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.4528301886792453,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.41666666666666663,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.37931034482758624,
            "Create a Python program to check if a number is a perfect square or not.": 0.37499999999999994,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.36363636363636365,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.36,
            "Write a Python function that calculates the factorial of a number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.\nNumber: 5": 0.35820895522388063
        },
        "avg_similarity_score": 0.22033132166179722
    },
    {
        "instruction": "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"",
        "output": "import string\n\ndef remove_punctuation(sentence):\n table = str.maketrans(\"\", \"\", string.punctuation)\n return sentence.translate(table)\n\nuser_input = input(\"Enter a sentence: \")\nresult = remove_punctuation(user_input)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5777777777777778,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.5454545454545455,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5217391304347826,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4814814814814815,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.47826086956521735,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.47619047619047616,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.47058823529411764,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.4680851063829788,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4680851063829788,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.4666666666666667
        },
        "avg_similarity_score": 0.25554575335397844
    },
    {
        "instruction": "Write a Python function that finds the highest common factor (HCF) of two numbers.",
        "output": "def find_hcf(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\nnumber1 = 12\nnumber2 = 8\nresult = find_hcf(number1, number2)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5333333333333333,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.5185185185185186,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4864864864864865,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.48484848484848486,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.4799999999999999,
            "Generate a Python script that swaps the values of two variables.": 0.4799999999999999,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4666666666666667,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4571428571428571,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45161290322580644
        },
        "avg_similarity_score": 0.2594982289808273
    },
    {
        "instruction": "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.",
        "output": "class Person:\n    def __init__(self, name, age, occupation):\n        self.name = name\n        self.age = age\n        self.occupation = occupation\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_occupation(self):\n        return self.occupation\n\n    def set_name(self, name):\n        self.name = name\n\n    def set_age(self, age):\n        self.age = age\n\n    def set_occupation(self, occupation):\n        self.occupation = occupation\n\nperson = Person(\"John\", 30, \"Engineer\")\nprint(person.get_name())\nprint(person.get_age())\nprint(person.get_occupation())\nperson.set_name(\"Jane\")\nperson.set_age(35)\nperson.set_occupation(\"Doctor\")\nprint(person.get_name())\nprint(person.get_age())\nprint(person.get_occupation())",
        "most_similar_instructions": {
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.52,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.49056603773584906,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.47058823529411764,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.4615384615384615,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.4571428571428572,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.43478260869565216,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.4186046511627907,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4166666666666667,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.4150943396226415,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.4
        },
        "avg_similarity_score": 0.2126341891148354
    },
    {
        "instruction": "Write a Python program to swap the values of two variables.\nx = 5\ny = 10",
        "output": "x = 5\ny = 10\n\nx, y = y, x\n\nprint(\"x:\", x)\nprint(\"y:\", y)",
        "most_similar_instructions": {
            "Generate a Python script that swaps the values of two variables.": 0.5384615384615385,
            "Write a Python program to concatenate two lists.": 0.5217391304347827,
            "Write a Python program to count the frequency of each element in a given list.": 0.4666666666666667,
            "Write a Python program to compute the factorial of a non-negative integer using iterative approach.": 0.45161290322580644,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.45161290322580644,
            "Generate a Python program to find the common elements from two lists.": 0.4444444444444445,
            "Write Python code to swap two variables without using a temporary variable.": 0.4444444444444445,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.43749999999999994,
            "Generate a Python program to calculate the power of a number using recursion.": 0.42857142857142855,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.42857142857142855
        },
        "avg_similarity_score": 0.24112225833663173
    },
    {
        "instruction": "Write a Python program to find the sum of all multiples of 3 or 5 below 1000.",
        "output": "total = 0\nfor i in range(1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\nprint(total)",
        "most_similar_instructions": {
            "Write a Python program to swap the values of two variables.\nx = 5\ny = 10": 0.5,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4736842105263158,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.46153846153846156,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.45714285714285713,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.45714285714285713,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.4390243902439025,
            "Write a Python program to count the frequency of each element in a given list.": 0.43749999999999994,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.4324324324324324,
            "Create a Python program to find the first n Fibonacci numbers.": 0.42857142857142855,
            "Write a Python program to compute the factorial of a non-negative integer using iterative approach.": 0.42424242424242425
        },
        "avg_similarity_score": 0.23915990546003388
    },
    {
        "instruction": "Write a Python program to find the majority element in a given list of integers (the element that appears more than half of the time).",
        "output": "def majority_element(numbers):\n    counts = {}\n\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    for num, count in counts.items():\n        if count > len(numbers) / 2:\n            return num\n\nnumbers = [1, 2, 3, 3, 3, 4, 3, 3, 5, 3, 3]\nprint(majority_element(numbers))",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5499999999999999,
            "Write a Python function to reverse a given list of integers.": 0.5,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.46511627906976744,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4615384615384615,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4583333333333333,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.4583333333333333,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4444444444444445,
            "Write a Python program to find the sum of all multiples of 3 or 5 below 1000.": 0.42857142857142855,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.42857142857142855,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.42857142857142855
        },
        "avg_similarity_score": 0.26173039067891674
    },
    {
        "instruction": "How would you write a Python function that checks whether a given list is empty or not?\nlst = []",
        "output": "def is_empty(lst):\n    if len(lst) == 0:\n        return True\n    else:\n        return False\n\nlst = []\nis_empty = is_empty(lst)\nprint(is_empty)",
        "most_similar_instructions": {
            "Write Python code to check if a given list is empty or not.": 0.5806451612903226,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5789473684210527,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5625000000000001,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.55,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5454545454545454,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5263157894736842,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5128205128205129,
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.5,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.4848484848484848
        },
        "avg_similarity_score": 0.2733707119183171
    },
    {
        "instruction": "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3",
        "output": "def calculate_power(base, exponent):\n    result = base ** exponent\n    return result\n\nbase = 2\nexponent = 3\npower = calculate_power(base, exponent)\nprint(power)",
        "most_similar_instructions": {
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.6,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5333333333333332,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5116279069767442,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5000000000000001,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5000000000000001,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.4878048780487805,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4799999999999999,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.47619047619047616,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.47619047619047616,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.46153846153846156
        },
        "avg_similarity_score": 0.28795493528164334
    },
    {
        "instruction": "Create a Python program that extracts all links from a given website URL.\nWebsite URL: 'https://www.google.com'",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.google.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\nprint(links)",
        "most_similar_instructions": {
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.45714285714285713,
            "Design a Python function that removes all duplicates from a given list.": 0.4516129032258065,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.4117647058823529,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4117647058823529,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.4117647058823529,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.39999999999999997,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.3888888888888889,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.3870967741935484,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.37837837837837834
        },
        "avg_similarity_score": 0.21047786960379594
    },
    {
        "instruction": "Implement a Python class to store and manipulate a 2D matrix. The class should have methods to initialize the matrix, get the value at a particular cell, set the value at a particular cell, and print the matrix.",
        "output": "class Matrix:\n    def __init__(self, rows, cols):\n        self.rows = rows\n        self.cols = cols\n        self.matrix = [[0] * cols for _ in range(rows)]\n\n    def get_value(self, row, col):\n        if row < 0 or row >= self.rows or col < 0 or col >= self.cols:\n            return None\n        return self.matrix[row][col]\n\n    def set_value(self, row, col, value):\n        if row < 0 or row >= self.rows or col < 0 or col >= self.cols:\n            return\n        self.matrix[row][col] = value\n\n    def print_matrix(self):\n        for row in self.matrix:\n            print(row)\n\n# Example usage:\nmatrix = Matrix(3, 3)\nmatrix.set_value(0, 0, 1)\nmatrix.set_value(1, 1, 2)\nmatrix.set_value(2, 2, 3)\nmatrix.print_matrix()\nprint(matrix.get_value(1, 1))",
        "most_similar_instructions": {
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.40625000000000006,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.3870967741935484,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.3466666666666667,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.34285714285714286,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.3283582089552239,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.32352941176470584,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.3174603174603174,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.30769230769230765,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.2985074626865672,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.2950819672131147
        },
        "avg_similarity_score": 0.16885607628528868
    },
    {
        "instruction": "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.",
        "output": "class BankAccount:\n    def __init__(self, initial_balance):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n\n    def withdraw(self, amount):\n        if amount > 0 and amount <= self.balance:\n            self.balance -= amount\n\n    def get_balance(self):\n        return self.balance\n\n# Example usage:\naccount = BankAccount(1000)\naccount.deposit(500)\naccount.withdraw(200)\nprint(\"Current balance:\", account.get_balance())",
        "most_similar_instructions": {
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.5245901639344263,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.5106382978723405,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4482758620689655,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.40579710144927533,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.375,
            "Implement a Python class to store and manipulate a 2D matrix. The class should have methods to initialize the matrix, get the value at a particular cell, set the value at a particular cell, and print the matrix.": 0.3714285714285715,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.3508771929824561,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.3448275862068966,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.3333333333333333
        },
        "avg_similarity_score": 0.1808496289451376
    },
    {
        "instruction": "Write a Python function that returns a list of all divisors of a given number.",
        "output": "def get_divisors(number):\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return divisors\n\nnum = 12\ndivisors_list = get_divisors(num)\nprint(divisors_list)",
        "most_similar_instructions": {
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.6,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5625,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5517241379310344,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5517241379310344,
            "Please write a Python function to generate a random password of a given length.": 0.5517241379310344,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.5384615384615385,
            "Write a Python function to reverse a given list of integers.": 0.5384615384615385,
            "Design a Python function that removes all duplicates from a given list.": 0.5185185185185186,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.5
        },
        "avg_similarity_score": 0.30084946183029804
    },
    {
        "instruction": "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.",
        "output": "class Calculator:\n    def add(self, num1, num2):\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        if num2 == 0:\n            return None\n        return num1 / num2\n\n# Example usage:\ncalculator = Calculator()\nprint(\"Addition:\", calculator.add(5, 3))\nprint(\"Subtraction:\", calculator.subtract(10, 7))\nprint(\"Multiplication:\", calculator.multiply(4, 6))\nprint(\"Division:\", calculator.divide(9, 3))",
        "most_similar_instructions": {
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5652173913043478,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.5185185185185185,
            "Write a Python class called \"Calculator\" with methods add(), subtract(), multiply(), and divide(). Implement these methods to perform the respective arithmetic operations on two numbers.": 0.5106382978723404,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4999999999999999,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.4864864864864865,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.4406779661016949,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.4313725490196078,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.4210526315789474,
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.39999999999999997,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.3913043478260869
        },
        "avg_similarity_score": 0.21121727453379258
    },
    {
        "instruction": "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.",
        "output": "class Library:\n    def __init__(self):\n        self.books = []\n\n    def add_book(self, book):\n        self.books.append(book)\n\n    def remove_book(self, book):\n        if book in self.books:\n            self.books.remove(book)\n\n    def search_by_title(self, title):\n        found_books = []\n        for book in self.books:\n            if book.title == title:\n                found_books.append(book)\n        return found_books\n\n    def search_by_author(self, author):\n        found_books = []\n        for book in self.books:\n            if book.author == author:\n                found_books.append(book)\n        return found_books\n\n# Example usage:\nlibrary = Library()\nbook1 = Book(\"Title 1\", \"Author 1\")\nbook2 = Book(\"Title 2\", \"Author 2\")\nlibrary.add_book(book1)\nlibrary.add_book(book2)\nlibrary.remove_book(book1)\nsearch_results = library.search_by_author(\"Author 2\")\nprint(\"Search results:\", search_results)",
        "most_similar_instructions": {
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.5555555555555556,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.46428571428571425,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.4375,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.41379310344827586,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.3934426229508197,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.37681159420289856,
            "Implement a Python class to store and manipulate a 2D matrix. The class should have methods to initialize the matrix, get the value at a particular cell, set the value at a particular cell, and print the matrix.": 0.3714285714285715,
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.36,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.3508771929824561,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.3404255319148936
        },
        "avg_similarity_score": 0.1853046215510246
    },
    {
        "instruction": "Write a Python script that replaces all occurrences of a specified word in a text with a different word.\ntext = \"I love apples, apples are my favorite fruit.\"\nReplace \"apples\" with \"oranges\".",
        "output": "def replace_word(text, old_word, new_word):\n    return text.replace(old_word, new_word)\n\ntext = \"I love apples, apples are my favorite fruit.\"\nold_word = \"apples\"\nnew_word = \"oranges\"\nreplaced_text = replace_word(text, old_word, new_word)\nprint(replaced_text)",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.3673469387755102,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.3396226415094339,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.3396226415094339,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.3389830508474576,
            "Write a Python program that finds the length of the longest word in a given string.": 0.3333333333333333,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.3278688524590164,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.32142857142857145,
            "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'": 0.3142857142857143,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.30434782608695654,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.3018867924528302
        },
        "avg_similarity_score": 0.1837130787653884
    },
    {
        "instruction": "How would you implement a Python program that counts the frequency of each word in a given text?\ntext = \"Python is a popular programming language. Python is used in web development, data analysis, and machine learning.\"",
        "output": "from collections import Counter\n\ndef count_word_frequency(text):\n    words = text.split()\n    return Counter(words)\n\ntext = \"Python is a popular programming language. Python is used in web development, data analysis, and machine learning.\"\nword_frequency = count_word_frequency(text)\nprint(word_frequency)",
        "most_similar_instructions": {
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.5,
            "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'": 0.4594594594594595,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.43333333333333335,
            "Write a Python program to count the frequency of each element in a given list.": 0.39215686274509803,
            "Write a Python program that finds the length of the longest word in a given string.": 0.3846153846153846,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.37931034482758624,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.3666666666666667,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.36363636363636365,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.3508771929824561,
            "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.": 0.3492063492063492
        },
        "avg_similarity_score": 0.20967796906053424
    },
    {
        "instruction": "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]",
        "output": "def remove_duplicates(nums):\n    return list(set(nums))\n\nnumbers = [2, 3, 5, 2, 8, 5]\nunique_numbers = remove_duplicates(numbers)\nprint(unique_numbers)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.6,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5581395348837209,
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.5365853658536586,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5263157894736842,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5128205128205129,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.4888888888888889,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.47058823529411764,
            "Write a Python function to reverse a given list of integers.": 0.4666666666666667
        },
        "avg_similarity_score": 0.25266534010646996
    },
    {
        "instruction": "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.",
        "output": "def count_upper_lower(string):\n    uppercase_count = sum(1 for char in string if char.isupper())\n    lowercase_count = sum(1 for char in string if char.islower())\n    return uppercase_count, lowercase_count",
        "most_similar_instructions": {
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.6,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.5641025641025641,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5641025641025641,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5454545454545455,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.5454545454545454,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5263157894736842,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4878048780487805,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4878048780487805,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.48648648648648646
        },
        "avg_similarity_score": 0.295047687536317
    },
    {
        "instruction": "Create a Python function that takes two strings as input and concatenates them with a space in between.",
        "output": "def concatenate_strings(str1, str2):\n    return str1 + ' ' + str2",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5625000000000001,
            "Write a program that accepts two strings as input and concatenates them using the '+' operator in Python.\n'Hello', 'World'": 0.5405405405405405,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5263157894736842,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5263157894736842,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.4864864864864865,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.4761904761904762,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.46511627906976744,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4545454545454546,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.4489795918367347,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4390243902439025
        },
        "avg_similarity_score": 0.24158516791278517
    },
    {
        "instruction": "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7",
        "output": "def print_multiplication_table(num):\n    for i in range(1, 11):\n        print(f\"{num} x {i} = {num * i}\")\n\nnumber = 7\nprint_multiplication_table(number)",
        "most_similar_instructions": {
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5142857142857142,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.5116279069767442,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5000000000000001,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4878048780487805,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4782608695652174,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4782608695652174,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.47619047619047616,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.46808510638297873,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.46808510638297873,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.46808510638297873
        },
        "avg_similarity_score": 0.2605903432510171
    },
    {
        "instruction": "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]",
        "output": "numbers = [5, 2, 9, 1, 7]\nnumbers.sort(reverse=True)\nprint(numbers)",
        "most_similar_instructions": {
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5641025641025641,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.5641025641025641,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5581395348837209,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.5405405405405405,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.5,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.48484848484848486,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.48484848484848486,
            "Provide a code snippet to reverse a string in Python.": 0.48275862068965514,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.45,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.42857142857142855
        },
        "avg_similarity_score": 0.19176866002169213
    },
    {
        "instruction": "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]",
        "output": "numbers = [1, 2, 3, 3, 4, 5, 5]\nunique_elements = list(set(numbers))\nprint(unique_elements)",
        "most_similar_instructions": {
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5333333333333333,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5116279069767442,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5116279069767442,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4888888888888889,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.4888888888888889,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.48000000000000004,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.4615384615384615,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4444444444444445,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.4186046511627907,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.41379310344827586
        },
        "avg_similarity_score": 0.1881506793890154
    },
    {
        "instruction": "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]",
        "output": "import math\n\ndef find_square_roots(numbers):\n    return [math.sqrt(number) for number in numbers]\n\nnumbers = [1, 4, 9, 16]\nsquare_roots = find_square_roots(numbers)\nprint(square_roots)",
        "most_similar_instructions": {
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5853658536585366,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5777777777777778,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5777777777777778,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5777777777777778,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5714285714285713,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.5714285714285713,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.5641025641025642,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.56,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5581395348837208,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5555555555555556
        },
        "avg_similarity_score": 0.28828015767125276
    },
    {
        "instruction": "What code would you write to check if a string contains only numeric characters in Python?\nstring = \"12345\"",
        "output": "string = \"12345\"\nis_numeric = string.isnumeric()\nprint(is_numeric)",
        "most_similar_instructions": {
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5454545454545454,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.47058823529411764,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.47058823529411764,
            "Provide a code snippet to reverse a string in Python.": 0.42857142857142855,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.42857142857142855,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4210526315789474,
            "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"": 0.39999999999999997,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.375,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.37209302325581395,
            "How can you convert a string to uppercase in Python?": 0.35714285714285715
        },
        "avg_similarity_score": 0.16796461692339304
    },
    {
        "instruction": "What code would you write to check if a given number is a perfect square in Python?\nnumber = 16",
        "output": "import math\n\nnumber = 16\nis_perfect_square = math.isqrt(number) ** 2 == number\nprint(is_perfect_square)",
        "most_similar_instructions": {
            "What code would you write to check if a string contains only numeric characters in Python?\nstring = \"12345\"": 0.5945945945945946,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.5454545454545454,
            "Create a Python program to check if a number is a perfect square or not.": 0.5294117647058824,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.5142857142857142,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5128205128205129,
            "Write a Python function to check if a given year is a leap year.": 0.48484848484848486,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.45714285714285713,
            "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"": 0.43902439024390244,
            "Write Python code to check if a given list is empty or not.": 0.4375,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4242424242424242
        },
        "avg_similarity_score": 0.18618305981010225
    },
    {
        "instruction": "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']",
        "output": "def sort_by_length(strings):\n    return sorted(strings, key=len)\n\nstrings = ['apple', 'banana', 'kiwi', 'orange', 'grapes']\nprint(sort_by_length(strings))",
        "most_similar_instructions": {
            "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]": 0.43333333333333335,
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.39215686274509803,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.3773584905660377,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.37499999999999994,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.36363636363636365,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.36000000000000004,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.3529411764705882,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.3529411764705882,
            "Write a Python function to reverse a given list of integers.": 0.34146341463414637,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.3404255319148936
        },
        "avg_similarity_score": 0.20448936821142108
    },
    {
        "instruction": "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"",
        "output": "def count_characters(string):\n    frequency = {}\n\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n\n    return frequency\n\nstring = \"apple\"\nprint(count_characters(string))",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5555555555555556,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.5490196078431373,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.4583333333333333,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.4444444444444445,
            "Write Python code to find the number of vowels in a given string.": 0.41176470588235287,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.41025641025641024,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4,
            "Given a dictionary called \"person\", write a Python script that prints the values of the dictionary in alphabetical order.": 0.4,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.3902439024390244
        },
        "avg_similarity_score": 0.24007652209573624
    },
    {
        "instruction": "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\nlength = 8\nprint(generate_password(length))",
        "most_similar_instructions": {
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.576923076923077,
            "Please write a Python function to generate a random password of a given length.": 0.5641025641025641,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5531914893617023,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.4897959183673469,
            "Write a Python program that generates a random password of given length. The password should include at least one lowercase letter, one uppercase letter, one digit, and one special character.\n10": 0.46428571428571425,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4210526315789474,
            "Create a Python function to find the maximum value in a list of numbers.": 0.41025641025641024,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.39999999999999997,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.391304347826087,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.391304347826087
        },
        "avg_similarity_score": 0.2372584605639292
    },
    {
        "instruction": "You are given two strings. Write a Python function to check if one string is an anagram of the other.\nstring1 = \"listen\"\nstring2 = \"silent\"",
        "output": "def is_anagram(string1, string2):\n    return sorted(string1) == sorted(string2)\n\nstring1 = \"listen\"\nstring2 = \"silent\"\nprint(is_anagram(string1, string2))",
        "most_similar_instructions": {
            "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"": 0.4782608695652174,
            "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"": 0.4782608695652174,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.4444444444444445,
            "Write a Python function to check if a given year is a leap year.": 0.4210526315789474,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4090909090909091,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.4,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.375,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.3703703703703704,
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.35897435897435903,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.35294117647058826
        },
        "avg_similarity_score": 0.20434584418489513
    },
    {
        "instruction": "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]",
        "output": "def find_largest_number(numbers):\n    return max(numbers)\n\nnumbers = [10, 5, 8, 3, 6]\nprint(find_largest_number(numbers))",
        "most_similar_instructions": {
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.5106382978723405,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.5,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.4912280701754386,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.44000000000000006,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.44000000000000006,
            "Create a Python function to find the maximum value in a list of numbers.": 0.43902439024390244,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.425531914893617,
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.4166666666666667,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.4166666666666667
        },
        "avg_similarity_score": 0.2374491702261527
    },
    {
        "instruction": "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]",
        "output": "numbers = [4, 7, 9, 11, 13]\n\naverage = sum(numbers) / len(numbers)\nrounded_average = round(average, 2)\n\nprint(\"Average:\", rounded_average)",
        "most_similar_instructions": {
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.6,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5531914893617021,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5306122448979592,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.4799999999999999,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.45833333333333337,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.4528301886792452,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.44,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4313725490196078,
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.425531914893617,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.40816326530612246
        },
        "avg_similarity_score": 0.26364930742999854
    },
    {
        "instruction": "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]",
        "output": "numbers = [5, 8, 3, 2, 10]\n\nlargest = max(numbers)\nsmallest = min(numbers)\n\nprint(\"Largest number:\", largest)\nprint(\"Smallest number:\", smallest)",
        "most_similar_instructions": {
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5641025641025641,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5365853658536585,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.5365853658536585,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5128205128205129,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.4878048780487805,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4878048780487805,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.47619047619047616,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.45161290322580644,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.4390243902439024
        },
        "avg_similarity_score": 0.26607776206987166
    },
    {
        "instruction": "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]",
        "output": "numbers = [1, 2, 3, 1, 2, 3, 4, 5]\n\nelement_count = {}\n\nfor num in numbers:\n    if num in element_count:\n        element_count[num] += 1\n    else:\n        element_count[num] = 1\n\nprint(\"Element Count:\", element_count)",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5909090909090909,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5833333333333334,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.576923076923077,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5652173913043478,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5531914893617023,
            "Write a Python program to count the frequency of each element in a given list.": 0.5499999999999999,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5454545454545454,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.5423728813559322,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.5416666666666667,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5416666666666667
        },
        "avg_similarity_score": 0.27852386704623855
    },
    {
        "instruction": "Write a Python function that finds the common elements from two given lists.\n['apple', 'banana', 'cherry', 'dragonfruit'], ['cherry', 'dragonfruit', 'guava', 'kiwi']",
        "output": "def find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\nlist1 = ['apple', 'banana', 'cherry', 'dragonfruit']\nlist2 = ['cherry', 'dragonfruit', 'guava', 'kiwi']\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)",
        "most_similar_instructions": {
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.5142857142857143,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.5128205128205129,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.4864864864864864,
            "Generate a Python program to find the common elements from two lists.": 0.4848484848484849,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.4,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.3888888888888889,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.38095238095238093,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.37837837837837834,
            "Write a Python program that finds the length of the longest word in a given string.": 0.37837837837837834,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.37499999999999994
        },
        "avg_similarity_score": 0.21716664714157316
    },
    {
        "instruction": "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''\n    for _ in range(length):\n        password += random.choice(characters)\n    return password\n\nlength = 8\npassword = generate_password(length)\nprint(password)",
        "most_similar_instructions": {
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.5454545454545454,
            "How can you generate a random integer between a given range in Python?": 0.5,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.4878048780487805,
            "How can you convert a string to uppercase in Python?": 0.48275862068965514,
            "How would you generate a random number between 1 and 100 using Python?": 0.4375,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4375,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.43243243243243246,
            "How can you remove duplicate elements from a list in Python?": 0.39999999999999997,
            "How can you find the length of a string using Python?": 0.39999999999999997,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.391304347826087
        },
        "avg_similarity_score": 0.1570556806595587
    },
    {
        "instruction": "Write a Python function that takes a string and replaces all occurrences of a given character with a new character.\nString: \"banana\", Old character: \"a\", New character: \"o\"",
        "output": "def replace_character(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\ninput_string = \"banana\"\nold_char = \"a\"\nnew_char = \"o\"\nresult = replace_character(input_string, old_char, new_char)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that returns a list of all divisors of a given number.": 0.46511627906976744,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.46153846153846156,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.45833333333333337,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4444444444444445,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4444444444444445,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.4262295081967213,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.425531914893617,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.40816326530612246,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.39999999999999997,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.391304347826087
        },
        "avg_similarity_score": 0.23676917476269443
    },
    {
        "instruction": "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4",
        "output": "def calculate_rectangle_area(length, breadth):\n    return length * breadth\n\nlength = 6\nbreadth = 4\narea = calculate_rectangle_area(length, breadth)\nprint(area)",
        "most_similar_instructions": {
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5555555555555556,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5365853658536585,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.5199999999999999,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5128205128205129,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.47619047619047616,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.4736842105263158,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.4736842105263158,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.47058823529411764,
            "Design a Python function that reverses the order of words in a given sentence.": 0.47058823529411764,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.45
        },
        "avg_similarity_score": 0.25402101617044465
    },
    {
        "instruction": "Create a Python function that checks if two given strings are anagrams. Anagrams are the strings that have the same characters but can be arranged in different orders.\nString 1: \"listen\", String 2: \"silent\"",
        "output": "def is_anagram(str1, str2):\n    sorted_str1 = sorted(str1)\n    sorted_str2 = sorted(str2)\n    return sorted_str1 == sorted_str2\n\ninput_str1 = \"listen\"\ninput_str2 = \"silent\"\nresult = is_anagram(input_str1, input_str2)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.4666666666666667,
            "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"": 0.46428571428571425,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.4333333333333333,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.4166666666666667,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.3636363636363637,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.3508771929824562,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.3448275862068966,
            "Implement a Python function to check if two given strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.": 0.34375,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.33333333333333337,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.33333333333333337
        },
        "avg_similarity_score": 0.18769082271204224
    },
    {
        "instruction": "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']",
        "output": "def convert_to_single_string(lst):\n    return ' '.join(lst)\n\nlst = ['Hello', 'world']\nresult = convert_to_single_string(lst)\nprint(result)",
        "most_similar_instructions": {
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.6,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.5384615384615384,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5263157894736842,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.5238095238095238,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5128205128205129,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.48780487804878053,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4761904761904762,
            "Write a Python function that returns a list of all divisors of a given number.": 0.4615384615384615,
            "Write a Python function that converts a sentence into title case.": 0.4571428571428572,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.45454545454545453
        },
        "avg_similarity_score": 0.2459192039064883
    },
    {
        "instruction": "Create a Python program that generates a Fibonacci sequence. The program should take an integer as input and generate the Fibonacci sequence up to that number.",
        "output": "def generate_fibonacci_sequence(n):\n    sequence = [0, 1]\n\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n\n    return sequence",
        "most_similar_instructions": {
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4878048780487804,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.4545454545454546,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.42857142857142855,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.42105263157894735,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.41860465116279066,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.41666666666666663,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4102564102564103,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.39999999999999997,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3913043478260869
        },
        "avg_similarity_score": 0.22353907900798808
    },
    {
        "instruction": "Create a Python program that generates a random number within a specified range.",
        "output": "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start, end)",
        "most_similar_instructions": {
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.588235294117647,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5599999999999999,
            "Create a Python program that generates all possible combinations of a given string.": 0.5384615384615384,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5333333333333333,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.5333333333333333,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5161290322580646,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.5161290322580646,
            "Create a Python program to check if a number is a perfect square or not.": 0.5,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.5,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.47368421052631576
        },
        "avg_similarity_score": 0.24618946124795316
    },
    {
        "instruction": "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\npassword_length = int(input(\"Enter the length of the password: \"))\nrandom_password = generate_password(password_length)\nprint(random_password)",
        "most_similar_instructions": {
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5818181818181819,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5660377358490567,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.48275862068965514,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.4583333333333333,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.44000000000000006,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.4126984126984127,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4090909090909091,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.40816326530612246,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.40816326530612246,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.40740740740740744
        },
        "avg_similarity_score": 0.22146721918195572
    },
    {
        "instruction": "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]",
        "output": "def remove_duplicates(lst):\n    return list(set(lst))\n\nnumbers = [1, 2, 3, 3, 4, 5, 5, 6]\nunique_numbers = remove_duplicates(numbers)\nprint(unique_numbers)",
        "most_similar_instructions": {
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.5714285714285714,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5573770491803278,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5306122448979592,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5283018867924528,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.5263157894736843,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5185185185185186,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5106382978723404,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5098039215686274,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.5,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.48979591836734687
        },
        "avg_similarity_score": 0.2522477441338811
    },
    {
        "instruction": "Can you write a Python program that sorts a list of dictionaries based on a specific key in each dictionary? The program should ask the user for the key to sort by.\n[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 22}, {'name': 'Charlie', 'age': 25}]",
        "output": "key_to_sort_by = input(\"Enter the key to sort by: \")\npeople = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 22}, {'name': 'Charlie', 'age': 25}]\nsorted_people = sorted(people, key=lambda x: x[key_to_sort_by])\nprint(sorted_people)",
        "most_similar_instructions": {
            "Write a Python function that sorts a list of dictionaries by a specified key. The list and the key should be provided as input to the function.\nInput: [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}]\nKey: \"age\"": 0.5813953488372093,
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.44155844155844154,
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.4266666666666667,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.3870967741935484,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.32786885245901637,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.3125,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.30769230769230765,
            "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]": 0.3055555555555556,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.30303030303030304,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.2985074626865672
        },
        "avg_similarity_score": 0.19201529039693954
    },
    {
        "instruction": "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]",
        "output": "numbers = [10, -5, 8, 4, 9]\nmax_number = max(numbers)\nmin_number = min(numbers)\nprint(\"Largest number:\", max_number)\nprint(\"Smallest number:\", min_number)",
        "most_similar_instructions": {
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5641025641025641,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5581395348837209,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5454545454545454,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.5454545454545454,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5333333333333333,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5106382978723404,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5098039215686274,
            "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]": 0.5,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4897959183673469,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.4782608695652174
        },
        "avg_similarity_score": 0.2719163603908642
    },
    {
        "instruction": "Write a Python program that reads two integers from the user and prints the sum of the two integers.",
        "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nsum = num1 + num2\nprint(\"Sum:\", sum)",
        "most_similar_instructions": {
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5641025641025641,
            "Create a Python program that reads two integers from the user and swaps their values without using a temporary variable.": 0.5641025641025641,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.5405405405405405,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.5,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.5,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.4878048780487805,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.48484848484848486,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.47368421052631576,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.46808510638297873
        },
        "avg_similarity_score": 0.2647031967798227
    },
    {
        "instruction": "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']",
        "output": "strings = ['cat', 'dog', 'apple', 'banana']\nsorted_strings = sorted(strings)\nprint(sorted_strings)",
        "most_similar_instructions": {
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5945945945945946,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5882352941176471,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.5882352941176471,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5714285714285715,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5625,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5517241379310345,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.55,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5405405405405405,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5161290322580646,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5161290322580646
        },
        "avg_similarity_score": 0.24977640475593374
    },
    {
        "instruction": "Implement a Python program that generates a Fibonacci sequence up to a specified number of terms and prints the sequence.\nNumber of terms: 10",
        "output": "def generate_fibonacci(num_terms):\n    fibonacci_sequence = [0, 1]\n    while len(fibonacci_sequence) < num_terms:\n        fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n    return fibonacci_sequence\n\nnum_terms = 10\nfibonacci_sequence = generate_fibonacci(num_terms)\nprint(fibonacci_sequence)",
        "most_similar_instructions": {
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.5714285714285715,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5641025641025641,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.48780487804878053,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.48648648648648646,
            "Create a Python program that generates a Fibonacci sequence. The program should take an integer as input and generate the Fibonacci sequence up to that number.": 0.48000000000000004,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.46428571428571425,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.4489795918367347,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4444444444444444,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.43478260869565216,
            "Create a Python program that generates a random number within a specified range.": 0.43243243243243246
        },
        "avg_similarity_score": 0.25041431959528143
    },
    {
        "instruction": "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5",
        "output": "sample_list = [1, 2, 3, 4]\nelement_to_append = 5\nsample_list.append(element_to_append)\nprint(sample_list)",
        "most_similar_instructions": {
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.5925925925925927,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5490196078431373,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5454545454545454,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5454545454545454,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5384615384615384,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.52,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5106382978723404,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5098039215686274,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.4897959183673469,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4827586206896552
        },
        "avg_similarity_score": 0.26635600564996326
    },
    {
        "instruction": "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]",
        "output": "def calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [10, 15, 20, 25, 30]\nprint(calculate_average(numbers))",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.6,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5714285714285714,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5714285714285714,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.5714285714285714,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5581395348837208,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5405405405405405,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.5263157894736842,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5263157894736842,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5238095238095238,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5128205128205129
        },
        "avg_similarity_score": 0.2960558681344139
    },
    {
        "instruction": "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'",
        "output": "def binary_to_decimal(binary):\n    decimal = int(binary, 2)\n    return decimal\n\nbinary = '1010'\nprint(binary_to_decimal(binary))",
        "most_similar_instructions": {
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.5263157894736842,
            "How can you implement a Python function to reverse a string?": 0.5185185185185185,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5161290322580646,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.5,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.5,
            "How can you convert a string to uppercase in Python?": 0.4615384615384615,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.4375,
            "How can you write Python code to extract the extension from a filename?\nfilename = \"example.py\"": 0.4375,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4375,
            "Design a Python function to convert a given string to title case.": 0.42857142857142855
        },
        "avg_similarity_score": 0.24124637694614307
    },
    {
        "instruction": "Write a Python function to find the largest common prefix of two strings.\nstring1 = \"preheat\"\nstring2 = \"prefix\"",
        "output": "def find_common_prefix(string1, string2):\n    common_prefix = \"\"\n    for c1, c2 in zip(string1, string2):\n        if c1 == c2:\n            common_prefix += c1\n        else:\n            break\n    return common_prefix\n\nstring1 = \"preheat\"\nstring2 = \"prefix\"\ncommon_prefix = find_common_prefix(string1, string2)\nprint(common_prefix)",
        "most_similar_instructions": {
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.5333333333333333,
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.5161290322580646,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.48484848484848486,
            "Generate a Python program to find the common elements from two lists.": 0.4827586206896552,
            "Create a Python function to find the maximum value in a list of numbers.": 0.45161290322580644,
            "Write a Python program to swap the values of two variables.\nx = 5\ny = 10": 0.43749999999999994,
            "Can you suggest a Python code snippet to concatenate two strings?\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.43749999999999994,
            "Write a Python function to find all prime numbers up to the given number n.": 0.43749999999999994,
            "Write a Python function to reverse a given list of integers.": 0.42857142857142855,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.42424242424242425
        },
        "avg_similarity_score": 0.23147077159358628
    },
    {
        "instruction": "How can you write a Python function to remove all punctuation from a given sentence?\nsentence = \"Hello! How are you?\"",
        "output": "import string\n\ndef remove_punctuation(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    sentence_without_punctuation = sentence.translate(translator)\n    return sentence_without_punctuation\n\nsentence = \"Hello! How are you?\"\nresult = remove_punctuation(sentence)\nprint(result)",
        "most_similar_instructions": {
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5909090909090908,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5294117647058824,
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.5238095238095238,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.5217391304347826,
            "How can you implement a Python function to reverse a string?": 0.5161290322580645,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.4736842105263158,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.46511627906976744,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.46153846153846156,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.45833333333333337,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.45454545454545453
        },
        "avg_similarity_score": 0.2394064693348406
    },
    {
        "instruction": "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.",
        "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def calculate_area(self):\n        return self.width * self.height\n\nrectangle = Rectangle(5, 10)\narea = rectangle.calculate_area()\nprint(area)",
        "most_similar_instructions": {
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.5660377358490566,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.5531914893617023,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5384615384615384,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.52,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.5098039215686274,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.5,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.4897959183673469,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.4583333333333333,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.43478260869565216,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4081632653061225
        },
        "avg_similarity_score": 0.21032340366230254
    },
    {
        "instruction": "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]",
        "output": "def find_largest_number(numbers):\n    return max(numbers)\n\ninput_list = [5, 2, 9, 1, 7]\nlargest_number = find_largest_number(input_list)\nprint(largest_number)",
        "most_similar_instructions": {
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.5957446808510638,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5652173913043478,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5531914893617021,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5454545454545454,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5283018867924527,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5238095238095238,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.5116279069767442,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5116279069767442,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4999999999999999,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4864864864864865
        },
        "avg_similarity_score": 0.27904902735155707
    },
    {
        "instruction": "Design a Python class representing a book with attributes title, author, and price. Implement a method to calculate the total price after applying a given discount percentage.",
        "output": "class Book:\n    def __init__(self, title, author, price):\n        self.title = title\n        self.author = author\n        self.price = price\n    \n    def apply_discount(self, discount_percentage):\n        discounted_price = self.price * (1 - discount_percentage/100)\n        return discounted_price\n\nbook = Book(\"Python Programming\", \"John Smith\", 50)\ndiscount_percentage = 20\nfinal_price = book.apply_discount(discount_percentage)\nprint(final_price)",
        "most_similar_instructions": {
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.576923076923077,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.5185185185185185,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5185185185185185,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.4727272727272727,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.4528301886792453,
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.4444444444444445,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.4444444444444444,
            "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.": 0.4230769230769231,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.40816326530612246
        },
        "avg_similarity_score": 0.19984213271778045
    },
    {
        "instruction": "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]",
        "output": "def sort_numbers(numbers):\n    return sorted(numbers)\n\ninput_numbers = [3, 1, 4, 1, 5, 9, 2]\nsorted_numbers = sort_numbers(input_numbers)\nprint(sorted_numbers)",
        "most_similar_instructions": {
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.6,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.5945945945945946,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5945945945945946,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5853658536585366,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5853658536585366,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5789473684210527,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5294117647058824,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5238095238095238,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5128205128205129,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5128205128205129
        },
        "avg_similarity_score": 0.2674431344553806
    },
    {
        "instruction": "How can you write a Python program to find and replace a specific element with a new element in a given list?\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace = 3\nnew_element = 10",
        "output": "def replace_element(numbers, replace, new):\n    for i in range(len(numbers)):\n        if numbers[i] == replace:\n            numbers[i] = new\n\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace_element(numbers, 3, 10)\nprint(numbers)",
        "most_similar_instructions": {
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5263157894736842,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5172413793103449,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.4912280701754386,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4745762711864407,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4727272727272727,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.45614035087719296,
            "Generate a Python script to find and replace a specific word in a given string.": 0.4489795918367347,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.43636363636363634,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.4313725490196078,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.4262295081967213
        },
        "avg_similarity_score": 0.2323471783901983
    },
    {
        "instruction": "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]",
        "output": "def are_elements_unique(numbers):\n    return len(numbers) == len(set(numbers))\n\nnumbers = [5, 3, 8, 2, 1, 7]\nprint(are_elements_unique(numbers))",
        "most_similar_instructions": {
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5777777777777778,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.5581395348837208,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.5454545454545454,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5238095238095238,
            "How can you write a Python program to find and replace a specific element with a new element in a given list?\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace = 3\nnew_element = 10": 0.509090909090909,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4878048780487805,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4878048780487805,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.4878048780487805,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4571428571428571
        },
        "avg_similarity_score": 0.24783000237179736
    },
    {
        "instruction": "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.",
        "output": "def unique_characters(string):\n    unique_chars = []\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.append(char)\n    return unique_chars",
        "most_similar_instructions": {
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.6,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5853658536585366,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.5714285714285715,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.5531914893617021,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.5365853658536585,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5333333333333333,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5263157894736842,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5238095238095238,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5217391304347826,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5142857142857143
        },
        "avg_similarity_score": 0.29452237169057316
    },
    {
        "instruction": "Write Python code to replace all occurrences of a specified word in a string with a new word.",
        "output": "string = \"I love programming. Programming is my passion.\"\nspecified_word = \"programming\"\nnew_word = \"coding\"\n\nnew_string = string.replace(specified_word, new_word)\nprint(\"Modified string:\", new_string)",
        "most_similar_instructions": {
            "Write a Python script that replaces all occurrences of a specified word in a text with a different word.\ntext = \"I love apples, apples are my favorite fruit.\"\nReplace \"apples\" with \"oranges\".": 0.52,
            "Write Python code to find the number of vowels in a given string.": 0.5161290322580646,
            "Generate a Python script to find and replace a specific word in a given string.": 0.4848484848484848,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.43750000000000006,
            "Write a Python function that takes a string and replaces all occurrences of a given character with a new character.\nString: \"banana\", Old character: \"a\", New character: \"o\"": 0.43478260869565216,
            "Write a Python program that finds the length of the longest word in a given string.": 0.411764705882353,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.411764705882353,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4,
            "What is the Python code to calculate the length of a string?": 0.4,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.39999999999999997
        },
        "avg_similarity_score": 0.20520229394379383
    },
    {
        "instruction": "Create a Python program that takes a list of integers as input and removes all duplicates from the list.",
        "output": "def remove_duplicates(numbers):\n    return list(set(numbers))",
        "most_similar_instructions": {
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5769230769230769,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5714285714285715,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5641025641025641,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5641025641025641,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.5454545454545454,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5454545454545454,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.5333333333333333,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5161290322580646,
            "Design a Python function that removes all duplicates from a given list.": 0.5161290322580646,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5116279069767442
        },
        "avg_similarity_score": 0.2783687790150251
    },
    {
        "instruction": "Create a class called \"Cat\" with the following attributes: name, age, color. Provide a constructor to initialize these attributes and a method called \"meow\" that prints \"Meow!\".",
        "output": "class Cat:\n    def __init__(self, name, age, color):\n        self.name = name\n        self.age = age\n        self.color = color\n    \n    def meow(self):\n        print(\"Meow!\")",
        "most_similar_instructions": {
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.5357142857142857,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.5,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4230769230769231,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.41379310344827586,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.39215686274509803,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.3870967741935484,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.38596491228070173,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.3846153846153846,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.37037037037037035,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.368421052631579
        },
        "avg_similarity_score": 0.1532415185826305
    },
    {
        "instruction": "Write a Python function that generates a random integer between a given minimum and maximum value (inclusive).\nFunction Signature: `def generate_random_integer(minimum: int, maximum: int) -> int`",
        "output": "import random\n\ndef generate_random_integer(minimum: int, maximum: int) -> int:\n    return random.randint(minimum, maximum)",
        "most_similar_instructions": {
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.5555555555555555,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5217391304347826,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.4814814814814815,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.4528301886792452,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.4489795918367347,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.4489795918367347,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.41860465116279066,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.391304347826087,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.3902439024390244,
            "Please write a Python function to generate a random password of a given length.": 0.38095238095238093
        },
        "avg_similarity_score": 0.20978371664268394
    },
    {
        "instruction": "Given two sorted lists, write a Python function to merge them into a single sorted list.",
        "output": "def merge_sorted_lists(list1, list2):\n    return sorted(list1 + list2)\n\nresult = merge_sorted_lists([1, 3, 5], [2, 4, 6])\nprint(result) # [1, 2, 3, 4, 5, 6]",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.5185185185185185,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.45,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.42424242424242425,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.411764705882353,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.40909090909090917,
            "Please write a Python function to generate a random password of a given length.": 0.39999999999999997,
            "Create a Python function to find the maximum value in a list of numbers.": 0.39999999999999997,
            "Write a Python function to check if a given year is a leap year.": 0.39999999999999997,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.38888888888888884,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.38709677419354843
        },
        "avg_similarity_score": 0.2290486144294054
    },
    {
        "instruction": "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.",
        "output": "def count_string_occurrences(lst, target_string):\n    return lst.count(target_string)\n\nresult = count_string_occurrences(['apple', 'banana', 'cherry', 'banana'], 'banana')\nprint(result) # 2",
        "most_similar_instructions": {
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.5853658536585366,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.553191489361702,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5405405405405405,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.5199999999999999,
            "Write a Python program to count the frequency of each element in a given list.": 0.5142857142857143,
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.4878048780487805,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.4736842105263158,
            "Write a Python function to reverse a given list of integers.": 0.45161290322580644,
            "Given a list called \"words\", write a Python script that concatenates all the words in the list to form a single sentence and prints it.": 0.4444444444444445,
            "Given two sorted lists, write a Python function to merge them into a single sorted list.": 0.4444444444444445
        },
        "avg_similarity_score": 0.27111907070945607
    },
    {
        "instruction": "Given a list of strings, write a Python function to find the strings that have length greater than a given integer.",
        "output": "def find_strings_longer_than(lst, length):\n    return [string for string in lst if len(string) > length]\n\nresult = find_strings_longer_than(['apple', 'banana', 'cherry'], 5)\nprint(result) # ['banana', 'cherry']",
        "most_similar_instructions": {
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.5853658536585366,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.47058823529411764,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.46511627906976744,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.4583333333333333,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4444444444444444,
            "Write a Python function to reverse a given list of integers.": 0.43749999999999994,
            "Write a Python function to find the largest common prefix of two strings.\nstring1 = \"preheat\"\nstring2 = \"prefix\"": 0.42105263157894735,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.4186046511627907,
            "Write Python code to find the number of vowels in a given string.": 0.41176470588235287,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.41025641025641024
        },
        "avg_similarity_score": 0.2481455602897502
    },
    {
        "instruction": "Create a Python function to concatenate all the strings in a given list into a single string.",
        "output": "def concatenate_strings(lst):\n    return ''.join(lst)\n\nresult = concatenate_strings(['hello', 'world'])\nprint(result) # helloworld",
        "most_similar_instructions": {
            "Create a Python function to find the maximum value in a list of numbers.": 0.5806451612903226,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5405405405405405,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.5128205128205129,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.5,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.48648648648648646,
            "Design a Python function that removes all duplicates from a given list.": 0.4827586206896552,
            "Design a Python function to convert a given string to title case.": 0.4827586206896552,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.47058823529411764
        },
        "avg_similarity_score": 0.27884557628206036
    },
    {
        "instruction": "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.",
        "output": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nresult = find_even_numbers([1, 2, 3, 4, 5])\nprint(result) # [2, 4]",
        "most_similar_instructions": {
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.5714285714285714,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.5714285714285713,
            "Given a list of strings, write a Python function to find the strings that have length greater than a given integer.": 0.5581395348837208,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5000000000000001,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.5,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.5,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.47619047619047616,
            "Given two sorted lists, write a Python function to merge them into a single sorted list.": 0.47368421052631576,
            "Create a Python function to concatenate all the strings in a given list into a single string.": 0.46153846153846156,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.46153846153846156
        },
        "avg_similarity_score": 0.25453432429990624
    },
    {
        "instruction": "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"",
        "output": "def count_words(sentence):\n    word_list = sentence.split()\n    word_count = {}\n    for word in word_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nsentence = \"The cat in the hat\"\nword_counts = count_words(sentence)\nprint(word_counts)",
        "most_similar_instructions": {
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5581395348837209,
            "Write a Python program to count the frequency of each element in a given list.": 0.5294117647058824,
            "Write Python code to find the number of vowels in a given string.": 0.5,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.4878048780487805,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.47368421052631576,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4242424242424242,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.42105263157894735,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.41025641025641024,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.41025641025641024,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.4
        },
        "avg_similarity_score": 0.22399272036432602
    },
    {
        "instruction": "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]",
        "output": "def create_dictionary(keys, values):\n    dictionary = {}\n    for i in range(len(keys)):\n        dictionary[keys[i]] = values[i]\n    return dictionary\n\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\ndictionary = create_dictionary(keys, values)\nprint(dictionary)",
        "most_similar_instructions": {
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.39999999999999997,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.372093023255814,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.372093023255814,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.35999999999999993,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.3589743589743589,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.34782608695652173,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.3414634146341463,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.3404255319148936,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.3404255319148936,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.33333333333333337
        },
        "avg_similarity_score": 0.19746486899436144
    },
    {
        "instruction": "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10",
        "output": "def calculate_sum_first_n_natural_numbers(n):\n    total = 0\n    i = 1\n    while i <= n:\n        total += i\n        i += 1\n    return total\n\nn = 10\nsum = calculate_sum_first_n_natural_numbers(n)\nprint(sum)",
        "most_similar_instructions": {
            "Create a Python program to find the first n Fibonacci numbers.": 0.6,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.5405405405405405,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.46511627906976744,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.45714285714285713,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4516129032258065,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.43243243243243246,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.43243243243243246,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.43243243243243246,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4242424242424242
        },
        "avg_similarity_score": 0.23178685674564928
    },
    {
        "instruction": "Write a Python code snippet to convert a temperature in Fahrenheit to Celsius.\nfahrenheit = 86",
        "output": "fahrenheit = 86\ncelsius = (fahrenheit - 32) * 5/9\nprint(celsius)",
        "most_similar_instructions": {
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.5517241379310344,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5333333333333333,
            "Provide a code snippet to reverse a string in Python.": 0.48,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.45161290322580644,
            "Design a Python function to convert a given string to title case.": 0.4444444444444445,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.42857142857142855,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.42424242424242425,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.4166666666666667,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.38709677419354843,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.38709677419354843
        },
        "avg_similarity_score": 0.22884475212231453
    },
    {
        "instruction": "Write a Python code snippet to remove all whitespace characters (space, tab, newline) from a given string.\nstring = \"Hello\\tWorld\\n\"",
        "output": "import re\n\nstring = \"Hello\\tWorld\\n\"\ntrimmed_string = re.sub(r'\\s+', '', string)\nprint(trimmed_string)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5555555555555556,
            "How can you write a Python function to remove all punctuation from a given sentence?\nsentence = \"Hello! How are you?\"": 0.4878048780487805,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.47619047619047616,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4571428571428571,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.4390243902439024,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.4324324324324324,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4242424242424242,
            "Write Python code to find the number of vowels in a given string.": 0.41176470588235287,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.41025641025641024,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.4
        },
        "avg_similarity_score": 0.21998112953657248
    },
    {
        "instruction": "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.",
        "output": "number = int(input(\"Enter an integer: \"))\n\nif number > 0:\n    print(\"The number is positive.\")\nelif number < 0:\n    print(\"The number is negative.\")\nelse:\n    print(\"The number is zero.\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5614035087719298,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.5263157894736842,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.5,
            "Create a Python script that prompts the user to enter their age and prints whether they are a minor, an adult, or a senior citizen.": 0.48,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.4782608695652174,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.4727272727272728,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.4727272727272728,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.4727272727272728,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.45454545454545453,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.4444444444444445
        },
        "avg_similarity_score": 0.22212365989719376
    },
    {
        "instruction": "Create a Python script that generates a multiplication table for a given number.\nNumber: 5",
        "output": "number = 5\nfor i in range(1, 11):\n    result = number * i\n    print(f\"{number} x {i} = {result}\")",
        "most_similar_instructions": {
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5333333333333333,
            "Create a Python program that generates a random number within a specified range.": 0.5,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.4848484848484848,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4827586206896552,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4827586206896552,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.47058823529411764,
            "Write a Python function that returns a list of all divisors of a given number.": 0.4666666666666667,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.4666666666666667,
            "Write a Python script that converts a given string to uppercase.": 0.4615384615384615
        },
        "avg_similarity_score": 0.25011812374012504
    },
    {
        "instruction": "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']",
        "output": "def count_frequency(lst):\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n\nlst = ['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']\nprint(count_frequency(lst))",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5454545454545455,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5384615384615384,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.5333333333333333,
            "Write a Python program to count the frequency of each element in a given list.": 0.5238095238095238,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.5079365079365079,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.48,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.4583333333333333,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.44897959183673464,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4444444444444445,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.4444444444444444
        },
        "avg_similarity_score": 0.26790222105149064
    },
    {
        "instruction": "Write a Python function that converts a string of binary digits into its decimal equivalent.\nbinary = \"1010\"",
        "output": "def binary_to_decimal(binary):\n    return int(binary, 2)\n\nbinary = \"1010\"\nprint(binary_to_decimal(binary))",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5882352941176471,
            "Write a Python function that converts a sentence into title case.": 0.5714285714285714,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5,
            "Write a Python script that converts a given string to uppercase.": 0.5,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.48484848484848486,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4666666666666667,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.45714285714285713,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.45161290322580644,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.45161290322580644,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.45
        },
        "avg_similarity_score": 0.24228099937136433
    },
    {
        "instruction": "How can you write a Python function that checks if all elements in a given list are equal?\nlst = [1, 1, 1, 1, 1]",
        "output": "def are_all_elements_equal(lst):\n    return lst.count(lst[0]) == len(lst)\n\nlst = [1, 1, 1, 1, 1]\nprint(are_all_elements_equal(lst))",
        "most_similar_instructions": {
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.5957446808510638,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.5714285714285715,
            "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]": 0.5333333333333333,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5217391304347826,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5106382978723404,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5106382978723404,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5,
            "How can you write a Python function to remove all punctuation from a given sentence?\nsentence = \"Hello! How are you?\"": 0.5,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.4888888888888889,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4888888888888889
        },
        "avg_similarity_score": 0.2588776633638584
    },
    {
        "instruction": "Write Python code that converts a list of integers to its corresponding Roman numeral representation.\n[1, 4, 9, 40, 90, 100, 500, 900, 1000]",
        "output": "def int_to_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while num > 0:\n        k = num // values[i]\n        for j in range(k):\n            roman_num += symbols[i]\n            num -= values[i]\n        i += 1\n    return roman_num\n\nnumbers = [1, 4, 9, 40, 90, 100, 500, 900, 1000]\nresult = [int_to_roman(num) for num in numbers]\nprint(result)",
        "most_similar_instructions": {
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.4090909090909091,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.3829787234042554,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.3673469387755102,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.3636363636363636,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.3636363636363636,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.35897435897435903,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.35555555555555557,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.34782608695652173,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.34782608695652173,
            "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]": 0.3461538461538462
        },
        "avg_similarity_score": 0.19142352030867432
    },
    {
        "instruction": "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(start, end):\n    primes = [num for num in range(start, end+1) if is_prime(num)]\n    return sum(primes)\n\nstart = 5\nend = 20\nresult = sum_of_primes(start, end)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5945945945945946,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5714285714285715,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5714285714285714,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.5500000000000002,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.5500000000000002,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5454545454545454,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.5405405405405405,
            "Write a Python function that returns a list of all divisors of a given number.": 0.5294117647058824,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5263157894736842,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5142857142857142
        },
        "avg_similarity_score": 0.2812722272855093
    },
    {
        "instruction": "Write Python code to sort a list of dictionaries based on a key in each dictionary.\nstudents = [{'name': 'Alice', 'age': 20}, {'name': 'Bob', 'age': 18}, {'name': 'Charlie', 'age': 22}]\nSort by 'age' key in ascending order.",
        "output": "students = [{'name': 'Alice', 'age': 20}, {'name': 'Bob', 'age': 18}, {'name': 'Charlie', 'age': 22}]\nsorted_students = sorted(students, key=lambda x: x['age'])\nprint(sorted_students)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.5507246376811594,
            "Can you write a Python program that sorts a list of dictionaries based on a specific key in each dictionary? The program should ask the user for the key to sort by.\n[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 22}, {'name': 'Charlie', 'age': 25}]": 0.55,
            "Write a Python function that sorts a list of dictionaries by a specified key. The list and the key should be provided as input to the function.\nInput: [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}]\nKey: \"age\"": 0.4871794871794871,
            "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]": 0.42424242424242425,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.3773584905660377,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.36,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.36,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.32142857142857145,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.3050847457627119,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.2962962962962963
        },
        "avg_similarity_score": 0.1527848977571085
    },
    {
        "instruction": "Write Python code to find the largest and smallest elements in a given list.\n[10, 4, 23, 6, 1, 12]",
        "output": "def find_min_max(lst):\n    return min(lst), max(lst)\n\nnumbers = [10, 4, 23, 6, 1, 12]\nmin_num, max_num = find_min_max(numbers)\nprint(f'Minimum: {min_num}, Maximum: {max_num}')",
        "most_similar_instructions": {
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.5945945945945946,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5641025641025641,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.55,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.55,
            "Write Python code to find the number of vowels in a given string.": 0.5454545454545455,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.5365853658536585,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.5238095238095238,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.5,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.5
        },
        "avg_similarity_score": 0.23513598515649814
    },
    {
        "instruction": "Write Python code to generate a random integer between a given range.\n10, 50",
        "output": "import random\n\nstart = 10\nend = 50\nrandom_number = random.randint(start, end)\nprint(random_number)",
        "most_similar_instructions": {
            "How can you generate a random integer between a given range in Python?": 0.5925925925925927,
            "Please write a Python function to generate a random password of a given length.": 0.5714285714285714,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5625000000000001,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.5333333333333333,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.5000000000000001,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.5,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4615384615384615,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.4615384615384615,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.4571428571428571,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.45
        },
        "avg_similarity_score": 0.21146675305142676
    },
    {
        "instruction": "Provide code to calculate the factorial of a given number in Python.",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 5\nresult = factorial(number)\nprint(result)",
        "most_similar_instructions": {
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5714285714285715,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.5714285714285715,
            "Provide a code snippet to reverse a string in Python.": 0.5454545454545454,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5161290322580646,
            "What is the Python code to calculate the length of a string?": 0.5,
            "Generate a Python program to calculate the power of a number using recursion.": 0.48000000000000004,
            "Write Python code to find the number of vowels in a given string.": 0.48000000000000004,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.4666666666666666,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4615384615384615,
            "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"": 0.4516129032258065
        },
        "avg_similarity_score": 0.19580976991397822
    },
    {
        "instruction": "How would you create a dictionary that represents a person with attributes like name, age, and occupation? Provide an example.",
        "output": "person = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"occupation\": \"Software Engineer\"\n}\n\nprint(person)",
        "most_similar_instructions": {
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.5454545454545454,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.45161290322580644,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.4347826086956522,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.425531914893617,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.4,
            "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.": 0.39999999999999997,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.3902439024390244,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.38888888888888884,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.36842105263157887,
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.36842105263157887
        },
        "avg_similarity_score": 0.1725482458203585
    },
    {
        "instruction": "How can you generate the Fibonacci sequence up to a given number using Python?",
        "output": "def fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] < n:\n        sequence.append(sequence[-2] + sequence[-1])\n    return sequence\n\nnumber = 100\nresult = fibonacci(number)\nprint(result)",
        "most_similar_instructions": {
            "How can you find the length of a string using Python?": 0.56,
            "How can you generate a random integer between a given range in Python?": 0.5185185185185186,
            "How would you generate a random number between 1 and 100 using Python?": 0.5185185185185186,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.5,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4827586206896552,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.45161290322580644,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4444444444444445,
            "How would you round a given float number to 2 decimal places in Python?": 0.42857142857142855,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.4242424242424242,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.4210526315789474
        },
        "avg_similarity_score": 0.1724868272795691
    },
    {
        "instruction": "How would you sort a list of dictionaries based on a specific key in Python?",
        "output": "list_of_dicts = [\n    {\"name\": \"John\", \"age\": 30},\n    {\"name\": \"Alice\", \"age\": 25},\n    {\"name\": \"Bob\", \"age\": 35}\n]\n\nsorted_list = sorted(list_of_dicts, key=lambda x: x[\"age\"])\nprint(sorted_list)",
        "most_similar_instructions": {
            "How can you sort a list of strings in alphabetical order using Python?": 0.5714285714285715,
            "How would you create an empty list in Python?": 0.5,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.47058823529411764,
            "How can you remove duplicate elements from a list in Python?": 0.4615384615384615,
            "How can you generate a random integer between a given range in Python?": 0.42857142857142855,
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.41666666666666663,
            "How would you round a given float number to 2 decimal places in Python?": 0.4137931034482759,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.4000000000000001,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4,
            "How can you convert a string to uppercase in Python?": 0.4
        },
        "avg_similarity_score": 0.17370702651142578
    },
    {
        "instruction": "How can you implement a stack using a Python list? Write the code for push, pop, and peek operations of a stack.",
        "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.stack:\n            return self.stack.pop()\n        else:\n            raise IndexError(\"Stack is empty\")\n\n    def peek(self):\n        if self.stack:\n            return self.stack[-1]\n        else:\n            return None\n\nstack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nprint(stack.pop())\nprint(stack.peek())",
        "most_similar_instructions": {
            "How can you implement a Python function to reverse a string?": 0.4242424242424242,
            "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"": 0.3684210526315789,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.3684210526315789,
            "How can you find the length of a string using Python?": 0.3636363636363636,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.35000000000000003,
            "How can you sort a list of strings in alphabetical order using Python?": 0.3428571428571428,
            "Create a Python module to implement a stack data structure using a list.": 0.3428571428571428,
            "How can you generate a random integer between a given range in Python?": 0.3428571428571428,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.3414634146341463,
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.33333333333333326
        },
        "avg_similarity_score": 0.2055610114549699
    },
    {
        "instruction": "Create a Python function that returns the middle element(s) from a given list. If the list has an odd length, return a single middle element. If the list has an even length, return two middle elements.",
        "output": "def get_middle_elements(lst):\n    if len(lst) % 2 == 1:\n        return [lst[len(lst)//2]]\n    else:\n        return [lst[len(lst)//2 - 1], lst[len(lst)//2]]\n\nlst = [1, 2, 3, 4, 5]\nmiddle_elements = get_middle_elements(lst)\nprint(middle_elements)",
        "most_similar_instructions": {
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4444444444444445,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.41379310344827586,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.37931034482758624,
            "Create a Python function to concatenate all the strings in a given list into a single string.": 0.37037037037037035,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.3661971830985916,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.3582089552238806,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.3548387096774193,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.35135135135135137,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.33333333333333337,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.33333333333333337
        },
        "avg_similarity_score": 0.2071786946721696
    },
    {
        "instruction": "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'",
        "output": "def extract_digits(string):\n   digits = []\n   for char in string:\n       if char.isdigit():\n           digits.append(int(char))\n   return digits\n\nstring = 'abc123def456'\nprint(extract_digits(string))",
        "most_similar_instructions": {
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5500000000000002,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4864864864864865,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4864864864864865,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.48484848484848486,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.47058823529411764,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.47058823529411764,
            "Write a Python script that converts a given string to uppercase.": 0.4666666666666667,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.46153846153846156,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.46153846153846156
        },
        "avg_similarity_score": 0.27855676309467753
    },
    {
        "instruction": "Write a program that removes all whitespace characters from a given string and returns the result.\nString: 'hello   world'",
        "output": "string = 'hello   world'\nprint(string.replace(\" \", \"\"))",
        "most_similar_instructions": {
            "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'": 0.5789473684210527,
            "Write a Python code snippet to remove all whitespace characters (space, tab, newline) from a given string.\nstring = \"Hello\\tWorld\\n\"": 0.5500000000000002,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5454545454545454,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5142857142857142,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.47368421052631576,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.46511627906976744,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.46153846153846156,
            "Design a Python function that removes all duplicates from a given list.": 0.4516129032258065,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.45,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.45
        },
        "avg_similarity_score": 0.23343345720946762
    },
    {
        "instruction": "Generate a Python program that calculates the average of all the elements in a list.\n[3, 6, 9, 12]",
        "output": "def calculate_average(numbers):\n    total = 0\n    count = 0\n\n    for num in numbers:\n        total += num\n        count += 1\n\n    average = total / count\n    return average\n\nnumbers = [3, 6, 9, 12]\naverage = calculate_average(numbers)\nprint(average)",
        "most_similar_instructions": {
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.5454545454545454,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.5365853658536586,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5263157894736842,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5238095238095238,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5217391304347826,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5142857142857142,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5128205128205129,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5128205128205129,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.5,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.5
        },
        "avg_similarity_score": 0.26805311678371574
    },
    {
        "instruction": "Generate a Python code snippet that converts a string representation of a date in the format \"YYYY-MM-DD\" to a datetime object.\n\"2022-12-31\"",
        "output": "import datetime\n\ndate_string = \"2022-12-31\"\ndate_object = datetime.datetime.strptime(date_string, \"%Y-%m-%d\")\nprint(date_object)",
        "most_similar_instructions": {
            "Write a Python script that outputs the current date and time in the format: 'YYYY-MM-DD HH:MM:SS'.": 0.4347826086956522,
            "Write a Python script that converts a given string to uppercase.": 0.37837837837837834,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.372093023255814,
            "Generate a Python program that calculates the average of all the elements in a list.\n[3, 6, 9, 12]": 0.35555555555555557,
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.35555555555555557,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.35000000000000003,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.34782608695652173,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.34782608695652173,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.3414634146341463,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.3414634146341463
        },
        "avg_similarity_score": 0.21964067560652717
    },
    {
        "instruction": "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]",
        "output": "def contains_sublist(main_list, sublist):\n    if all(item in main_list for item in sublist):\n        return True\n    else:\n        return False\n\nmain_list = [1, 2, 3, 4, 5]\nsublist = [2, 3]\nprint(contains_sublist(main_list, sublist))",
        "most_similar_instructions": {
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5714285714285714,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5500000000000002,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.5333333333333333,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.5306122448979592,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5238095238095238,
            "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]": 0.5238095238095238,
            "Write a Python function to check if a given year is a leap year.": 0.5142857142857143,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5106382978723405,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5
        },
        "avg_similarity_score": 0.24995399006723767
    },
    {
        "instruction": "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"",
        "output": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  \n  def introduce(self):\n    print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n    \nperson1 = Person(\"John\", 25)\nperson1.introduce()",
        "most_similar_instructions": {
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.5517241379310345,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.5333333333333333,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.52,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.5000000000000001,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.5,
            "Create a class called \"Cat\" with the following attributes: name, age, color. Provide a constructor to initialize these attributes and a method called \"meow\" that prints \"Meow!\".": 0.4642857142857143,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4444444444444445,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.43636363636363634,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.4067796610169491,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.39285714285714285
        },
        "avg_similarity_score": 0.16059564906045568
    },
    {
        "instruction": "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2",
        "output": "def rotate_list(numbers, positions):\n    positions = positions % len(numbers)\n    rotated_list = numbers[-positions:] + numbers[:-positions]\n    return rotated_list\n\nnums = [1, 2, 3, 4, 5]\nnum_positions = 2\nprint(rotate_list(nums, num_positions))",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5454545454545454,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.5217391304347826,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5217391304347826,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4827586206896552,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.48,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.47058823529411764,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.47058823529411764,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.46808510638297873,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4615384615384615,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.45901639344262296
        },
        "avg_similarity_score": 0.2649295636989022
    },
    {
        "instruction": "Write a Python class called \"BankAccount\" with attributes \"balance\" (initially 0) and methods \"deposit(amount)\" and \"withdraw(amount)\" that update the balance accordingly.",
        "output": "class BankAccount:\n    def __init__(self):\n        self.balance = 0\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n\naccount = BankAccount()\naccount.deposit(100)\naccount.withdraw(50)\nprint(account.balance)",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.43478260869565216,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.4230769230769231,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.4090909090909091,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.3829787234042554,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.3773584905660377,
            "Write a Python class called \"Calculator\" with methods add(), subtract(), multiply(), and divide(). Implement these methods to perform the respective arithmetic operations on two numbers.": 0.37499999999999994,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.37499999999999994,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.3529411764705882,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.34615384615384615,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17921861789079188
    },
    {
        "instruction": "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]",
        "output": "def calculate_square(numbers):\n    square_numbers = []\n\n    for number in numbers:\n        square_numbers.append(number ** 2)\n\n    return square_numbers\n\nnumbers = [1, 2, 3, 4, 5]\nprint(calculate_square(numbers))",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5957446808510638,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5660377358490566,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5555555555555555,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5531914893617021,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5454545454545454,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.5283018867924528,
            "Write a Python program that calculates the average of all numbers in a given list, ignoring any non-numeric elements.\n[1, 2, 'three', 4, 'five']": 0.5283018867924528,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.5161290322580646,
            "Generate a Python program that calculates the average of all the elements in a list.\n[3, 6, 9, 12]": 0.5106382978723404,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5098039215686274
        },
        "avg_similarity_score": 0.2749080540199805
    },
    {
        "instruction": "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]",
        "output": "def reverse_list(numbers):\n    reversed_numbers = []\n    for i in range(len(numbers)-1, -1, -1):\n        reversed_numbers.append(numbers[i])\n    return reversed_numbers\n\ninput_list = [1, 2, 3, 4, 5]\nreversed_list = reverse_list(input_list)\nprint('Reversed list:', reversed_list)",
        "most_similar_instructions": {
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.5531914893617021,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5500000000000002,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.5454545454545454,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5333333333333333,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5263157894736842,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5238095238095238,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5217391304347826,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.5
        },
        "avg_similarity_score": 0.25941933818255536
    },
    {
        "instruction": "Create a Python class to represent a student, with attributes such as name, age, and grade.",
        "output": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    def display_info(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)\n        print(\"Grade:\", self.grade)\n\n# example usage\nstudent = Student(\"John Doe\", 16, 11)\nstudent.display_info()",
        "most_similar_instructions": {
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.5925925925925926,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5581395348837209,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.5499999999999999,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.47368421052631576,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.4666666666666667,
            "How would you create a dictionary that represents a person with attributes like name, age, and occupation? Provide an example.": 0.4444444444444445,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.43137254901960786,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.4285714285714286,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.4,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.4
        },
        "avg_similarity_score": 0.21578374407113213
    },
    {
        "instruction": "Implement a Python program that converts a string to title case (each word starts with an uppercase letter).\nInput string: 'python code generator'",
        "output": "def convert_to_title_case(input_string):\n    title_case_string = input_string.title()\n    return title_case_string\n\ninput_string = 'python code generator'\ntitle_case = convert_to_title_case(input_string)\nprint(title_case)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.5217391304347826,
            "Write a Python script that converts a given string to uppercase.": 0.4705882352941176,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.4210526315789474,
            "Write a Python function that converts a sentence into title case.": 0.411764705882353,
            "Design a Python function to convert a given string to title case.": 0.4,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.3829787234042554,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.37209302325581395,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.3684210526315789,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.3684210526315789,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.3684210526315789
        },
        "avg_similarity_score": 0.1985471616281503
    },
    {
        "instruction": "Complete the following Python code to convert a string to a dictionary where the keys are the characters and the values are the number of occurrences of each character.\ndef string_to_dict(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict",
        "output": "def string_to_dict(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict",
        "most_similar_instructions": {
            "Complete the Python code to check if a given number is prime or not.\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number/2) + 1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False": 0.2653061224489796,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.25531914893617025,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.25531914893617025,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.24999999999999994,
            "Complete the implementation of the Python code which calculates the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nInput: 5": 0.24999999999999994,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.2469135802469136,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.24390243902439024,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.24096385542168672,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.23376623376623376,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.23376623376623376
        },
        "avg_similarity_score": 0.12905139068053223
    },
    {
        "instruction": "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False",
        "output": "def is_palindrome(string):\n    reversed_string = string[::-1]\n    return string == reversed_string",
        "most_similar_instructions": {
            "Complete the Python code to check if a given number is prime or not.\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number/2) + 1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False": 0.48,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.4406779661016949,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.44000000000000006,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.44000000000000006,
            "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"": 0.3928571428571429,
            "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"": 0.3928571428571429,
            "Suggest a completion for the following python code.": 0.38095238095238093,
            "Write a Python function to check if a given year is a leap year.": 0.37499999999999994,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.3728813559322034,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.37037037037037035
        },
        "avg_similarity_score": 0.16892874609134362
    },
    {
        "instruction": "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list",
        "output": "def sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5333333333333333,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.4307692307692308,
            "Suggest a completion for the following python code.": 0.41025641025641024,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.375,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.375,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.37037037037037035,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3673469387755102,
            "How can you sort a list of strings in alphabetical order using Python?": 0.36363636363636365,
            "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]": 0.36
        },
        "avg_similarity_score": 0.18209843016635205
    },
    {
        "instruction": "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean",
        "output": "def calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.4242424242424243,
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.40740740740740744,
            "Suggest a completion for the following python code.": 0.3720930232558139,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.36363636363636365,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.36111111111111116,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.3478260869565218,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.34615384615384615,
            "What is the Python code to calculate the length of a string?": 0.3404255319148936,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.33962264150943394,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.3389830508474576
        },
        "avg_similarity_score": 0.1820979471016144
    },
    {
        "instruction": "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2",
        "output": "def concatenate_lists(list1, list2):\n    return list1 + list2",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.5714285714285715,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.5405405405405405,
            "What is the Python code to concatenate two lists into one list?": 0.4375,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.43137254901960786,
            "Write a Python program to concatenate two lists.": 0.4285714285714285,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.41379310344827586,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.4074074074074075,
            "Can you suggest a Python code snippet to concatenate two strings?\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.4,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.4,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.33333333333333337
        },
        "avg_similarity_score": 0.14131060528326916
    },
    {
        "instruction": "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.",
        "output": "import string\n\ndef is_pangram(sentence):\n    alphabet = set(string.ascii_lowercase)\n    sentence_set = set(sentence.lower())\n    return alphabet.issubset(sentence_set)\n\nsentence = \"The quick brown fox jumps over the lazy dog.\"\nprint(is_pangram(sentence))",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.5714285714285715,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5172413793103449,
            "Write a Python function that checks whether a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors.": 0.5,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.4918032786885246,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.45283018867924524,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.4489795918367347,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4444444444444444,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4444444444444444,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.4347826086956521,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.43137254901960786
        },
        "avg_similarity_score": 0.21916809594275727
    },
    {
        "instruction": "Write a program to remove all occurrences of a given element from a list in Python.\n[1, 2, 3, 2, 4, 1, 5, 6, 5, 7, 7], element: 2",
        "output": "numbers = [1, 2, 3, 2, 4, 1, 5, 6, 5, 7, 7]\nelement = 2\nnumbers = [num for num in numbers if num != element]\nprint(numbers)",
        "most_similar_instructions": {
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.5862068965517241,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.56,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.5283018867924529,
            "Please suggest a Python code snippet to count the number of occurrences of a specific element in a list.\nlist_of_elements = [1, 2, 3, 2, 4, 2, 5, 2]\nspecific_element = 2": 0.5161290322580646,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.48148148148148145,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.48000000000000004,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.47619047619047616,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4727272727272727,
            "Write a program that accepts a list of numbers and checks if there are any duplicates in the list in Python.\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]": 0.4666666666666667,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4642857142857143
        },
        "avg_similarity_score": 0.2099227818710416
    },
    {
        "instruction": "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]",
        "output": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nis_identical = list1 == list2\nprint(is_identical)",
        "most_similar_instructions": {
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.5777777777777778,
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.5531914893617021,
            "Write a Python program that checks if two lists are equal or not.": 0.5405405405405406,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4897959183673469,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.48780487804878053,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.48780487804878053,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.46511627906976744,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4615384615384615,
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.4615384615384615,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.4583333333333333
        },
        "avg_similarity_score": 0.2033214024035292
    },
    {
        "instruction": "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]",
        "output": "strings = [\"apple\", \"banana\", \"cat\", \"dog\"]\nsorted_strings = sorted(strings, key=len, reverse=True)\nprint(sorted_strings)",
        "most_similar_instructions": {
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5957446808510639,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5882352941176471,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.5614035087719299,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5599999999999999,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.5454545454545455,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.5454545454545455,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5217391304347826,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.52,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.5172413793103449,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.5
        },
        "avg_similarity_score": 0.2384121615675043
    },
    {
        "instruction": "Create a Python script that takes a list of integers as input and prints all the numbers that are divisible by a given number.\nNumbers: [10, 15, 20, 25, 30]\nDivisor: 5",
        "output": "numbers = [10, 15, 20, 25, 30]\ndivisor = 5\ndivisible_numbers = [num for num in numbers if num % divisor == 0]\nprint(divisible_numbers)",
        "most_similar_instructions": {
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.5964912280701754,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5490196078431372,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.5263157894736842,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.49056603773584906,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.4814814814814815,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4727272727272727,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.46428571428571425,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4615384615384615,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.4528301886792453,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.4406779661016949
        },
        "avg_similarity_score": 0.2394310528256181
    },
    {
        "instruction": "Implement a Python function that calculates and returns the greatest common divisor (GCD) of two given numbers.\nNumbers: 24, 36",
        "output": "def calculate_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nnumber1 = 24\nnumber2 = 36\ngcd = calculate_gcd(number1, number2)\nprint(gcd)",
        "most_similar_instructions": {
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5555555555555556,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.5454545454545455,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.5365853658536585,
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.5294117647058824,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5128205128205129,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.47058823529411764,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.45,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4390243902439024,
            "Implement a Python function that finds and returns all prime numbers up to a given limit.\n50": 0.4324324324324324,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.4210526315789474
        },
        "avg_similarity_score": 0.2313155285338123
    },
    {
        "instruction": "Write a Python function that takes a list as input and returns a new list with the unique elements from the input list. The order of the elements in the output list should be the same as the input list.",
        "output": "def get_unique_elements(input_list):\n    unique_list = []\n    for element in input_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\ninput_list = [1, 2, 2, 3, 4, 4, 5]\noutput_list = get_unique_elements(input_list)\nprint(output_list)",
        "most_similar_instructions": {
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.53125,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5205479452054794,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5135135135135136,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4923076923076923,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.4918032786885245,
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.4719101123595506,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.47058823529411764,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.4675324675324675,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4666666666666667,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.4657534246575342
        },
        "avg_similarity_score": 0.22780174733648295
    },
    {
        "instruction": "Given a string, write a Python function to check if it is a palindrome or not. Print True if it is a palindrome, False otherwise.",
        "output": "def is_palindrome(string):\n    reverse_string = string[::-1]\n    if string == reverse_string:\n        return True\n    else:\n        return False\n\ninput_string = \"madam\"\nis_palindrome_result = is_palindrome(input_string)\nprint(is_palindrome_result)",
        "most_similar_instructions": {
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5384615384615384,
            "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17": 0.52,
            "Write a Python function to check if a given year is a leap year.": 0.5128205128205129,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5084745762711865,
            "Create a Python program to check if a number is a perfect square or not.": 0.45,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.43902439024390244,
            "Write Python code to check if a given list is empty or not.": 0.4210526315789474,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.4150943396226415,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4081632653061225,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.4000000000000001
        },
        "avg_similarity_score": 0.20172435946964629
    },
    {
        "instruction": "Given a list of integers, write a Python function that returns a new list with only the even numbers from the input list.",
        "output": "def get_even_numbers(input_list):\n    even_numbers = []\n    for number in input_list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\ninput_list = [1, 2, 3, 4, 5, 6]\neven_numbers_list = get_even_numbers(input_list)\nprint(even_numbers_list)",
        "most_similar_instructions": {
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.5777777777777778,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5454545454545454,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5357142857142857,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.5116279069767442,
            "Write a Python function that takes a list as input and returns a new list with the unique elements from the input list. The order of the elements in the output list should be the same as the input list.": 0.4761904761904762,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.47058823529411764,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.4680851063829787,
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.4545454545454545,
            "Given a list of strings, write a Python function to find the strings that have length greater than a given integer.": 0.4545454545454545,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.44000000000000006
        },
        "avg_similarity_score": 0.25312467954637907
    },
    {
        "instruction": "Write a Python function that takes a list of tuples as input, where each tuple contains a name and an age. The function should return a new list of tuples, where the names are sorted in alphabetical order.",
        "output": "def sort_names(name_age_list):\n    sorted_names = sorted(name_age_list, key=lambda x: x[0])\n    return sorted_names\n\ninput_list = [(\"Alice\", 30), (\"Charlie\", 22), (\"Bob\", 25)]\nsorted_names_list = sort_names(input_list)\nprint(sorted_names_list)",
        "most_similar_instructions": {
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5806451612903226,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.48275862068965514,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.46875,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.4507042253521127,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.44067796610169496,
            "Write a Python function that takes a list as input and returns a new list with the unique elements from the input list. The order of the elements in the output list should be the same as the input list.": 0.4358974358974359,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.43478260869565216,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.42857142857142855,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4262295081967213,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4262295081967213
        },
        "avg_similarity_score": 0.23248085768799878
    },
    {
        "instruction": "Write Python code to reverse a list in-place (without creating a new list).",
        "output": "input_list = [1, 2, 3, 4, 5]\ninput_list.reverse()\nprint(input_list)",
        "most_similar_instructions": {
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.5161290322580646,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.4799999999999999,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.4666666666666667,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.4666666666666667,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4615384615384615,
            "Write Python code to swap two variables without using a temporary variable.": 0.4615384615384615,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.45161290322580644,
            "Write Python code to check if a given list is empty or not.": 0.4444444444444445,
            "Write Python code to find the number of vowels in a given string.": 0.4444444444444445
        },
        "avg_similarity_score": 0.21988770316897666
    },
    {
        "instruction": "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.",
        "output": "import math\n\ndef circle_area(radius):\n    return math.pi * radius**2\n\nradius = 5\narea = circle_area(radius)\nprint(area)",
        "most_similar_instructions": {
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5660377358490567,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.56,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5384615384615384,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.5357142857142857,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5306122448979592,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.5,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.4888888888888889,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.48148148148148145,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.47457627118644075,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.47457627118644075
        },
        "avg_similarity_score": 0.24694621380842777
    },
    {
        "instruction": "Create a Python function called \"power_of_n\" that takes two integers n and p as input and returns the value of n raised to the power of p.",
        "output": "def power_of_n(n, p):\n    return n ** p\n\nn = 2\np = 3\nresult = power_of_n(n, p)\nprint(result)",
        "most_similar_instructions": {
            "Implement a Python function called \"calculate_exponent\" that takes a base and an exponent as input and calculates the value of the base raised to the exponent.": 0.5714285714285714,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.5,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.5,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4999999999999999,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.46511627906976755,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4489795918367347,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.4482758620689655,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4444444444444445,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4444444444444445,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.4255319148936171
        },
        "avg_similarity_score": 0.2204247694977305
    },
    {
        "instruction": "Create a Python class called `Circle` that has a radius attribute and a method called `calculate_area` that returns the area of the circle (pi * radius^2). Use the math module to access the constant pi.",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * (self.radius ** 2)\n\ncircle = Circle(5)\narea = circle.calculate_area()\nprint(area)",
        "most_similar_instructions": {
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.5714285714285715,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5666666666666667,
            "Create a Python class called \"Circle\" that has one attribute: radius. Implement methods called \"area\" that calculates and returns the area of the circle, and \"circumference\" that calculates and returns the circumference of the circle.": 0.5633802816901409,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5245901639344263,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.509090909090909,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.43076923076923074,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.41379310344827586,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.3859649122807018,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.380952380952381,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.375
        },
        "avg_similarity_score": 0.19986864438433777
    },
    {
        "instruction": "Design a Python class called `Employee` that has attributes for name, age, and salary. It should have a method called `get_salary` that returns the current salary of the employee.",
        "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_salary(self):\n        return self.salary\n\nemployee = Employee(\"John Smith\", 30, 50000)\nsalary = employee.get_salary()\nprint(salary)",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.509090909090909,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.5,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.4918032786885246,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.4912280701754386,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.4642857142857143,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.4615384615384615,
            "Create a Python class called `Circle` that has a radius attribute and a method called `calculate_area` that returns the area of the circle (pi * radius^2). Use the math module to access the constant pi.": 0.45454545454545453,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.4482758620689655,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.423076923076923,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4210526315789474
        },
        "avg_similarity_score": 0.19322492823625
    },
    {
        "instruction": "Write a Python function that calculates the area of a triangle given its base and height.\nFunction name: calculate_triangle_area\nInput: base = 5, height = 8",
        "output": "def calculate_triangle_area(base, height):\n    return 0.5 * base * height\n\nbase = 5\nheight = 8\narea = calculate_triangle_area(base, height)\nprint(f'The area of the triangle is: {area}')",
        "most_similar_instructions": {
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5957446808510638,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5714285714285714,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5454545454545455,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.5416666666666667,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.5217391304347826,
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.4888888888888889,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.4642857142857143,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.45,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.4347826086956522,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.4285714285714286
        },
        "avg_similarity_score": 0.24542867316178196
    },
    {
        "instruction": "How would you create a Python function that checks if a given string is a valid phone number?\nFunction name: is_valid_phone_number\nInput: \"123-456-7890\"",
        "output": "import re\n\ndef is_valid_phone_number(phone_number):\n    pattern = r'^\\d{3}-\\d{3}-\\d{4}$'\n    if re.match(pattern, phone_number):\n        return True\n    else:\n        return False\n\nphone_number = \"123-456-7890\"\nif is_valid_phone_number(phone_number):\n    print(f'The phone number \"{phone_number}\" is valid')\nelse:\n    print(f'The phone number \"{phone_number}\" is not valid')",
        "most_similar_instructions": {
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.56,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5238095238095237,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.5,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.4782608695652174,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.46511627906976744,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.4482758620689655,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4313725490196078,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.41935483870967744,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.41860465116279066,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.41666666666666663
        },
        "avg_similarity_score": 0.21932106199201323
    },
    {
        "instruction": "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10",
        "output": "import random\n\ndef generate_random_number(lower_limit, upper_limit):\n    random_number = random.randint(lower_limit, upper_limit)\n    return random_number\n\nlower_limit = 1\nupper_limit = 10\nrandom_number = generate_random_number(lower_limit, upper_limit)\nprint(random_number)",
        "most_similar_instructions": {
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.6,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5806451612903226,
            "Create a Python program that generates a random number within a specified range.": 0.5625,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5405405405405405,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.4864864864864865,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.47368421052631576,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.47058823529411764,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.46153846153846156,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.45714285714285713
        },
        "avg_similarity_score": 0.23573672175619523
    },
    {
        "instruction": "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function",
        "output": "def is_palindrome(word):\n    return word == word[::-1]\n\nword = \"racecar\"\nprint(is_palindrome(word))",
        "most_similar_instructions": {
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5263157894736841,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4782608695652174,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.4583333333333333,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.45614035087719296,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.45614035087719296,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4444444444444445,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.4444444444444444,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.44000000000000006,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4324324324324324,
            "How would you create a Python function that checks if a given string is a valid phone number?\nFunction name: is_valid_phone_number\nInput: \"123-456-7890\"": 0.4313725490196078
        },
        "avg_similarity_score": 0.18885898736370865
    },
    {
        "instruction": "Complete the following Python code to reverse a given string.\ndef reverse_string(string):\n    # TODO: Implement the function",
        "output": "def reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello, World!\"\nprint(reverse_string(string))",
        "most_similar_instructions": {
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.5365853658536586,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4666666666666666,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.42424242424242425,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.42307692307692313,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.4210526315789474,
            "What is the Python code to calculate the length of a string?": 0.4,
            "Write Python code to find the number of vowels in a given string.": 0.3870967741935484,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.37209302325581395,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.3673469387755102,
            "Write a Python code snippet to remove all whitespace characters (space, tab, newline) from a given string.\nstring = \"Hello\\tWorld\\n\"": 0.358974358974359
        },
        "avg_similarity_score": 0.17660964055614212
    },
    {
        "instruction": "What is the Python code to replace all occurrences of a substring within a string?\nstring = \"Hello, World!\"\nold_substring = \"World\"\nnew_substring = \"Universe\"",
        "output": "string = \"Hello, World!\"\nold_substring = \"World\"\nnew_substring = \"Universe\"\nnew_string = string.replace(old_substring, new_substring)\nprint(new_string)",
        "most_similar_instructions": {
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.5238095238095238,
            "What is the Python code to calculate the length of a string?": 0.5,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.4102564102564102,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.375,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.3684210526315789,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.3673469387755102,
            "Write a Python code snippet to remove all whitespace characters (space, tab, newline) from a given string.\nstring = \"Hello\\tWorld\\n\"": 0.35555555555555557,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.35294117647058826,
            "Write a Python function that takes a string and replaces all occurrences of a given character with a new character.\nString: \"banana\", Old character: \"a\", New character: \"o\"": 0.3461538461538462,
            "Complete the following Python code to reverse a given string.\ndef reverse_string(string):\n    # TODO: Implement the function": 0.3333333333333333
        },
        "avg_similarity_score": 0.14969141538540476
    },
    {
        "instruction": "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function",
        "output": "def count_occurrences(numbers):\n    return {num: numbers.count(num) for num in set(numbers)}\n\nnumbers = [1, 2, 3, 1, 4, 2, 5, 6, 3]\noccurrences = count_occurrences(numbers)\nprint(occurrences)",
        "most_similar_instructions": {
            "Complete the following Python code to reverse a given string.\ndef reverse_string(string):\n    # TODO: Implement the function": 0.5238095238095238,
            "Write a Python program to count the frequency of each element in a given list.": 0.5128205128205129,
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.4680851063829787,
            "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"": 0.46511627906976744,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4210526315789474,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4090909090909091,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4081632653061225,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.39999999999999997,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.39215686274509803,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.3913043478260869
        },
        "avg_similarity_score": 0.1938241368056901
    },
    {
        "instruction": "Create a Python program that loops through a list and prints each element in reverse order.",
        "output": "def print_reverse_list(items):\n    for item in reversed(items):\n        print(item)",
        "most_similar_instructions": {
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5454545454545455,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.5454545454545455,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.5405405405405405,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.48484848484848486,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.48484848484848486,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4827586206896552,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.47058823529411764,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.47058823529411764
        },
        "avg_similarity_score": 0.2554767940139315
    },
    {
        "instruction": "Generate a Python program to reverse a given string.",
        "output": "def reverse_string(string):\n    reversed_string = string[::-1]\n    return reversed_string",
        "most_similar_instructions": {
            "How can you implement a Python function to reverse a string?": 0.6,
            "Write a Python function to reverse a given list of integers.": 0.6,
            "Generate a Python script to find and replace a specific word in a given string.": 0.5833333333333334,
            "Design a Python function to convert a given string to title case.": 0.5714285714285715,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.5714285714285715,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.5454545454545455,
            "Create a Python program that generates all possible combinations of a given string.": 0.5454545454545455,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5454545454545455,
            "Generate a correct python program to fulfill the following purpose:": 0.5263157894736842,
            "Provide a code snippet to reverse a string in Python.": 0.5263157894736842
        },
        "avg_similarity_score": 0.258484298604359
    },
    {
        "instruction": "Create a Python program to multiply all elements in a list.",
        "output": "def multiply_elements(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result",
        "most_similar_instructions": {
            "Create a Python function to concatenate all the strings in a given list into a single string.": 0.5714285714285714,
            "Create a Python function to find the maximum value in a list of numbers.": 0.56,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.5517241379310345,
            "Write a Python program to count the frequency of each element in a given list.": 0.5384615384615385,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5384615384615385,
            "Generate a Python program that calculates the average of all the elements in a list.\n[3, 6, 9, 12]": 0.5333333333333333,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5217391304347826,
            "Generate a Python program to reverse a given string.": 0.5,
            "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]": 0.5,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.5
        },
        "avg_similarity_score": 0.260269784258237
    },
    {
        "instruction": "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'",
        "output": "from collections import Counter\n\ndef count_words(string):\n    words = string.split()\n    word_counts = Counter(words)\n    return word_counts\n\ninput_string = 'This is a test. This is only a test.'\nword_counts = count_words(input_string)\nprint(word_counts)",
        "most_similar_instructions": {
            "How would you implement a Python program that counts the frequency of each word in a given text?\ntext = \"Python is a popular programming language. Python is used in web development, data analysis, and machine learning.\"": 0.5396825396825397,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.5185185185185185,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.5106382978723405,
            "How would you create a Python function that checks if a given string is a valid phone number?\nFunction name: is_valid_phone_number\nInput: \"123-456-7890\"": 0.509090909090909,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.4888888888888889,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.48148148148148145,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.47058823529411764,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4651162790697674,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45454545454545453,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.44897959183673464
        },
        "avg_similarity_score": 0.2508735694830655
    },
    {
        "instruction": "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]",
        "output": "def find_maximum(numbers):\n    return max(numbers)\n\ninput_numbers = [5, 8, 2, 6, 1]\nmaximum = find_maximum(input_numbers)\nprint(maximum)",
        "most_similar_instructions": {
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.5777777777777778,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5777777777777778,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5714285714285713,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5581395348837208,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.5581395348837208,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5555555555555556,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5365853658536586,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5238095238095238,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5217391304347826,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5116279069767442
        },
        "avg_similarity_score": 0.26455449816955656
    },
    {
        "instruction": "Can you write a Python program to find the minimum and maximum values in a list without using any built-in functions or libraries?\nnumbers = [5, 2, 8, 3, 10]",
        "output": "def find_min_max(numbers):\n    min_num = numbers[0]\n    max_num = numbers[0]\n\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n\n    return min_num, max_num\n\nnumbers = [5, 2, 8, 3, 10]\nprint(find_min_max(numbers))",
        "most_similar_instructions": {
            "How can you write a Python program to find and replace a specific element with a new element in a given list?\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace = 3\nnew_element = 10": 0.53125,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.5098039215686274,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.49056603773584906,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.49056603773584906,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.4814814814814815,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.48,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.47826086956521735,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4727272727272728,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.47058823529411764,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.46808510638297873
        },
        "avg_similarity_score": 0.23971738127515266
    },
    {
        "instruction": "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).",
        "output": "class Car:\n    def __init__(self, brand, model, color):\n        self.brand = brand\n        self.model = model\n        self.color = color\n        self.engine_running = False\n        self.speed = 0\n\n    def start_engine(self):\n        self.engine_running = True\n\n    def stop_engine(self):\n        self.engine_running = False\n        self.speed = 0\n\n    def accelerate(self, speed):\n        if self.engine_running:\n            self.speed = speed\n\ncar = Car(\"Toyota\", \"Camry\", \"Red\")\ncar.start_engine()\ncar.accelerate(60)\nprint(car.speed)",
        "most_similar_instructions": {
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.53125,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.5306122448979591,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.5116279069767441,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.47058823529411764,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4528301886792453,
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.4444444444444445,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4444444444444444,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.4406779661016949,
            "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.": 0.4406779661016949,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.42857142857142855
        },
        "avg_similarity_score": 0.17574870032919343
    },
    {
        "instruction": "Implement a Python program that merges two sorted lists into a single sorted list.",
        "output": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    return merged_list + list1[i:] + list2[j:]",
        "most_similar_instructions": {
            "Given two sorted lists, write a Python function to merge them into a single sorted list.": 0.5333333333333333,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4615384615384615,
            "Write a Python program to concatenate two lists.": 0.45454545454545453,
            "Write a Python program that checks if two lists are equal or not.": 0.4444444444444445,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4285714285714286,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.4210526315789474,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4137931034482759,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.4137931034482759,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4,
            "Create a Python program to multiply all elements in a list.": 0.4
        },
        "avg_similarity_score": 0.23023078281391585
    },
    {
        "instruction": "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.",
        "output": "def sum_odd_numbers(n):\n    return sum(i for i in range(1, n+1) if i % 2 != 0)",
        "most_similar_instructions": {
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.5789473684210527,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5625,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.5405405405405405,
            "Write a Python function to find all prime numbers up to the given number n.": 0.5294117647058824,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.5116279069767442,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.5,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.4864864864864865,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.4864864864864865,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.4864864864864865,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.47368421052631576
        },
        "avg_similarity_score": 0.25165083001793365
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport pandas as pd\n\ndata = {'Name': ['John', 'Emma', 'Sam', 'Anna'], 'Age': [25, 30, 22, 35]}\n\ndf = pd.DataFrame(data)\ndf.",
        "output": "import pandas as pd\n\ndata = {'Name': ['John', 'Emma', 'Sam', 'Anna'], 'Age': [25, 30, 22, 35]}\n\ndf = pd.DataFrame(data)\ndf.head()",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.4444444444444445,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.3333333333333333,
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.2950819672131148,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.2903225806451613,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.2711864406779661,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.2580645161290323,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.25396825396825395,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.22727272727272727,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.2051282051282051,
            "Write a Python function that sorts a list of dictionaries by a specified key. The list and the key should be provided as input to the function.\nInput: [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}]\nKey: \"age\"": 0.2
        },
        "avg_similarity_score": 0.09870550636439927
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.",
        "output": "import numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.sum(a)\nprint(result)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.5333333333333333,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.46511627906976744,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.46153846153846156,
            "Suggest a completion for the following python code.\nimport pandas as pd\n\ndata = {'Name': ['John', 'Emma', 'Sam', 'Anna'], 'Age': [25, 30, 22, 35]}\n\ndf = pd.DataFrame(data)\ndf.": 0.4,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.3902439024390244,
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.3902439024390244,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.3902439024390244,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.380952380952381,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.37209302325581395,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.37209302325581395
        },
        "avg_similarity_score": 0.16889940854272323
    },
    {
        "instruction": "Create a Python dictionary that stores the following information about a person: name, age, city, and profession. Print out the dictionary.",
        "output": "person = {\n    'name': 'John',\n    'age': 30,\n    'city': 'New York',\n    'profession': 'developer'\n}\n\nprint(person)",
        "most_similar_instructions": {
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.4680851063829788,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.46511627906976744,
            "How would you create a dictionary that represents a person with attributes like name, age, and occupation? Provide an example.": 0.4390243902439024,
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.42857142857142855,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.3846153846153846,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.38095238095238093,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.38095238095238093,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.37837837837837834,
            "Create a Python set called \"colors\" with the following items: \"red\", \"green\", \"blue\". Print the set.": 0.37837837837837834,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.375
        },
        "avg_similarity_score": 0.2197514895181873
    },
    {
        "instruction": "Write a Python program that takes a list of words as input and returns a new list that contains only the words that have more than 3 characters and end with the letter 's'.\n['apples', 'bananas', 'kiwis', 'grapes']",
        "output": "def filter_words(words):\n    return [word for word in words if len(word) > 3 and word[-1] == 's']\n\nwords = ['apples', 'bananas', 'kiwis', 'grapes']\nfiltered_words = filter_words(words)\nprint(filtered_words)",
        "most_similar_instructions": {
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5483870967741936,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5352112676056339,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4788732394366197,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4482758620689655,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.44067796610169496,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.44067796610169496,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4375,
            "Create a Python function that takes a string as input and returns a new string that is the reverse of the original string, but with the case of each letter reversed. For example, 'Hello' would become 'oLLEh'.": 0.4266666666666667,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.4266666666666667,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4262295081967213
        },
        "avg_similarity_score": 0.22192931832403848
    },
    {
        "instruction": "Write a Python function that takes a dictionary as input and returns a sorted list of keys from the dictionary.\nexample_dict = {'b': 2, 'a': 1, 'c': 3}",
        "output": "def sort_dict_keys(dictionary):\n    return sorted(dictionary.keys())\n\nexample_dict = {'b': 2, 'a': 1, 'c': 3}\nsorted_keys = sort_dict_keys(example_dict)\nprint(sorted_keys)",
        "most_similar_instructions": {
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.5762711864406779,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5714285714285715,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5245901639344263,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.5,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.49180327868852464,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.49056603773584906,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4814814814814815,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4761904761904762
        },
        "avg_similarity_score": 0.26153774353798687
    },
    {
        "instruction": "Write a Python function that takes a list of strings as input and returns a new list with only the palindrome strings from the input list. A palindrome string is a string that remains the same when its characters are reversed.\nstrings = [\"hello\", \"racecar\", \"python\", \"madam\"]",
        "output": "def filter_palindrome_strings(strings):\n    return [string for string in strings if string == string[::-1]]\n\ninput_strings = [\"hello\", \"racecar\", \"python\", \"madam\"]\npalindrome_strings = filter_palindrome_strings(input_strings)\nprint(palindrome_strings)",
        "most_similar_instructions": {
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5833333333333333,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5822784810126582,
            "Write a Python function that takes a list as input and returns a new list with the unique elements from the input list. The order of the elements in the output list should be the same as the input list.": 0.5348837209302325,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5063291139240507,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.4857142857142857,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4722222222222222,
            "Given a list of integers, write a Python function that returns a new list with only the even numbers from the input list.": 0.46376811594202894,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.46376811594202894,
            "Write a Python program that takes a list of words as input and returns a new list that contains only the words that have more than 3 characters and end with the letter 's'.\n['apples', 'bananas', 'kiwis', 'grapes']": 0.45238095238095233
        },
        "avg_similarity_score": 0.214793756623032
    },
    {
        "instruction": "Create a Python function that prints the Fibonacci sequence up to the n-th term.\n8",
        "output": "def fibonacci_sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence\n\nnumber = 8\nresult = fibonacci_sequence(number)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5806451612903225,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.5185185185185185,
            "Write a Python function to find all prime numbers up to the given number n.": 0.45161290322580644,
            "Create a Python program to find the first n Fibonacci numbers.": 0.4444444444444444,
            "Create a Python program that generates a Fibonacci sequence. The program should take an integer as input and generate the Fibonacci sequence up to that number.": 0.4285714285714286,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.42424242424242425,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.4210526315789474,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.4166666666666667,
            "Implement a Python program that generates a Fibonacci sequence up to a specified number of terms and prints the sequence.\nNumber of terms: 10": 0.4,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.39999999999999997
        },
        "avg_similarity_score": 0.23547047009790686
    },
    {
        "instruction": "Write a Python program that checks if a given string is a palindrome ignoring spaces and punctuation.\n\"A man, a plan, a canal - Panama!\"",
        "output": "import re\n\ndef is_palindrome(string):\n    cleaned_string = re.sub(r'[^A-Za-z]', '', string.lower())\n    reversed_string = cleaned_string[::-1]\n    return cleaned_string == reversed_string\n\ninput_string = \"A man, a plan, a canal - Panama!\"\nresult = is_palindrome(input_string)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.5306122448979592,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5128205128205129,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5128205128205129,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.4827586206896552,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4782608695652174,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4736842105263159,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.4727272727272728,
            "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'": 0.46511627906976744,
            "Create a Python function that takes a string and checks if it is a valid palindrome. Ignore spaces, capitalization, and punctuation.\n\"Madam Arora teaches malayalam\"": 0.4489795918367347,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.4313725490196078
        },
        "avg_similarity_score": 0.23694584332766733
    },
    {
        "instruction": "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.",
        "output": "numbers = input(\"Enter a list of integers: \").split()\nnumbers = [int(num) for num in numbers]\nmax_number = max(numbers)\nmin_number = min(numbers)\nprint(\"Maximum number:\", max_number)\nprint(\"Minimum number:\", min_number)",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5909090909090909,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.5714285714285715,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5531914893617021,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.5416666666666667,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5263157894736841,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5238095238095238,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.5,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.4999999999999999,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4999999999999999
        },
        "avg_similarity_score": 0.2760460437038227
    },
    {
        "instruction": "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.",
        "output": "def capitalize_words(sentence):\n    words = sentence.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)",
        "most_similar_instructions": {
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.5714285714285715,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5365853658536585,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5142857142857143,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5106382978723405,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.48000000000000004,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4782608695652174,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.47619047619047616,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.47619047619047616,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.47058823529411764
        },
        "avg_similarity_score": 0.2302417219756736
    },
    {
        "instruction": "Implement a Python function named \"multiply_matrices\" that takes two matrices as input (represented as lists of lists) and returns the result of multiplying the two matrices.",
        "output": "def multiply_matrices(matrix1, matrix2):\n    result = []\n    for i in range(len(matrix1)):\n        row = []\n        for j in range(len(matrix2[0])):\n            element = 0\n            for k in range(len(matrix2)):\n                element += matrix1[i][k] * matrix2[k][j]\n            row.append(element)\n        result.append(row)\n    return result",
        "most_similar_instructions": {
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.5,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4878048780487805,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.48148148148148145,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.4727272727272727,
            "Create a Python function called \"power_of_n\" that takes two integers n and p as input and returns the value of n raised to the power of p.": 0.4642857142857143,
            "Implement a Python function called \"calculate_exponent\" that takes a base and an exponent as input and calculates the value of the base raised to the exponent.": 0.4444444444444444,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.44000000000000006,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.43636363636363634,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.4313725490196078,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.4313725490196078
        },
        "avg_similarity_score": 0.20819057631068835
    },
    {
        "instruction": "Create a Python class called \"Book\" that has attributes \"title\" and \"author\". It should have a method named \"display_info\" that prints the title and author of the book.",
        "output": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def display_info(self):\n        print(\"Title:\", self.title)\n        print(\"Author:\", self.author)",
        "most_similar_instructions": {
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5862068965517241,
            "Design a Python class called `Employee` that has attributes for name, age, and salary. It should have a method called `get_salary` that returns the current salary of the employee.": 0.576271186440678,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.5185185185185185,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.48148148148148145,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.47457627118644075,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.47058823529411764,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.4666666666666667,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.4528301886792453,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.44,
            "Create a Python class called `Circle` that has a radius attribute and a method called `calculate_area` that returns the area of the circle (pi * radius^2). Use the math module to access the constant pi.": 0.43076923076923074
        },
        "avg_similarity_score": 0.2066627230959596
    },
    {
        "instruction": "Design a Python function that converts a string to lowercase and removes all punctuation marks.\n\"Hello, World!\"",
        "output": "import string\n\ndef clean_string(text):\n    cleaned_text = text.lower()\n    cleaned_text = cleaned_text.translate(str.maketrans('', '', string.punctuation))\n    return cleaned_text\n\ntext = \"Hello, World!\"\nprint(clean_string(text))",
        "most_similar_instructions": {
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.6,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5625,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5161290322580646,
            "Write a Python script that converts a given string to uppercase.": 0.5,
            "Design a Python function to convert a given string to title case.": 0.4827586206896552,
            "Design a Python function that removes all duplicates from a given list.": 0.4827586206896552,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.4736842105263158,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.46511627906976744,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.45161290322580644,
            "Implement a Python function that reverses a string without using any built-in functions or slicing.\nInput: \"hello world\"": 0.4444444444444444
        },
        "avg_similarity_score": 0.23595931594279665
    },
    {
        "instruction": "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.",
        "output": "def create_dictionary(keys, values):\n    return dict(zip(keys, values))",
        "most_similar_instructions": {
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.43478260869565216,
            "Implement a Python program that merges two sorted lists into a single sorted list.": 0.4285714285714286,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.42857142857142855,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.425531914893617,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.41666666666666663,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.4,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.39285714285714285,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.39215686274509803,
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.39215686274509803,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.3902439024390244
        },
        "avg_similarity_score": 0.23318348028279826
    },
    {
        "instruction": "Create a Python dictionary that stores the names of fruits as keys and their corresponding quantities as values. Add the following items to the dictionary: 'apple' with quantity 3, 'banana' with quantity 5, and 'orange' with quantity 2.",
        "output": "fruit_dict = {\n    'apple': 3,\n    'banana': 5,\n    'orange': 2\n}\nprint(fruit_dict)",
        "most_similar_instructions": {
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.35135135135135137,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.34782608695652173,
            "Create a Python list called \"fruits\" with the following items: \"apple\", \"banana\", \"orange\". Print the second item in the list.": 0.3448275862068966,
            "Create a Python dictionary that stores the following information about a person: name, age, city, and profession. Print out the dictionary.": 0.3389830508474576,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.3333333333333333,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.3283582089552239,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.3174603174603174,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.3098591549295775,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.30769230769230765,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.30769230769230765
        },
        "avg_similarity_score": 0.18136757094185477
    },
    {
        "instruction": "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}",
        "output": "def get_keys_with_max_value(dictionary):\n    max_value = max(dictionary.values())\n    return [key for key, value in dictionary.items() if value == max_value]\n\nexample_dict = {\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}\nresult = get_keys_with_max_value(example_dict)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.5964912280701755,
            "Write a Python function that takes a dictionary as input and returns a sorted list of keys from the dictionary.\nexample_dict = {'b': 2, 'a': 1, 'c': 3}": 0.5555555555555555,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.5416666666666667,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.5357142857142857,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5217391304347826,
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.5106382978723405,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5098039215686274,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.49056603773584906
        },
        "avg_similarity_score": 0.24709983941531294
    },
    {
        "instruction": "Write a Python program that converts a number in decimal format to binary format.",
        "output": "decimal = int(input(\"Enter a decimal number: \"))\nbinary = bin(decimal)\nprint(binary)",
        "most_similar_instructions": {
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.5714285714285714,
            "Write a Python script that converts a given string to uppercase.": 0.56,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5517241379310344,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.5517241379310344,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.5333333333333333,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5185185185185186,
            "Write a Python function that converts a string of binary digits into its decimal equivalent.\nbinary = \"1010\"": 0.5161290322580646,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.4827586206896552,
            "Write a Python function that converts a sentence into title case.": 0.4799999999999999,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.47058823529411764
        },
        "avg_similarity_score": 0.257416841948389
    },
    {
        "instruction": "Implement a Python program that calculates the square root of a given number using the math module.\nNumber: 9",
        "output": "import math\n\ndef calculate_square_root(number):\n    return math.sqrt(number)\n\ninput_number = 9\nsquare_root = calculate_square_root(input_number)\nprint(square_root)",
        "most_similar_instructions": {
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5945945945945946,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5454545454545454,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5142857142857142,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5142857142857142,
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.5106382978723404,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.5,
            "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.": 0.47368421052631576,
            "Generate a Python program that calculates the average of all the elements in a list.\n[3, 6, 9, 12]": 0.47368421052631576,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.47368421052631576
        },
        "avg_similarity_score": 0.2592611033427529
    },
    {
        "instruction": "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"",
        "output": "my_dict = {\"name\": \"John\", \"age\": 25, \"city\": \"New York\"}\nprint(my_dict)",
        "most_similar_instructions": {
            "Create a Python dictionary that stores the following information about a person: name, age, city, and profession. Print out the dictionary.": 0.4736842105263158,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.42857142857142855,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.41025641025641024,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.36842105263157887,
            "Create a Python set called \"colors\" with the following items: \"red\", \"green\", \"blue\". Print the set.": 0.3636363636363636,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.3636363636363636,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.358974358974359,
            "How would you create a dictionary that represents a person with attributes like name, age, and occupation? Provide an example.": 0.3243243243243243,
            "Create a Python list called \"fruits\" with the following items: \"apple\", \"banana\", \"orange\". Print the second item in the list.": 0.3243243243243243,
            "Create a Python function to find the maximum value in a list of numbers.": 0.3225806451612903
        },
        "avg_similarity_score": 0.15722071322521547
    },
    {
        "instruction": "Write a Python class called Rectangle with a constructor that takes the length and width as parameters. Add a method to the class to calculate and return the area of the rectangle.\n4, 5",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_area(self):\n        return self.length * self.width\n\nrectangle = Rectangle(4, 5)\narea = rectangle.calculate_area()\nprint(f\"The area of the rectangle is: {area}\")",
        "most_similar_instructions": {
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.5714285714285714,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5614035087719297,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5517241379310345,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5423728813559322,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4827586206896552,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.45901639344262296,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.40625,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.39344262295081966,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.3870967741935484,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.38095238095238093
        },
        "avg_similarity_score": 0.23037251028160635
    },
    {
        "instruction": "How do you implement a Python script that calculates the sum of all the numbers in a list?",
        "output": "numbers = [1, 2, 3, 4, 5]\nsum_of_numbers = sum(numbers)\nprint(\"Sum:\", sum_of_numbers)",
        "most_similar_instructions": {
            "Generate a Python program that calculates the average of all the elements in a list.\n[3, 6, 9, 12]": 0.5945945945945946,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5945945945945946,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5641025641025642,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.5555555555555556,
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.5405405405405405,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5365853658536586,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.5263157894736842,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.5142857142857143,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5128205128205129,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5128205128205129
        },
        "avg_similarity_score": 0.2767012533146578
    },
    {
        "instruction": "How can you implement a Python script that validates whether an email address is in the correct format?",
        "output": "import re\n\ndef validate_email(email):\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n\nemail = \"example@example.com\"\nprint(validate_email(email))",
        "most_similar_instructions": {
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4615384615384615,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.4444444444444444,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.43243243243243246,
            "How can you implement a Python function to reverse a string?": 0.41379310344827586,
            "How would you implement a Python script that parses XML data and extracts specific elements from it?": 0.39999999999999997,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.39999999999999997,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.3902439024390244,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.3888888888888889,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.3888888888888889,
            "Can you write a Python script to concatenate two strings and print the result?": 0.375
        },
        "avg_similarity_score": 0.20128645458457803
    },
    {
        "instruction": "Write a Python script that generates a random number between 1 and 10 (inclusive) and asks the user to guess the number. Keep track of the number of attempts and provide feedback on whether the guess is too low or too high.",
        "output": "import random\n\nsecret_number = random.randint(1, 10)\nguesses = 0\nwhile True:\n    guess = int(input(\"Guess the number between 1 and 10: \"))\n    guesses += 1\n    if guess == secret_number:\n        print(\"Congratulations! You guessed the number in\", guesses, \"attempts.\")\n        break\n    elif guess < secret_number:\n        print(\"Too low! Try again.\")\n    else:\n        print(\"Too high! Try again.\")",
        "most_similar_instructions": {
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.5945945945945946,
            "Create a Python program that generates a random number between 1 and 100, then prompts the user to guess the number. Provide appropriate feedback if the guess is too high or too low, and continue prompting until the correct number is guessed.": 0.5714285714285714,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5396825396825397,
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.5106382978723405,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.41935483870967744,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.3888888888888889,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.3835616438356164,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.37837837837837834,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.3611111111111111,
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.3582089552238806
        },
        "avg_similarity_score": 0.20115983275245908
    },
    {
        "instruction": "You are given a list of strings. Write Python code to concatenate all the strings together.",
        "output": "def concatenate_strings(strings):\n    return ''.join(strings)",
        "most_similar_instructions": {
            "Given a list of strings, write a Python function to find the strings that have length greater than a given integer.": 0.5405405405405405,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.5,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.47826086956521735,
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.47368421052631576,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.4651162790697674,
            "Can you suggest a Python code snippet to concatenate two strings?\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.45161290322580644,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.4324324324324324,
            "Create a Python function to concatenate all the strings in a given list into a single string.": 0.42424242424242425,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.4210526315789474,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.41379310344827586
        },
        "avg_similarity_score": 0.20018412642115524
    },
    {
        "instruction": "Create a Python program that converts a string into title case (the first letter of each word capitalized).\nInput: \"hello world, how are you?\"",
        "output": "def convert_to_title_case(string):\n    words = string.split()\n    title_case_string = ' '.join(word.capitalize() for word in words)\n    return title_case_string\n\ninput_string = \"hello world, how are you?\"\ntitle_case = convert_to_title_case(input_string)\nprint(\"Title case:\", title_case)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.5957446808510638,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5128205128205129,
            "Implement a Python program that converts a string to title case (each word starts with an uppercase letter).\nInput string: 'python code generator'": 0.5106382978723404,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.46511627906976744,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.4583333333333333,
            "Write a Python function that converts a sentence into title case.": 0.4571428571428572,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4390243902439025,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.4102564102564102,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4081632653061225,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.4
        },
        "avg_similarity_score": 0.22013526007580594
    },
    {
        "instruction": "How would you write a Python program to generate Fibonacci series up to n terms using recursion?\nn = 10",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return (fibonacci(n-1) + fibonacci(n-2))\n\nn = 10\nfibonacci_series = [fibonacci(i) for i in range(n)]\nprint(fibonacci_series)",
        "most_similar_instructions": {
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.5555555555555555,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.45714285714285713,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.43902439024390244,
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.4242424242424242,
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.42105263157894735,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.4186046511627907,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4117647058823529,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4117647058823529,
            "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.": 0.391304347826087,
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.3902439024390244
        },
        "avg_similarity_score": 0.18400368961741556
    },
    {
        "instruction": "Write a Python function that checks whether all elements in a list are even numbers.\nlist = [2, 4, 6, 8, 10]",
        "output": "def are_all_even(lst):\n    return all(x % 2 == 0 for x in lst)\n\nlist = [2, 4, 6, 8, 10]\nresult = are_all_even(list)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.5909090909090909,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5714285714285714,
            "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]": 0.5714285714285714,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5454545454545454,
            "How can you write a Python function that checks if all elements in a given list are equal?\nlst = [1, 1, 1, 1, 1]": 0.5333333333333333,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5238095238095238,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5238095238095238,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.5116279069767442,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.48979591836734687,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.4878048780487805
        },
        "avg_similarity_score": 0.2551106856911796
    },
    {
        "instruction": "Can you create a Python function that checks whether a given number is a power of two?\nn = 16",
        "output": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0\n\nn = 16\nresult = is_power_of_two(n)\nprint(result)",
        "most_similar_instructions": {
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5882352941176471,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5454545454545454,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.5405405405405405,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5365853658536586,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5128205128205129,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.5128205128205129,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.48484848484848486,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.47058823529411764,
            "How would you create a Python function that checks if a given string is a valid phone number?\nFunction name: is_valid_phone_number\nInput: \"123-456-7890\"": 0.46808510638297873,
            "Write a Python function that checks whether a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors.": 0.46153846153846156
        },
        "avg_similarity_score": 0.26088649621813725
    },
    {
        "instruction": "How can you write a Python function to generate a random password with 8 characters using lowercase letters, uppercase letters, and digits?",
        "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(8))\n    return password\n\npassword = generate_password()\nprint(password)",
        "most_similar_instructions": {
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5909090909090909,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.5853658536585366,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5652173913043478,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.55,
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.5106382978723404,
            "Please write a Python function to generate a random password of a given length.": 0.5000000000000001,
            "How can you implement a Python function to reverse a string?": 0.4848484848484849,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4571428571428572,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.4285714285714286,
            "How can you write a Python function to remove all punctuation from a given sentence?\nsentence = \"Hello! How are you?\"": 0.4285714285714286
        },
        "avg_similarity_score": 0.22798142435259186
    },
    {
        "instruction": "Generate a list of all prime numbers less than 100 using a Python program.",
        "output": "def generate_prime_numbers(limit):\n    primes = []\n    for num in range(2, limit):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n\nlimit = 100\nprime_numbers = generate_prime_numbers(limit)\nprint(prime_numbers)",
        "most_similar_instructions": {
            "How would you generate a random number between 1 and 100 using Python?": 0.3703703703703704,
            "How can you sort a list of strings in alphabetical order using Python?": 0.3703703703703704,
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.36363636363636365,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.35714285714285715,
            "Generate a Python program to reverse a given string.": 0.34782608695652173,
            "Write a Python function that returns a list of all divisors of a given number.": 0.3448275862068965,
            "How would you sort a list of dictionaries based on a specific key in Python?": 0.3448275862068965,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.34285714285714286,
            "Generate a correct python program to fulfill the following purpose:": 0.3333333333333333,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.3333333333333333
        },
        "avg_similarity_score": 0.1644899763587441
    },
    {
        "instruction": "How can you write Python code to merge two dictionaries into one dictionary?\ndict1 = {'apple': 3, 'banana': 2}\ndict2 = {'cherry': 5, 'kiwi': 1}",
        "output": "dict1 = {'apple': 3, 'banana': 2}\ndict2 = {'cherry': 5, 'kiwi': 1}\nmerged_dict = {**dict1, **dict2}\nprint(merged_dict)",
        "most_similar_instructions": {
            "How would you merge two Python dictionaries into one?": 0.43750000000000006,
            "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]": 0.41509433962264153,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.3829787234042554,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.36,
            "How can you write Python code to extract the extension from a filename?\nfilename = \"example.py\"": 0.358974358974359,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.358974358974359,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.358974358974359,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.35,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.34782608695652173,
            "What is the Python code to concatenate two lists into one list?": 0.3428571428571428
        },
        "avg_similarity_score": 0.1449444298108432
    },
    {
        "instruction": "Generate a Python function that checks whether two strings are anagrams or not.\nstring1 = \"listen\"\nstring2 = \"silent\"",
        "output": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\n\nstring1 = \"listen\"\nstring2 = \"silent\"\nresult = is_anagram(string1, string2)\nprint(result)",
        "most_similar_instructions": {
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.5625,
            "Write a Python program that checks if two lists are equal or not.": 0.5333333333333333,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.5161290322580646,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.48780487804878053,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.48484848484848486,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.46511627906976744,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.45714285714285713,
            "Create a Python function that checks if two given strings are anagrams. Anagrams are the strings that have the same characters but can be arranged in different orders.\nString 1: \"listen\", String 2: \"silent\"": 0.4313725490196078,
            "Write a Python function to find the largest common prefix of two strings.\nstring1 = \"preheat\"\nstring2 = \"prefix\"": 0.4117647058823529,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.3888888888888889
        },
        "avg_similarity_score": 0.17214718466970896
    },
    {
        "instruction": "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]",
        "output": "numbers = [2, 6, 8, 4, 10]\nmax_num = max(numbers)\nprint(f'The largest element in the list is: {max_num}')",
        "most_similar_instructions": {
            "Write Python code to find the largest and smallest elements in a given list.\n[10, 4, 23, 6, 1, 12]": 0.6,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.6,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5641025641025641,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.55,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.55,
            "Write Python code to find the number of vowels in a given string.": 0.5454545454545455,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.5405405405405405,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.5365853658536585,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5294117647058824,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5263157894736842
        },
        "avg_similarity_score": 0.2447058407454865
    },
    {
        "instruction": "How can you write Python code to count the number of occurrences of a specific element in a list?\nelement = 7\nnumbers = [5, 2, 7, 4, 7, 1, 7]",
        "output": "element = 7\nnumbers = [5, 2, 7, 4, 7, 1, 7]\ncount = numbers.count(element)\nprint(f'The number of occurrences of {element} is: {count}')",
        "most_similar_instructions": {
            "Please suggest a Python code snippet to count the number of occurrences of a specific element in a list.\nlist_of_elements = [1, 2, 3, 2, 4, 2, 5, 2]\nspecific_element = 2": 0.5483870967741935,
            "How can you write a Python program to find and replace a specific element with a new element in a given list?\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace = 3\nnew_element = 10": 0.5396825396825397,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.5384615384615384,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.5384615384615384,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5217391304347826,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4999999999999999,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.49056603773584906,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.4897959183673469,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.4897959183673469,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.48148148148148145
        },
        "avg_similarity_score": 0.21928836212343264
    },
    {
        "instruction": "Write a Python program to find the index of an item in a list.\nInput list: [4, 8, 2, 6, 3]\nItem to find: 2",
        "output": "def find_item_index(input_list, item):\n    return input_list.index(item)\n\ninput_list = [4, 8, 2, 6, 3]\nitem_to_find = 2\nitem_index = find_item_index(input_list, item_to_find)\nprint('Index of', item_to_find, ':', item_index)",
        "most_similar_instructions": {
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.509090909090909,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4999999999999999,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.48,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.48,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4782608695652174,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.4782608695652174,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.46808510638297873,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.46808510638297873
        },
        "avg_similarity_score": 0.24896110411086347
    },
    {
        "instruction": "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]",
        "output": "numbers = [4, 9, 2, 6, 5, 1, 7]\nmax_value = max(numbers)\nprint(max_value)",
        "most_similar_instructions": {
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.5454545454545454,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.5333333333333332,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5333333333333332,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5000000000000001,
            "How can you find the length of a string using Python?": 0.4848484848484849,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.47619047619047616,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.46511627906976744,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4571428571428572,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.4444444444444445,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.4444444444444445
        },
        "avg_similarity_score": 0.17470849595118348
    },
    {
        "instruction": "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]",
        "output": "numbers = [5, 10, 15, 20, 25]\naverage = sum(numbers) / len(numbers)\nprint(average)",
        "most_similar_instructions": {
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.5853658536585366,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.5500000000000002,
            "How can you find the length of a string using Python?": 0.5333333333333333,
            "How can you sort a list of strings in alphabetical order using Python?": 0.5,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.47368421052631576,
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.47368421052631576,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.42857142857142855,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.42857142857142855,
            "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]": 0.425531914893617
        },
        "avg_similarity_score": 0.17790805169334045
    },
    {
        "instruction": "Create a Python program that accepts a list of numbers and removes all duplicate numbers, keeping only the unique ones.\n[1, 2, 2, 3, 4, 4, 5, 5, 6]",
        "output": "def remove_duplicates(numbers):\n    return list(set(numbers))\n\nnumbers = [1, 2, 2, 3, 4, 4, 5, 5, 6]\nunique_numbers = remove_duplicates(numbers)\nprint(unique_numbers)",
        "most_similar_instructions": {
            "Write a program that accepts a list of numbers and checks if there are any duplicates in the list in Python.\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]": 0.5666666666666665,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5416666666666666,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5161290322580646,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5098039215686274,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5,
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.5,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.48148148148148145,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.48148148148148145,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.4727272727272727
        },
        "avg_similarity_score": 0.2344331380207708
    },
    {
        "instruction": "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?",
        "output": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n\n    def is_empty(self):\n        return len(self.items) == 0\n\nstack = Stack()\nstack.push(1)\nstack.push(2)\nprint(stack.pop())\nprint(stack.peek())\nprint(stack.is_empty())",
        "most_similar_instructions": {
            "How can you implement a stack using a Python list? Write the code for push, pop, and peek operations of a stack.": 0.5641025641025642,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.5,
            "Implement a Python class for a basic calculator that supports addition, subtraction, multiplication, and division operations.": 0.42424242424242425,
            "How would you implement a Python script that parses XML data and extracts specific elements from it?": 0.4117647058823529,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.39999999999999997,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.3870967741935484,
            "Write a Python class called \"Calculator\" with methods add(), subtract(), multiply(), and divide(). Implement these methods to perform the respective arithmetic operations on two numbers.": 0.38095238095238104,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.37500000000000006,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.37500000000000006,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.36842105263157887
        },
        "avg_similarity_score": 0.1609158201658325
    },
    {
        "instruction": "Write a Python function that takes two lists as input and returns True if they have at least one common element, False otherwise.\n[1, 2, 3], [4, 5, 6, 3]",
        "output": "def have_common_element(list1, list2):\n    return bool(set(list1) & set(list2))\n\ninput_list1 = [1, 2, 3]\ninput_list2 = [4, 5, 6, 3]\nprint(have_common_element(input_list1, input_list2))",
        "most_similar_instructions": {
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5925925925925926,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.5185185185185186,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4827586206896552,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.47761194029850745,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.47619047619047616,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.4727272727272728,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.4528301886792453,
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.4528301886792453,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.4482758620689655
        },
        "avg_similarity_score": 0.20044872109056586
    },
    {
        "instruction": "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.",
        "output": "user_input = input(\"Enter a string: \")\nreversed_string = user_input[::-1]\nprint(reversed_string)",
        "most_similar_instructions": {
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.6,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5789473684210527,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5263157894736842,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.5128205128205129,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.5128205128205129,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.5,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.4864864864864865,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.48484848484848486
        },
        "avg_similarity_score": 0.2677730538372717
    },
    {
        "instruction": "Create a Python function called \"print_pattern\" that takes an integer as input and prints a pattern of numbers from 1 to the input number.\n5",
        "output": "def print_pattern(num):\n    for i in range(1, num+1):\n        print(\" \".join(str(j) for j in range(1, i+1)))\n\nprint_pattern(5)",
        "most_similar_instructions": {
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.5333333333333333,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.52,
            "Implement a Python function called \"calculate_exponent\" that takes a base and an exponent as input and calculates the value of the base raised to the exponent.": 0.49056603773584906,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4897959183673469,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.47826086956521735,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.47457627118644075,
            "Create a Python function called \"power_of_n\" that takes two integers n and p as input and returns the value of n raised to the power of p.": 0.4727272727272727,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.47058823529411764,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.4583333333333333,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.4545454545454546
        },
        "avg_similarity_score": 0.246851187885742
    },
    {
        "instruction": "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?",
        "output": "nums = [10, 25, 6, 32, 18, 14]\nmax_num = max(nums)\nprint(max_num)",
        "most_similar_instructions": {
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.5238095238095238,
            "Write Python code to find the largest and smallest elements in a given list.\n[10, 4, 23, 6, 1, 12]": 0.47619047619047616,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.46511627906976744,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.46153846153846156,
            "Write Python code to find the number of vowels in a given string.": 0.4571428571428572,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4444444444444444,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.4406779661016949,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.4285714285714286,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.4285714285714286,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.4186046511627907
        },
        "avg_similarity_score": 0.17315078430557682
    },
    {
        "instruction": "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.",
        "output": "months = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\nprint(months)",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.5454545454545454,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.5,
            "Create a Python dictionary called \"students\" with keys as student names and values as their respective ages. Write a function to print the keys of the students who are above 18 years old.": 0.42857142857142855,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.4090909090909091,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.4,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3829787234042554,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.380952380952381,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.380952380952381,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.3666666666666667,
            "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.": 0.36363636363636365
        },
        "avg_similarity_score": 0.2042072622501878
    },
    {
        "instruction": "Create a Python class for a Book. The class should have attributes such as title, author, and publication year, and methods such as get_title, get_author, and get_publication_year to retrieve the values of the attributes.",
        "output": "class Book:\n    def __init__(self, title, author, publication_year):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publication_year(self):\n        return self.publication_year\n\nbook = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\nprint(book.get_title())\nprint(book.get_author())\nprint(book.get_publication_year())",
        "most_similar_instructions": {
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.47619047619047616,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.4307692307692308,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.3870967741935484,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.3870967741935484,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.37499999999999994,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.37333333333333335,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.36923076923076925,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.360655737704918,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.3582089552238805,
            "Create a Python class called \"Book\" that has attributes \"title\" and \"author\". It should have a method named \"display_info\" that prints the title and author of the book.": 0.3582089552238805
        },
        "avg_similarity_score": 0.16983387755289633
    },
    {
        "instruction": "Create a Python class to represent a Rectangle. The class should have attributes such as length and width, and methods such as calculate_area and calculate_perimeter to calculate the area and perimeter of the rectangle.",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def calculate_area(self):\n        return self.length * self.width\n\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\n\nrectangle = Rectangle(4, 5)\nprint(rectangle.calculate_area())\nprint(rectangle.calculate_perimeter())",
        "most_similar_instructions": {
            "Create a Python class for a Book. The class should have attributes such as title, author, and publication year, and methods such as get_title, get_author, and get_publication_year to retrieve the values of the attributes.": 0.5945945945945946,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5762711864406781,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.49180327868852464,
            "Write a Python class called Rectangle with a constructor that takes the length and width as parameters. Add a method to the class to calculate and return the area of the rectangle.\n4, 5": 0.45714285714285713,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.43333333333333335,
            "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.": 0.42622950819672134,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.42424242424242425,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.42307692307692313,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.41379310344827586
        },
        "avg_similarity_score": 0.185928152571287
    },
    {
        "instruction": "Build a Python program that checks whether a given number is Armstrong or not. A number is Armstrong if the sum of its own digits raised to the power of the number of digits is equal to the original number.",
        "output": "def is_armstrong(n):\n    length = len(str(n))\n    sum = 0\n    temp = n\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    \n    return n == sum\n\nnumber = 153\nresult = is_armstrong(number)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that checks whether a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors.": 0.4931506849315069,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.4571428571428572,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.4067796610169491,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.3666666666666667,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.36619718309859156,
            "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.": 0.3582089552238806,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.3448275862068966,
            "Implement a Python program that generates a Fibonacci sequence up to a specified number of terms and prints the sequence.\nNumber of terms: 10": 0.34374999999999994,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.34285714285714286,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.3384615384615385
        },
        "avg_similarity_score": 0.19264078697811862
    },
    {
        "instruction": "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10",
        "output": "import random\n\ndef generate_random_list(start, end, size):\n    return [random.randint(start, end) for _ in range(size)]\n\nrange_start = 1\nrange_end = 10\nsize = 5\nrandom_list = generate_random_list(range_start, range_end, size)\nprint(random_list)",
        "most_similar_instructions": {
            "Create a Python program that generates a random number within a specified range.": 0.5945945945945945,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5714285714285715,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.5652173913043478,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5555555555555556,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.4888888888888889,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.48000000000000004,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.4761904761904762,
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.46511627906976744,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.4583333333333333,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.45454545454545453
        },
        "avg_similarity_score": 0.2503913023760206
    },
    {
        "instruction": "Write a Python script that generates a random integer between a specified range and checks if it is divisible by a given number.\nstart = 1\nend = 100\ndivisor = 7",
        "output": "import random\n\ndef check_divisibility(start, end, divisor):\n    random_number = random.randint(start, end)\n    if random_number % divisor == 0:\n        print(f\"{random_number} is divisible by {divisor}.\")\n    else:\n        print(f\"{random_number} is not divisible by {divisor}.\")\n\nstart = 1\nend = 100\ndivisor = 7\ncheck_divisibility(start, end, divisor)",
        "most_similar_instructions": {
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5185185185185185,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.509090909090909,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.48000000000000004,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.46808510638297873,
            "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10": 0.4528301886792453,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.4489795918367347,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.44,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.44,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.4347826086956522
        },
        "avg_similarity_score": 0.22174417934689591
    },
    {
        "instruction": "Write a Python function that accepts two parameters: a list of integers and a target value. The function should return the indices of the two numbers in the list that add up to the target value.\nInput: [2, 7, 1, 5], target = 9",
        "output": "def find_target_indices(numbers, target):\n    num_dict = {}\n    for i, num in enumerate(numbers):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n\nexample_list = [2, 7, 1, 5]\ntarget_value = 9\nresult = find_target_indices(example_list, target_value)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.46875,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.45070422535211263,
            "Write a Python function that takes a list as input and returns a new list with the unique elements from the input list. The order of the elements in the output list should be the same as the input list.": 0.43373493975903615,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.42424242424242425,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4210526315789474,
            "Write a Python function that takes a list of numbers as input and returns the highest and lowest numbers in the list. The function should return a tuple with the highest number as the first element and the lowest number as the second element.\n[5, 7, 2, 9, 1]": 0.4130434782608695,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.411764705882353,
            "Write a Python function that takes a list of tuples as input, where each tuple contains a name and an age. The function should return a new list of tuples, where the names are sorted in alphabetical order.": 0.3950617283950617,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.3943661971830986,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.39393939393939387
        },
        "avg_similarity_score": 0.230351253546825
    },
    {
        "instruction": "Write Python code to check if two given lists are equal regardless of the order of elements.\n[1, 2, 3, 4], [4, 3, 2, 1]",
        "output": "def check_lists_equal(list1, list2):\n    return set(list1) == set(list2)\n\nexample_list1 = [1, 2, 3, 4]\nexample_list2 = [4, 3, 2, 1]\nresult = check_lists_equal(example_list1, example_list2)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]": 0.5714285714285714,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.4406779661016949,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.43478260869565216,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.42857142857142855,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.42857142857142855,
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.41666666666666663,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4074074074074074,
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.4,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.39215686274509803
        },
        "avg_similarity_score": 0.18714284205102996
    },
    {
        "instruction": "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]",
        "output": "original_list = [1, 2, 3, 4, 5]\nsquared_list = [x**2 for x in original_list]\nprint(squared_list)",
        "most_similar_instructions": {
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.5957446808510638,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5909090909090909,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.5909090909090909,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5789473684210527,
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.5789473684210527,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5777777777777778,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5652173913043478,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5500000000000002,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5500000000000002,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.5454545454545454
        },
        "avg_similarity_score": 0.2521585449112294
    },
    {
        "instruction": "Write a Python function that merges two dictionaries and returns the combined dictionary.\nDictionaries:\n{\"name\": \"John\", \"age\": 25}\n{\"city\": \"New York\", \"country\": \"USA\"}",
        "output": "def merge_dicts(dict1, dict2):\n    return {**dict1, **dict2}\n\ndictionary1 = {\"name\": \"John\", \"age\": 25}\ndictionary2 = {\"city\": \"New York\", \"country\": \"USA\"}\n\nresult = merge_dicts(dictionary1, dictionary2)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.5,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.46153846153846156,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4324324324324324,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.411764705882353,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.4090909090909091,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.391304347826087,
            "Write a Python function that receives two integers and returns their division result as a float.\n8, 4": 0.3902439024390244,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3902439024390244,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3636363636363636,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.3636363636363636
        },
        "avg_similarity_score": 0.2034178178035242
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''",
        "output": "import datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''\n    return datetime.date.today()",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.5714285714285715,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.5555555555555556,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.45,
            "What is the Python code to get the current date and time?": 0.4375,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4285714285714286,
            "Suggest a completion for the following python code.\nimport pandas as pd\n\ndata = {'Name': ['John', 'Emma', 'Sam', 'Anna'], 'Age': [25, 30, 22, 35]}\n\ndf = pd.DataFrame(data)\ndf.": 0.375,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.3529411764705882,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.33333333333333337,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.32727272727272727,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.3225806451612903
        },
        "avg_similarity_score": 0.1559769205907479
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''",
        "output": "import os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''\n    os.mkdir(directory_name)",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.5652173913043479,
            "Suggest a completion for the following python code.": 0.47058823529411764,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.4333333333333333,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.41666666666666663,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.3913043478260869,
            "Suggest a completion for the following python code.\nimport pandas as pd\n\ndata = {'Name': ['John', 'Emma', 'Sam', 'Anna'], 'Age': [25, 30, 22, 35]}\n\ndf = pd.DataFrame(data)\ndf.": 0.3703703703703704,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.3157894736842105,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.3043478260869565,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.29999999999999993,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.29508196721311475
        },
        "avg_similarity_score": 0.16338651548094207
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''",
        "output": "import math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''\n    area = math.pi * radius ** 2\n    return area",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.5777777777777778,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.5490196078431373,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.5084745762711865,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.48780487804878053,
            "Suggest a completion for the following python code.": 0.48484848484848486,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.43478260869565216,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4255319148936171,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.39999999999999997,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.39999999999999997,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.39999999999999997
        },
        "avg_similarity_score": 0.20636078023454324
    },
    {
        "instruction": "Design a Python function that replaces all occurrences of a given word with another word in a given sentence.\n'apple', 'fruit', 'I ate an apple.'",
        "output": "def replace_word(sentence, old_word, new_word):\n    return sentence.replace(old_word, new_word)\n\nsentence = 'I ate an apple.'\nold_word = 'apple'\nnew_word = 'fruit'\nmodified_sentence = replace_word(sentence, old_word, new_word)\nprint(modified_sentence)",
        "most_similar_instructions": {
            "Design a Python function that reverses the order of words in a given sentence.": 0.5128205128205129,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4761904761904762,
            "Write a Python function that takes a string and replaces all occurrences of a given character with a new character.\nString: \"banana\", Old character: \"a\", New character: \"o\"": 0.4528301886792452,
            "Design a Python function that removes all duplicates from a given list.": 0.43243243243243246,
            "Write a Python script that replaces all occurrences of a specified word in a text with a different word.\ntext = \"I love apples, apples are my favorite fruit.\"\nReplace \"apples\" with \"oranges\".": 0.42105263157894735,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.41860465116279066,
            "Write a Python function that returns a list of all divisors of a given number.": 0.4,
            "Write a Python program that finds the length of the longest word in a given string.": 0.39024390243902435,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.37499999999999994,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.37209302325581395
        },
        "avg_similarity_score": 0.2137951657163924
    },
    {
        "instruction": "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))",
        "output": "def add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\n\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.49350649350649345,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.40625000000000006,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.39344262295081966,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.3733333333333333,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.3548387096774194,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.3492063492063492,
            "Create a Python program that accepts a list of numbers and removes all duplicate numbers, keeping only the unique ones.\n[1, 2, 2, 3, 4, 4, 5, 5, 6]": 0.3380281690140845,
            "Write a program that accepts a list of numbers and checks if there are any duplicates in the list in Python.\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]": 0.3287671232876712,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.3287671232876712,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.3283582089552239
        },
        "avg_similarity_score": 0.15441891699627602
    },
    {
        "instruction": "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))",
        "output": "def count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nstring = 'Hello world!'\nprint(count_vowels(string))",
        "most_similar_instructions": {
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.42424242424242425,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.4225352112676057,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.375,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.37037037037037035,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.36363636363636365,
            "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))": 0.3636363636363636,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.3561643835616438,
            "Complete the following Python code to convert a string to a dictionary where the keys are the characters and the values are the number of occurrences of each character.\ndef string_to_dict(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict": 0.34951456310679613,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.3428571428571428,
            "Write Python code to find the number of vowels in a given string.": 0.3389830508474576
        },
        "avg_similarity_score": 0.16208282527880863
    },
    {
        "instruction": "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))",
        "output": "def reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\n\nstring = 'Hello, world!'\nprint(reverse_string(string))",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))": 0.5945945945945946,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.49056603773584906,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.4838709677419355,
            "Complete the following Python code to reverse a given string.\ndef reverse_string(string):\n    # TODO: Implement the function": 0.4782608695652174,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4761904761904762,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.46511627906976744,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.45833333333333337,
            "Suggest a completion for the following python code.": 0.4444444444444445,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.4444444444444445,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.41666666666666663
        },
        "avg_similarity_score": 0.17413158080106722
    },
    {
        "instruction": "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))",
        "output": "def remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\n\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))",
        "most_similar_instructions": {
            "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))": 0.5569620253164557,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5517241379310345,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.49230769230769234,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4745762711864407,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.4444444444444445,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.4307692307692308,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.42857142857142855,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.42857142857142855,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.42424242424242425,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.4193548387096775
        },
        "avg_similarity_score": 0.17667608931637757
    },
    {
        "instruction": "Write Python code to generate a random password of length 10 that includes both uppercase and lowercase letters, digits, and special characters.",
        "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(10))\n    return password\n\npassword = generate_password()\nprint(password)",
        "most_similar_instructions": {
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.5714285714285714,
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.5531914893617023,
            "Please write a Python function to generate a random password of a given length.": 0.5000000000000001,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.4878048780487805,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.47368421052631576,
            "How can you write a Python function to generate a random password with 8 characters using lowercase letters, uppercase letters, and digits?": 0.45454545454545453,
            "Write Python code to generate a random integer between a given range.\n10, 50": 0.4444444444444444,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.39999999999999997,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.3913043478260869
        },
        "avg_similarity_score": 0.17849068871898593
    },
    {
        "instruction": "Write Python code to convert a string to title case. For example, given the string \"hello world\", the code should convert it to \"Hello World\".",
        "output": "def convert_to_title_case(string):\n    return string.title()\n\ninput_string = \"hello world\"\ntitle_case_string = convert_to_title_case(input_string)\nprint(title_case_string)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5,
            "Design a Python function to convert a given string to title case.": 0.43243243243243246,
            "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"": 0.39024390243902435,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.3783783783783784,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.37499999999999994,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.3684210526315789,
            "Write Python code to find the number of vowels in a given string.": 0.3684210526315789,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.3673469387755102,
            "What is the Python code to replace all occurrences of a substring within a string?\nstring = \"Hello, World!\"\nold_substring = \"World\"\nnew_substring = \"Universe\"": 0.3673469387755102,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.36
        },
        "avg_similarity_score": 0.1830690908487951
    },
    {
        "instruction": "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.",
        "output": "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def calculate_distance(self, other_point):\n        distance = math.sqrt((self.x - other_point.x)**2 + (self.y - other_point.y)**2)\n        return distance\n    \n    def calculate_midpoint(self, other_point):\n        midpoint_x = (self.x + other_point.x) / 2\n        midpoint_y = (self.y + other_point.y) / 2\n        return Point(midpoint_x, midpoint_y)\n    \npoint1 = Point(0, 0)\npoint2 = Point(3, 4)\ndistance = point1.calculate_distance(point2)\nmidpoint = point1.calculate_midpoint(point2)\nprint(distance)\nprint(midpoint.x, midpoint.y)",
        "most_similar_instructions": {
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5660377358490567,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.5490196078431373,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.509090909090909,
            "Create a Python class to represent a Rectangle. The class should have attributes such as length and width, and methods such as calculate_area and calculate_perimeter to calculate the area and perimeter of the rectangle.": 0.46153846153846156,
            "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.": 0.4590163934426229,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.4590163934426229,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.4545454545454546,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.4285714285714286,
            "Implement a Python class to store and manipulate a 2D matrix. The class should have methods to initialize the matrix, get the value at a particular cell, set the value at a particular cell, and print the matrix.": 0.417910447761194,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.4166666666666667
        },
        "avg_similarity_score": 0.20928179801881838
    },
    {
        "instruction": "Create a Python class called \"Employee\" with attributes name, age, and salary. Implement a method called \"get_tax\" in the class that calculates and returns the tax amount based on the salary.",
        "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_tax(self):\n        tax = self.salary * 0.1\n        return tax\n\nemployee = Employee(\"John\", 30, 50000)\ntax_amount = employee.get_tax()\nprint(tax_amount)",
        "most_similar_instructions": {
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5964912280701754,
            "Design a Python class called `Employee` that has attributes for name, age, and salary. It should have a method called `get_salary` that returns the current salary of the employee.": 0.5806451612903225,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.5396825396825397,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.5373134328358209,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.4590163934426229,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.4528301886792453,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.4444444444444444,
            "Create a class called \"Cat\" with the following attributes: name, age, color. Provide a constructor to initialize these attributes and a method called \"meow\" that prints \"Meow!\".": 0.4406779661016949,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4406779661016949,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.4262295081967213
        },
        "avg_similarity_score": 0.1795273819587955
    },
    {
        "instruction": "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]",
        "output": "def calculate_sum(numbers):\n    return sum(numbers)\n\nnumbers = [5, 2, 9, 1, 3]\nprint(calculate_sum(numbers))",
        "most_similar_instructions": {
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5957446808510639,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5909090909090909,
            "Generate a Python program that calculates the average of all the elements in a list.\n[3, 6, 9, 12]": 0.5909090909090909,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5833333333333334,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5531914893617023,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.5416666666666667,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5365853658536586,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5365853658536586,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5333333333333332,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.5238095238095238
        },
        "avg_similarity_score": 0.28008629408089913
    },
    {
        "instruction": "Add error handling to the following Python code to catch any ZeroDivisionError and print \"Cannot divide by zero!\" instead of crashing the program.\ndef divide_numbers(a, b):\n    result = a / b\n    print(result)",
        "output": "def divide_numbers(a, b):\n    try:\n        result = a / b\n        print(result)\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero!\")\n\n# test the function\ndivide_numbers(10, 0)",
        "most_similar_instructions": {
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.3,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.27450980392156865,
            "What is the Python code to calculate the length of a string?": 0.26666666666666666,
            "Can you write a Python script to concatenate two strings and print the result?": 0.2553191489361702,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.2545454545454546,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.2456140350877193,
            "What is the Python code to replace all occurrences of a substring within a string?\nstring = \"Hello, World!\"\nold_substring = \"World\"\nnew_substring = \"Universe\"": 0.2456140350877193,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.23880597014925375,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.23728813559322037,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.23529411764705885
        },
        "avg_similarity_score": 0.13688490163989048
    },
    {
        "instruction": "Write a Python program that finds the sum of all numbers below 1000 that are divisible by either 3 or 5.",
        "output": "divisible_numbers = [num for num in range(1000) if num % 3 == 0 or num % 5 == 0]\nsum_of_numbers = sum(divisible_numbers)\nprint(sum_of_numbers)",
        "most_similar_instructions": {
            "Write a Python program to find the sum of all multiples of 3 or 5 below 1000.": 0.5789473684210527,
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.5,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.46511627906976744,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.46511627906976744,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.4615384615384615,
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.4571428571428571,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4545454545454545,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.43478260869565216,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.43478260869565216,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.4324324324324324
        },
        "avg_similarity_score": 0.22771422497199761
    },
    {
        "instruction": "Generate a correct python program to fulfill the following purpose\nFind the largest number in a list of integers:\n[10, 5, 20, 8, 15]",
        "output": "numbers = [10, 5, 20, 8, 15]\nmax_number = max(numbers)\nprint(max_number)",
        "most_similar_instructions": {
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.5909090909090908,
            "Generate a correct python program to fulfill the following purpose:": 0.5882352941176471,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5116279069767442,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.4888888888888889,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4736842105263159,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4736842105263159,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.47058823529411764,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.4583333333333333,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.45454545454545453
        },
        "avg_similarity_score": 0.22799678501158505
    },
    {
        "instruction": "Give a suggestion for completing the following code snippet.\n\nimport random\n\ndef generate_random_numbers(n):\n    '''This function should generate n random numbers between 1 and 100.'''",
        "output": "import random\n\ndef generate_random_numbers(n):\n    '''This function should generate n random numbers between 1 and 100.'''\n    return [random.randint(1, 100) for _ in range(n)]",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.3829787234042553,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.3555555555555555,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.34615384615384615,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.34615384615384615,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.34375,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.33962264150943394,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.3278688524590164,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.32727272727272727,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.3255813953488372,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.3225806451612903
        },
        "avg_similarity_score": 0.11959502421519623
    },
    {
        "instruction": "Can you complete the function below to calculate the factorial of a given number?\ndef factorial(n):\n    '''This function should calculate and return the factorial of n.'''",
        "output": "def factorial(n):\n    '''This function should calculate and return the factorial of n.'''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "most_similar_instructions": {
            "Complete the implementation of the Python code which calculates the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nInput: 5": 0.48275862068965514,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.43478260869565216,
            "Provide code to calculate the factorial of a given number in Python.": 0.41025641025641024,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.4,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.375,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.37209302325581395,
            "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.": 0.37037037037037035,
            "Write a Python function that calculates the factorial of a number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.\nNumber: 5": 0.36065573770491804,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.35294117647058826,
            "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.": 0.34782608695652173
        },
        "avg_similarity_score": 0.17201135283735478
    },
    {
        "instruction": "Complete the function below to generate a list of even numbers between 1 and n.\ndef generate_even_numbers(n):\n    '''This function should generate and return a list of even numbers between 1 and n.'''",
        "output": "def generate_even_numbers(n):\n    '''This function should generate and return a list of even numbers between 1 and n.'''\n    return [x for x in range(2, n+1) if x % 2 == 0]",
        "most_similar_instructions": {
            "Can you complete the function below to calculate the factorial of a given number?\ndef factorial(n):\n    '''This function should calculate and return the factorial of n.'''": 0.48387096774193544,
            "Give a suggestion for completing the following code snippet.\n\nimport random\n\ndef generate_random_numbers(n):\n    '''This function should generate n random numbers between 1 and 100.'''": 0.41935483870967744,
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.3333333333333333,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3214285714285714,
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.31578947368421045,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.3142857142857143,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.30508474576271183,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.30508474576271183,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.3018867924528302,
            "Write a Python function that takes a list of tuples as input, where each tuple contains a name and an age. The function should return a new list of tuples, where the names are sorted in alphabetical order.": 0.3013698630136986
        },
        "avg_similarity_score": 0.1547641065917928
    },
    {
        "instruction": "Can you suggest a way to reverse the order of elements in a given list without using the reverse() method?",
        "output": "def reverse_list(lst):\n    return lst[::-1]",
        "most_similar_instructions": {
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5116279069767442,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.5,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.48648648648648646,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.4736842105263158,
            "Write a Python program to count the frequency of each element in a given list.": 0.4571428571428572,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4444444444444445,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.4285714285714286,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.4210526315789474,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4186046511627907,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4117647058823529
        },
        "avg_similarity_score": 0.21414961742592742
    },
    {
        "instruction": "Complete the function below to remove all duplicate elements from a given list.\ndef remove_duplicates(lst):\n    '''This function should remove all duplicate elements from the list and return the updated list.'''",
        "output": "def remove_duplicates(lst):\n    '''This function should remove all duplicate elements from the list and return the updated list.'''\n    return list(set(lst))",
        "most_similar_instructions": {
            "Can you complete the function below to calculate the factorial of a given number?\ndef factorial(n):\n    '''This function should calculate and return the factorial of n.'''": 0.47457627118644063,
            "Complete the function below to generate a list of even numbers between 1 and n.\ndef generate_even_numbers(n):\n    '''This function should generate and return a list of even numbers between 1 and n.'''": 0.41791044776119407,
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.3333333333333333,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.32,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.3188405797101449,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.3137254901960784,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.3018867924528302,
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.2962962962962963,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.2909090909090909,
            "Create a Python function that returns the middle element(s) from a given list. If the list has an odd length, return a single middle element. If the list has an even length, return two middle elements.": 0.2898550724637681
        },
        "avg_similarity_score": 0.14560553433591814
    },
    {
        "instruction": "Could you provide an example of Python code that uses the numpy library to calculate the mean of a list of numbers?",
        "output": "import numpy as np\n\nnumbers = [1, 2, 3, 4, 5]\nmean = np.mean(numbers)\nprint(mean)",
        "most_similar_instructions": {
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.4878048780487805,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4210526315789474,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4186046511627907,
            "Provide code to calculate the factorial of a given number in Python.": 0.4117647058823529,
            "What is the Python code to calculate the length of a string?": 0.4117647058823529,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.41025641025641024,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.39999999999999997,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.39999999999999997,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.3902439024390244,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.3902439024390244
        },
        "avg_similarity_score": 0.21612604120855824
    },
    {
        "instruction": "Suggest a way to format a floating-point number in a string representation with exactly 2 decimal places in Python.",
        "output": "number = 3.14159\nformatted_number = \"{:.2f}\".format(number)\nprint(formatted_number)",
        "most_similar_instructions": {
            "How would you round a given float number to 2 decimal places in Python?": 0.4117647058823529,
            "Provide a code snippet to reverse a string in Python.": 0.4,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.38888888888888884,
            "Generate a Python script to find and replace a specific word in a given string.": 0.34285714285714286,
            "Implement a Python function called \"binary_to_decimal\" that takes a binary number as input (in the form of a string) and converts it to its decimal equivalent.": 0.3333333333333333,
            "Suggest a code snippet to check if a given string is an anagram of another string in Python.\nstring1 = \"restful\"\nstring2 = \"fluster\"": 0.3333333333333333,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.33333333333333326,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.3157894736842105,
            "Provide code to calculate the factorial of a given number in Python.": 0.3125,
            "What code would you write to check if a given number is a perfect square in Python?\nnumber = 16": 0.3076923076923077
        },
        "avg_similarity_score": 0.16170929593736189
    },
    {
        "instruction": "How would you implement a Python class that represents a circle object with attributes radius and center coordinates (x, y)?",
        "output": "class Circle:\n    def __init__(self, radius, x, y):\n        self.radius = radius\n        self.x = x\n        self.y = y\n\n    def area(self):\n        return 3.14159 * self.radius**2\n\n    def circumference(self):\n        return 2 * 3.14159 * self.radius",
        "most_similar_instructions": {
            "How would you create a dictionary that represents a person with attributes like name, age, and occupation? Provide an example.": 0.5,
            "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?": 0.48648648648648646,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.4736842105263158,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.4571428571428572,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.4571428571428572,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.4571428571428572,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.4444444444444445,
            "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.": 0.4444444444444445,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4390243902439024,
            "How would you implement a Python script that parses XML data and extracts specific elements from it?": 0.4324324324324324
        },
        "avg_similarity_score": 0.2054566318658926
    },
    {
        "instruction": "Write Python code to find the factorial of a number using recursion.\nInput: 5",
        "output": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)",
        "most_similar_instructions": {
            "Write Python code to find the number of vowels in a given string.": 0.5925925925925927,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5925925925925927,
            "Provide code to calculate the factorial of a given number in Python.": 0.5384615384615384,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5333333333333333,
            "Write a Python program to compute the factorial of a non-negative integer using iterative approach.": 0.5333333333333333,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5294117647058824,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.5185185185185186,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5
        },
        "avg_similarity_score": 0.23029558037357326
    },
    {
        "instruction": "Write Python code to capitalize the first letter of each word in a string.\nInput: \"welcome to the world of programming\"",
        "output": "string = \"welcome to the world of programming\"\ncapitalized_string = string.title()\nprint(capitalized_string)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.5909090909090909,
            "Write Python code to find the number of vowels in a given string.": 0.5294117647058824,
            "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"": 0.5,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.4615384615384615,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.4571428571428571,
            "Write a Python program to count the frequency of each element in a given list.": 0.4444444444444444,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.4324324324324324,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4324324324324324,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4242424242424242,
            "What is the Python code to calculate the length of a string?": 0.4242424242424242
        },
        "avg_similarity_score": 0.2197815470008344
    },
    {
        "instruction": "Write Python code to convert a list of strings to a single string separated by commas.\nInput: ['apple', 'banana', 'orange']",
        "output": "words = ['apple', 'banana', 'orange']\nstring = ', '.join(words)\nprint(string)",
        "most_similar_instructions": {
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.5714285714285713,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.5416666666666667,
            "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']": 0.5,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.4444444444444445,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4375,
            "Write Python code to find the number of vowels in a given string.": 0.4242424242424242,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.4117647058823529,
            "Write Python code to reverse a list in-place (without creating a new list).": 0.4117647058823529,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.4117647058823529,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.4117647058823529
        },
        "avg_similarity_score": 0.20556685978922054
    },
    {
        "instruction": "Write Python code to find the index of a specific element in a list.\nInput: [5, 3, 9, 2, 7], element = 9",
        "output": "numbers = [5, 3, 9, 2, 7]\nelement = 9\nindex = numbers.index(element)\nprint(index)",
        "most_similar_instructions": {
            "How can you write Python code to count the number of occurrences of a specific element in a list?\nelement = 7\nnumbers = [5, 2, 7, 4, 7, 1, 7]": 0.5882352941176471,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.5777777777777778,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5714285714285713,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5581395348837208,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.5555555555555556,
            "Write a Python program to find the index of an item in a list.\nInput list: [4, 8, 2, 6, 3]\nItem to find: 2": 0.5531914893617023,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.5384615384615385,
            "How can you write a Python program to find and replace a specific element with a new element in a given list?\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace = 3\nnew_element = 10": 0.5357142857142857,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.5306122448979591,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.5238095238095238
        },
        "avg_similarity_score": 0.2277515255574612
    },
    {
        "instruction": "Create a Python dictionary with keys and values swapped from an existing dictionary.\nExisting dictionary: {'a': 1, 'b': 2, 'c': 3}",
        "output": "existing_dict = {'a': 1, 'b': 2, 'c': 3}\nswapped_dict = {value: key for key, value in existing_dict.items()}",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.5263157894736842,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4489795918367347,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.42553191489361697,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.42105263157894735,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.4186046511627907,
            "Write a Python function that takes a dictionary as input and returns a sorted list of keys from the dictionary.\nexample_dict = {'b': 2, 'a': 1, 'c': 3}": 0.40816326530612246,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.38095238095238093,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.3636363636363636,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.3508771929824561,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.35
        },
        "avg_similarity_score": 0.17774908610234022
    },
    {
        "instruction": "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.",
        "output": "import random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)",
        "most_similar_instructions": {
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.6,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.5555555555555556,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5365853658536585,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.48888888888888893,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.48648648648648646,
            "How would you generate a random number between 1 and 100 using Python?": 0.4848484848484849,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.4736842105263158,
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.46153846153846156,
            "Implement a Python program that calculates the square root of a given number using the math module.\nNumber: 9": 0.46153846153846156,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.4615384615384615
        },
        "avg_similarity_score": 0.22689798566363836
    },
    {
        "instruction": "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.",
        "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\nuser_input = int(input(\"Enter a year: \"))\nif is_leap_year(user_input):\n    print(\"It is a leap year.\")\nelse:\n    print(\"It is not a leap year.\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.5957446808510639,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5925925925925926,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.5925925925925926,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5853658536585366,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5714285714285713,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5714285714285713,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5384615384615385,
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.5116279069767442,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5116279069767442,
            "Create a Python script that prompts the user to enter their age and prints whether they are a minor, an adult, or a senior citizen.": 0.5106382978723404
        },
        "avg_similarity_score": 0.23178721742172004
    },
    {
        "instruction": "Create a Python class named \"Car\" with attributes \"color\" and \"brand\". The class should have a method named \"drive\" that prints \"The [color] [brand] car is driving.\".",
        "output": "class Car:\n    def __init__(self, color, brand):\n        self.color = color\n        self.brand = brand\n\n    def drive(self):\n        print(\"The\", self.color, self.brand, \"car is driving.\")",
        "most_similar_instructions": {
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5357142857142857,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.5263157894736842,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.5,
            "Create a Python class called \"Book\" that has attributes \"title\" and \"author\". It should have a method named \"display_info\" that prints the title and author of the book.": 0.5,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.5,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.4444444444444444,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.4285714285714286,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4230769230769231,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.42105263157894735,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4074074074074074
        },
        "avg_similarity_score": 0.17916816661508964
    },
    {
        "instruction": "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"",
        "output": "text = \"This is a sample sentence. This sentence is just a sample.\"\n\nwords = text.split()\nword_counts = {}\n\nfor word in words:\n    if word not in word_counts:\n        word_counts[word] = 1\n    else:\n        word_counts[word] += 1\n\nprint(word_counts)",
        "most_similar_instructions": {
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.5263157894736842,
            "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"": 0.4897959183673469,
            "Write Python code to find the number of vowels in a given string.": 0.4651162790697674,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.4615384615384615,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.4166666666666667,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.4074074074074074,
            "Write a Python program to count the frequency of each element in a given list.": 0.4,
            "Write Python code to capitalize the first letter of each word in a string.\nInput: \"welcome to the world of programming\"": 0.39215686274509803,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.38596491228070173,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.3846153846153846
        },
        "avg_similarity_score": 0.1756960421279212
    },
    {
        "instruction": "Create a Python dictionary with keys \"name\", \"age\", and \"city\". Write a function that takes the dictionary as input and prints each key-value pair on a separate line.",
        "output": "def print_dict(dictionary):\n    for key, value in dictionary.items():\n        print(key, \":\", value)\n\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nprint_dict(data)",
        "most_similar_instructions": {
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.4313725490196078,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.4255319148936171,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.4166666666666667,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.40816326530612246,
            "Create a Python function called \"print_pattern\" that takes an integer as input and prints a pattern of numbers from 1 to the input number.\n5": 0.4,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.39215686274509803,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.38461538461538464,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.3793103448275862,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.37209302325581395,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.36666666666666664
        },
        "avg_similarity_score": 0.20297834707556942
    },
    {
        "instruction": "Complete the following Python function to sort a list of integers in ascending order using the bubble sort algorithm.\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n      for j in range(0, n-i-1):\n        if arr[j] > arr[j+1]:\n          arr[j], arr[j+1] = arr[j+1], arr[j]",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n      for j in range(0, n-i-1):\n        if arr[j] > arr[j+1]:\n          arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
        "most_similar_instructions": {
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.3561643835616438,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.2933333333333334,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.28205128205128205,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.27906976744186046,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.26666666666666666,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.2608695652173913,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.2608695652173913,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.25974025974025977,
            "Complete the Python code to check if a given number is prime or not.\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number/2) + 1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False": 0.25,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.24999999999999997
        },
        "avg_similarity_score": 0.1165244986464383
    },
    {
        "instruction": "Write a Python script that uses a for loop to print the numbers from 0 to 9.",
        "output": "for i in range(10):\n    print(i)",
        "most_similar_instructions": {
            "Write a Python script that converts a given string to uppercase.": 0.5,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.4736842105263158,
            "Can you write a Python script to concatenate two strings and print the result?": 0.45161290322580644,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.4324324324324324,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.4324324324324324,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.4117647058823529,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.409090909090909,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4000000000000001,
            "Given a list of integers, write a Python function that returns a new list with only the even numbers from the input list.": 0.39999999999999997,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.39999999999999997
        },
        "avg_similarity_score": 0.2501816130670736
    },
    {
        "instruction": "Create a Python program to merge two dictionaries into a new dictionary.\ndict1 = {'name': 'John', 'age': 25}\ndict2 = {'gender': 'Male', 'city': 'New York'}",
        "output": "dict1 = {'name': 'John', 'age': 25}\ndict2 = {'gender': 'Male', 'city': 'New York'}\nmerged_dict = {**dict1, **dict2}\nprint(merged_dict)",
        "most_similar_instructions": {
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.55,
            "Write a Python function that merges two dictionaries and returns the combined dictionary.\nDictionaries:\n{\"name\": \"John\", \"age\": 25}\n{\"city\": \"New York\", \"country\": \"USA\"}": 0.5217391304347826,
            "How can you write Python code to merge two dictionaries into one dictionary?\ndict1 = {'apple': 3, 'banana': 2}\ndict2 = {'cherry': 5, 'kiwi': 1}": 0.391304347826087,
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.3636363636363636,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.358974358974359,
            "Create a Python program to multiply all elements in a list.": 0.3529411764705882,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.35,
            "Implement a Python program that merges two sorted lists into a single sorted list.": 0.3243243243243243,
            "Write a Python program to concatenate two lists.": 0.3225806451612903,
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.32142857142857145
        },
        "avg_similarity_score": 0.1713714047939035
    },
    {
        "instruction": "Generate a Python code snippet to find the sum of all natural numbers up to a given number using a for loop.",
        "output": "def calculate_sum_of_natural_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nnumber = 10\nsum_of_natural_numbers = calculate_sum_of_natural_numbers(number)\nprint(sum_of_natural_numbers)",
        "most_similar_instructions": {
            "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.": 0.5853658536585366,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5789473684210527,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.55,
            "Write a Python function to find all prime numbers up to the given number n.": 0.5405405405405405,
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.5365853658536586,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.5217391304347826,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5142857142857142,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.5000000000000001,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.5,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.46511627906976744
        },
        "avg_similarity_score": 0.23396683317288958
    },
    {
        "instruction": "Create a Python program that takes two dates as input and calculates the number of days between them.\nDate 1: \"2022-01-01\"\nDate 2: \"2022-02-01\"",
        "output": "from datetime import datetime\n\ndef calculate_days(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    d1 = datetime.strptime(date1, date_format)\n    d2 = datetime.strptime(date2, date_format)\n    delta = d2 - d1\n    return delta.days\n\ndate1 = \"2022-01-01\"\ndate2 = \"2022-02-01\"\ndays_between = calculate_days(date1, date2)\nprint(days_between)",
        "most_similar_instructions": {
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.43478260869565216,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.425531914893617,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.39999999999999997,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.39215686274509803,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.391304347826087,
            "Create a Python function called \"power_of_n\" that takes two integers n and p as input and returns the value of n raised to the power of p.": 0.3859649122807017,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.3846153846153846,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.38095238095238093,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.3793103448275862,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.3773584905660378
        },
        "avg_similarity_score": 0.20596389252451372
    },
    {
        "instruction": "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']",
        "output": "from collections import Counter\n\nword_list = ['apple', 'banana', 'cherry', 'apple', 'banana']\nword_count = Counter(word_list)\nprint(word_count)",
        "most_similar_instructions": {
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.5957446808510639,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5909090909090908,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.5789473684210527,
            "Write a Python program to count the frequency of each element in a given list.": 0.5714285714285715,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5714285714285715,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5555555555555556,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5405405405405405,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.5142857142857143,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5106382978723405,
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.5106382978723405
        },
        "avg_similarity_score": 0.26200030784367206
    },
    {
        "instruction": "Design a Python function that calculates the area of a triangle given the lengths of its three sides.\nSide 1: 5, Side 2: 7, Side 3: 9",
        "output": "import math\n\ndef calculate_triangle_area(side1, side2, side3):\n    s = (side1 + side2 + side3) / 2\n    area = math.sqrt(s * (s - side1) * (s - side2) * (s - side3))\n    return area\n\nside1 = 5\nside2 = 7\nside3 = 9\ntriangle_area = calculate_triangle_area(side1, side2, side3)\nprint(triangle_area)",
        "most_similar_instructions": {
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5416666666666666,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5217391304347826,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5116279069767441,
            "Write a Python function that calculates the area of a triangle given its base and height.\nFunction name: calculate_triangle_area\nInput: base = 5, height = 8": 0.49056603773584906,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.4897959183673469,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.48,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.46808510638297873,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.4615384615384615,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4583333333333333,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.44897959183673464
        },
        "avg_similarity_score": 0.2365218348389615
    },
    {
        "instruction": "Write a Python script that uses the requests library to send an HTTP GET request to a given URL and prints the response status code.",
        "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nprint(f'Response status code: {response.status_code}')",
        "most_similar_instructions": {
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.48888888888888893,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4782608695652174,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4210526315789474,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.41025641025641024,
            "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.": 0.40909090909090906,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.4067796610169491,
            "Given a list called \"words\", write a Python script that concatenates all the words in the list to form a single sentence and prints it.": 0.4000000000000001,
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.4000000000000001,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.39999999999999997,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.39215686274509803
        },
        "avg_similarity_score": 0.237428969234658
    },
    {
        "instruction": "Write a Python script that takes two integers as input and prints their greatest common divisor using the Euclidean algorithm.",
        "output": "def euclidean_algorithm(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nnum1 = 24\nnum2 = 36\ngcd = euclidean_algorithm(num1, num2)\nprint(f'Greatest common divisor of {num1} and {num2}: {gcd}')",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.588235294117647,
            "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.": 0.5128205128205129,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.48888888888888893,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.48888888888888893,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4878048780487805,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.47619047619047616,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.47058823529411764,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.46511627906976744,
            "Write a program that accepts two strings as input and concatenates them using the '+' operator in Python.\n'Hello', 'World'": 0.46153846153846156,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.46153846153846156
        },
        "avg_similarity_score": 0.21913525691751454
    },
    {
        "instruction": "Create a Python program that extracts all email addresses from a given text.\nexample_text = \"Please contact us at hello@example.com for any further information.\"",
        "output": "import re\n\ndef extract_emails(text):\n    pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    return re.findall(pattern, text)\n\ntext = \"Please contact us at hello@example.com for any further information.\"\nemails = extract_emails(text)\nprint(emails)",
        "most_similar_instructions": {
            "Create a Python program that extracts all links from a given website URL.\nWebsite URL: 'https://www.google.com'": 0.4888888888888889,
            "Create a Python program that generates all possible combinations of a given string.": 0.4102564102564103,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.3902439024390244,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.380952380952381,
            "Design a Python function that removes all duplicates from a given list.": 0.3684210526315789,
            "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'": 0.35555555555555557,
            "Write a program that removes all whitespace characters from a given string and returns the result.\nString: 'hello   world'": 0.35555555555555557,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.3414634146341463,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.3414634146341463,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.33333333333333337
        },
        "avg_similarity_score": 0.17997555051291658
    },
    {
        "instruction": "Create a Python program that performs binary search on a sorted list.",
        "output": "def binary_search(numbers, target):\n    low = 0\n    high = len(numbers) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if numbers[mid] == target:\n            return mid\n        elif numbers[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nsorted_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget_number = 5\nresult = binary_search(sorted_list, target_number)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5833333333333334,
            "Implement a Python program that merges two sorted lists into a single sorted list.": 0.5384615384615384,
            "Create a Python program to multiply all elements in a list.": 0.5217391304347826,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5185185185185186,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5185185185185186,
            "Create a Python program that loops through a list and prints each element in reverse order.": 0.5,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.4827586206896552,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.4827586206896552,
            "Create a Python program that generates all possible combinations of a given string.": 0.48000000000000004,
            "Create a Python program that generates a random number within a specified range.": 0.48000000000000004
        },
        "avg_similarity_score": 0.23840433560563237
    },
    {
        "instruction": "Create a Python script that counts and prints the frequency of each word in a given text.\n\"This is a sample text. This text is used for counting word frequency.\"",
        "output": "text = \"This is a sample text. This text is used for counting word frequency.\"\nword_freq = {}\nwords = text.split()\n\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 1\n    else:\n        word_freq[word] += 1\n\nfor word, freq in word_freq.items():\n    print(f\"{word}: {freq}\")",
        "most_similar_instructions": {
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.5964912280701755,
            "How would you implement a Python program that counts the frequency of each word in a given text?\ntext = \"Python is a popular programming language. Python is used in web development, data analysis, and machine learning.\"": 0.5151515151515152,
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.5,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.4814814814814815,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.48,
            "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'": 0.47058823529411764,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4545454545454545,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.4074074074074074,
            "Write a Python program to count the frequency of each element in a given list.": 0.4,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.4
        },
        "avg_similarity_score": 0.21737087231416483
    },
    {
        "instruction": "Write a Python program to convert a string of lowercase characters to uppercase characters using the built-in string method.\nstring = 'hello world!'",
        "output": "string = 'hello world!'\nuppercase_string = string.upper()\nprint(uppercase_string)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5789473684210527,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.5106382978723404,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.46511627906976744,
            "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"": 0.46153846153846156,
            "Write Python code to convert a string to title case. For example, given the string \"hello world\", the code should convert it to \"Hello World\".": 0.4583333333333333,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.4444444444444445,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4324324324324324,
            "Write a program that removes all whitespace characters from a given string and returns the result.\nString: 'hello   world'": 0.42857142857142855,
            "Implement a Python function that reverses a string without using any built-in functions or slicing.\nInput: \"hello world\"": 0.42857142857142855,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.425531914893617
        },
        "avg_similarity_score": 0.23210427785579574
    },
    {
        "instruction": "Write Python code to extract all the unique elements from a given list and store them in a new list.",
        "output": "def get_unique_elements(input_list):\n    unique_elements = list(set(input_list))\n    return unique_elements",
        "most_similar_instructions": {
            "Write Python code to reverse a list in-place (without creating a new list).": 0.588235294117647,
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.5238095238095238,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5128205128205129,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.5,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.5,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.48648648648648646,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.48648648648648646,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.4736842105263158,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.47058823529411764,
            "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'": 0.46153846153846156
        },
        "avg_similarity_score": 0.23875427280894976
    },
    {
        "instruction": "Generate Python code to reverse the elements of a given list.",
        "output": "def reverse_list(input_list):\n    return input_list[::-1]",
        "most_similar_instructions": {
            "Generate a Python program to reverse a given string.": 0.6,
            "Write Python code to find the number of vowels in a given string.": 0.5833333333333334,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.56,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5517241379310345,
            "Write a Python function to reverse a given list of integers.": 0.5454545454545454,
            "Write a Python program to count the frequency of each element in a given list.": 0.5384615384615385,
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.5333333333333333,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5333333333333333,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.5217391304347826,
            "What is the Python code to calculate the length of a string?": 0.5217391304347826
        },
        "avg_similarity_score": 0.23887235827851683
    },
    {
        "instruction": "Create a Python program to convert a string to a list of words.",
        "output": "def string_to_list(input_string):\n    return input_string.split()",
        "most_similar_instructions": {
            "Create a Python program to multiply all elements in a list.": 0.5833333333333334,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5599999999999999,
            "Design a Python function to convert a given string to title case.": 0.5599999999999999,
            "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"": 0.5517241379310345,
            "Generate a Python program to reverse a given string.": 0.5454545454545455,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.5454545454545455,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.5405405405405406,
            "Create a Python module to implement a stack data structure using a list.": 0.5384615384615384,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5333333333333333,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5185185185185186
        },
        "avg_similarity_score": 0.26634687093713716
    },
    {
        "instruction": "Generate a Python function to remove all occurrences of a specific element from a given list.",
        "output": "def remove_element(input_list, element):\n    return [x for x in input_list if x != element]",
        "most_similar_instructions": {
            "Design a Python function that removes all duplicates from a given list.": 0.5714285714285715,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5454545454545455,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.5294117647058824,
            "Generate Python code to reverse the elements of a given list.": 0.5185185185185185,
            "Write a Python function to reverse a given list of integers.": 0.5185185185185185,
            "Generate a Python script to find and replace a specific word in a given string.": 0.5161290322580646,
            "Write a Python program to count the frequency of each element in a given list.": 0.5161290322580646,
            "How can you write a Python function to remove all punctuation from a given sentence?\nsentence = \"Hello! How are you?\"": 0.5,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.5,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.5
        },
        "avg_similarity_score": 0.25123154748771737
    },
    {
        "instruction": "Generate a Python function to find the number of prime numbers less than a given number.",
        "output": "def count_primes(number):\n    count = 0\n    for i in range(2, number):\n        if is_prime(i):\n            count += 1\n    return count",
        "most_similar_instructions": {
            "Write a Python function to find all prime numbers up to the given number n.": 0.5806451612903225,
            "Generate a Python code snippet to find the sum of all natural numbers up to a given number using a for loop.": 0.5789473684210527,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5625,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5555555555555556,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5517241379310345,
            "Write Python code to find the number of vowels in a given string.": 0.5517241379310345,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5333333333333333,
            "Generate a list of all prime numbers less than 100 using a Python program.": 0.5333333333333333,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5294117647058824,
            "Generate Python code to reverse the elements of a given list.": 0.5185185185185185
        },
        "avg_similarity_score": 0.2591797166755652
    },
    {
        "instruction": "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo",
        "output": "def is_substring(s1, s2):\n    return s1 in s2 or s2 in s1\n\nstring1 = 'hello'\nstring2 = 'lo'\nresult = is_substring(string1, string2)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5957446808510638,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5405405405405405,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.5365853658536586,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5238095238095238,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5128205128205128,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5116279069767442,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.5098039215686274,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4897959183673469,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4897959183673469
        },
        "avg_similarity_score": 0.250758003637421
    },
    {
        "instruction": "Write a Python function that checks whether two lists are circularly identical. Two lists are circularly identical if one list can be obtained by rotating the other list.\nInput: [1, 2, 3, 4, 5], [3, 4, 5, 1, 2]",
        "output": "def is_circularly_identical(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1 == list2:\n            return True\n        list2.append(list2.pop(0))\n    return False\n\ninput_list1 = [1, 2, 3, 4, 5]\ninput_list2 = [3, 4, 5, 1, 2]\nprint(is_circularly_identical(input_list1, input_list2))",
        "most_similar_instructions": {
            "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]": 0.4761904761904762,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.44776119402985076,
            "Write a Python function that takes two lists as input and returns True if they have at least one common element, False otherwise.\n[1, 2, 3], [4, 5, 6, 3]": 0.4347826086956522,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.43333333333333335,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.43333333333333335,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.4307692307692308,
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.4193548387096774,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.40625000000000006,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.3880597014925373,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.3870967741935484
        },
        "avg_similarity_score": 0.17772411247963807
    },
    {
        "instruction": "Implement a Python function that sorts a list of strings based on the length of each string in descending order.\nInput: ['apple', 'banana', 'kiwi', 'grapes']",
        "output": "def sort_strings_by_length(strings):\n    return sorted(strings, key=len, reverse=True)\n\ninput_list = ['apple', 'banana', 'kiwi', 'grapes']\nprint(sort_strings_by_length(input_list))",
        "most_similar_instructions": {
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.5714285714285713,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.5454545454545454,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.5238095238095238,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.509090909090909,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.5,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4999999999999999,
            "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]": 0.4727272727272728,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.46511627906976744,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.4444444444444445,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.43478260869565216
        },
        "avg_similarity_score": 0.2335988650322644
    },
    {
        "instruction": "Create a Python program that counts the number of words in a given sentence. Assume that words are separated by spaces.\nInput: \"Hello world! How are you today?\"",
        "output": "def count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\ninput_sentence = \"Hello world! How are you today?\"\nprint(count_words(input_sentence))",
        "most_similar_instructions": {
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.5416666666666667,
            "Create a Python program that converts a string into title case (the first letter of each word capitalized).\nInput: \"hello world, how are you?\"": 0.5,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.5,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4761904761904762,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.4615384615384615,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.45833333333333337,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.45454545454545453,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.43636363636363634,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.425531914893617,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.41860465116279066
        },
        "avg_similarity_score": 0.21978925243766417
    },
    {
        "instruction": "Write a Python function that finds and returns the mode(s) of a given list of integers. If there are multiple modes, return them in ascending order.\nInput: [1, 2, 3, 2, 4, 2]",
        "output": "def find_modes(lst):\n    count = {}\n    max_count = 0\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n        if count[num] > max_count:\n            max_count = count[num]\n    modes = [num for num, freq in count.items() if freq == max_count]\n    return sorted(modes)\n\ninput_list = [1, 2, 3, 2, 4, 2]\nprint(find_modes(input_list))",
        "most_similar_instructions": {
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5454545454545455,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5263157894736842,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.509090909090909,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.49056603773584906,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.48148148148148157,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.4727272727272727,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.4705882352941177,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.46428571428571425,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.46428571428571425
        },
        "avg_similarity_score": 0.24943069719686817
    },
    {
        "instruction": "Write Python code that checks if a number is a perfect square.\nInput: 25",
        "output": "import math\n\nnumber = 25\nsqrt = math.sqrt(number)\nis_perfect_square = sqrt == math.isqrt(number)\nprint(is_perfect_square)",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5714285714285714,
            "Create a Python program to check if a number is a perfect square or not.": 0.5517241379310344,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5454545454545454,
            "What code would you write to check if a given number is a perfect square in Python?\nnumber = 16": 0.48484848484848486,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.4666666666666667,
            "Write Python code to check if a given list is empty or not.": 0.4444444444444445,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4444444444444444,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.42857142857142855,
            "Write a Python function to check if a given year is a leap year.": 0.42857142857142855,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.4242424242424242
        },
        "avg_similarity_score": 0.2105646480279731
    },
    {
        "instruction": "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]",
        "output": "numbers = [4, 2, 7, 5, 1]\nmin_value = min(numbers)\nmax_value = max(numbers)\nprint(\"Minimum:\", min_value)\nprint(\"Maximum:\", max_value)",
        "most_similar_instructions": {
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5853658536585366,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.5116279069767442,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5,
            "Write Python code to find the largest and smallest elements in a given list.\n[10, 4, 23, 6, 1, 12]": 0.4878048780487805,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.4878048780487805,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.47619047619047616,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.4736842105263158,
            "Can you write a Python program to find the minimum and maximum values in a list without using any built-in functions or libraries?\nnumbers = [5, 2, 8, 3, 10]": 0.47058823529411764,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.46511627906976744,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4571428571428571
        },
        "avg_similarity_score": 0.19794118884566073
    },
    {
        "instruction": "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''",
        "output": "def count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''\n    vowel_count = sum([1 for char in s.lower() if char in 'aeiou'])\n    return vowel_count",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))": 0.5316455696202532,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.4827586206896552,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.4528301886792453,
            "Write Python code to find the number of vowels in a given string.": 0.43478260869565216,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.4262295081967213,
            "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"": 0.4230769230769231,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.4210526315789474,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.4210526315789474,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.41791044776119407,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.4150943396226416
        },
        "avg_similarity_score": 0.2069308358192634
    },
    {
        "instruction": "Suggest a completion for the following Python code to check if a list is sorted in ascending order.\ndef is_ascending(numbers):\n    '''This function should return True if the list ``numbers`` is sorted in ascending order and False otherwise.'''",
        "output": "def is_ascending(numbers):\n    '''This function should return True if the list ``numbers`` is sorted in ascending order and False otherwise.'''\n    return numbers == sorted(numbers)",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.4931506849315069,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.4722222222222222,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.4571428571428572,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.4109589041095891,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.4067796610169492,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.39473684210526316,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.37837837837837845,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.37500000000000006,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.3728813559322034,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.3728813559322034
        },
        "avg_similarity_score": 0.17971426063859533
    },
    {
        "instruction": "Develop a Python script that calculates the mean, median, and mode of a given list of numbers.\n[2, 3, 5, 3, 2, 8, 6, 2]",
        "output": "import statistics\n\nnums = [2, 3, 5, 3, 2, 8, 6, 2]\nmean = statistics.mean(nums)\nmedian = statistics.median(nums)\nmode = statistics.mode(nums)\n\nprint(f'Mean: {mean}')\nprint(f'Median: {median}')\nprint(f'Mode: {mode}')",
        "most_similar_instructions": {
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5957446808510639,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5909090909090909,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5531914893617023,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5454545454545454,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.5333333333333332,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.52,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5098039215686274,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.48888888888888893,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.4782608695652174,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4782608695652174
        },
        "avg_similarity_score": 0.2503767088481487
    },
    {
        "instruction": "Create a Python program that checks if two given strings are anagrams or not. Ignore case sensitivity and consider only alphanumeric characters.\n\"listen\", \"silent\"",
        "output": "def is_anagram(string1, string2):\n    alphanumeric_string1 = ''.join(ch.lower() for ch in string1 if ch.isalnum())\n    alphanumeric_string2 = ''.join(ch.lower() for ch in string2 if ch.isalnum())\n    return sorted(alphanumeric_string1) == sorted(alphanumeric_string2)\n\ninput_string1 = \"listen\"\ninput_string2 = \"silent\"\nif is_anagram(input_string1, input_string2):\n    print(f'{input_string1} and {input_string2} are anagrams.')\nelse:\n    print(f'{input_string1} and {input_string2} are not anagrams.')",
        "most_similar_instructions": {
            "Generate a Python function that checks whether two strings are anagrams or not.\nstring1 = \"listen\"\nstring2 = \"silent\"": 0.5853658536585366,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.5789473684210527,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.5599999999999999,
            "Write a Python program that checks if two lists are equal or not.": 0.5405405405405406,
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.5128205128205129,
            "Create a Python function that checks if two given strings are anagrams. Anagrams are the strings that have the same characters but can be arranged in different orders.\nString 1: \"listen\", String 2: \"silent\"": 0.4827586206896552,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.4615384615384615,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.4090909090909091,
            "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]": 0.375,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.375
        },
        "avg_similarity_score": 0.1810708818634143
    },
    {
        "instruction": "Develop a Python program that checks if a number is even or odd.",
        "output": "def check_even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\nnum = 10\nif check_even_odd(num):\n    print(num, \"is even\")\nelse:\n    print(num, \"is odd\")",
        "most_similar_instructions": {
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.5999999999999999,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5925925925925927,
            "Create a Python program to check if a number is a perfect square or not.": 0.5714285714285715,
            "Write a Python program that checks if two lists are equal or not.": 0.5384615384615384,
            "Write Python code that checks if a number is a perfect square.\nInput: 25": 0.5185185185185186,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5116279069767441,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4848484848484849,
            "Create a Python program that generates a random number within a specified range.": 0.46153846153846156,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.46153846153846156
        },
        "avg_similarity_score": 0.22503186367024058
    },
    {
        "instruction": "Create a Python function that generates all prime numbers within a given range. The function should take two parameters: start and end, and return a list of prime numbers between start and end (inclusive).",
        "output": "def generate_prime_numbers(start, end):\n    prime_numbers = []\n    for number in range(start, end + 1):\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                prime_numbers.append(number)\n    return prime_numbers",
        "most_similar_instructions": {
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.45283018867924524,
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.45283018867924524,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.43636363636363634,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.43636363636363634,
            "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10": 0.41379310344827586,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.40625,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.39130434782608703,
            "Create a Python function to find the maximum value in a list of numbers.": 0.37499999999999994,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.3636363636363637,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.36065573770491804
        },
        "avg_similarity_score": 0.22305192416828953
    },
    {
        "instruction": "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.",
        "output": "class BankAccount:\n    def __init__(self):\n        self.balance = 0\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n\n    def check_balance(self):\n        return self.balance",
        "most_similar_instructions": {
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5531914893617021,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.5090909090909091,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4897959183673469,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.4583333333333333,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.4444444444444445,
            "Create a Python class to represent a Rectangle. The class should have attributes such as length and width, and methods such as calculate_area and calculate_perimeter to calculate the area and perimeter of the rectangle.": 0.44067796610169496,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.44000000000000006,
            "Create a Python class for a Book. The class should have attributes such as title, author, and publication year, and methods such as get_title, get_author, and get_publication_year to retrieve the values of the attributes.": 0.4262295081967213,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.4230769230769231,
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.4230769230769231
        },
        "avg_similarity_score": 0.21132405187820366
    },
    {
        "instruction": "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.",
        "output": "def sort_list(numbers):\n    return sorted(numbers)",
        "most_similar_instructions": {
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5957446808510638,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5777777777777778,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5454545454545455,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.5357142857142857,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.5306122448979592,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5116279069767442,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4897959183673469,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.4827586206896552,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.47826086956521735,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.47457627118644075
        },
        "avg_similarity_score": 0.2610368193740874
    },
    {
        "instruction": "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.",
        "output": "def create_dictionary(keys):\n    return {key: None for key in keys}",
        "most_similar_instructions": {
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5294117647058824,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.5,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.5,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.4878048780487805,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4864864864864865,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.4864864864864865,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.47058823529411764,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.47058823529411764,
            "Create a Python program that loops through a list and prints each element in reverse order.": 0.45714285714285713,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4516129032258065
        },
        "avg_similarity_score": 0.2549186881411407
    },
    {
        "instruction": "Create a Python dictionary with keys \"name\", \"age\", and \"location\" and values \"John\", 30, and \"New York\" respectively.",
        "output": "my_dict = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"New York\"\n}",
        "most_similar_instructions": {
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.55,
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.5142857142857143,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.5,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.45714285714285713,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.43243243243243246,
            "Create a Python dictionary with keys \"name\", \"age\", and \"city\". Write a function that takes the dictionary as input and prints each key-value pair on a separate line.": 0.4255319148936171,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.41379310344827586,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.411764705882353,
            "Create a Python dictionary with keys and values swapped from an existing dictionary.\nExisting dictionary: {'a': 1, 'b': 2, 'c': 3}": 0.41025641025641024,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.41025641025641024
        },
        "avg_similarity_score": 0.14898590192720165
    },
    {
        "instruction": "Generate a Python program to combine two lists by alternatingly taking elements.",
        "output": "def interleave_lists(list1, list2):\n    combined = []\n\n    for i in range(max(len(list1), len(list2))):\n        if i < len(list1):\n            combined.append(list1[i])\n        if i < len(list2):\n            combined.append(list2[i])\n\n    return combined\n\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c', 'd', 'e']\ncombined_list = interleave_lists(list1, list2)\nprint(\"Combined list:\", combined_list)",
        "most_similar_instructions": {
            "Write a Python program to concatenate two lists.": 0.6,
            "Generate a Python program to find the common elements from two lists.": 0.5833333333333334,
            "Generate a Python program to reverse a given string.": 0.4761904761904762,
            "Generate a correct python program to fulfill the following purpose:": 0.45454545454545453,
            "Create a Python program to multiply all elements in a list.": 0.43478260869565216,
            "Write a Python program that checks if two lists are equal or not.": 0.4,
            "Generate a Python program to calculate the power of a number using recursion.": 0.4,
            "Implement a Python program that merges two sorted lists into a single sorted list.": 0.3846153846153846,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.3846153846153846,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.380952380952381
        },
        "avg_similarity_score": 0.17088326208065402
    },
    {
        "instruction": "Implement a Python class that represents a rectangle. The class should have methods to calculate the area and perimeter of the rectangle. It should also have attributes to store the length and width of the rectangle.",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_area(self):\n        return self.length * self.width\n    \n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\n\nrectangle = Rectangle(5, 3)\narea = rectangle.calculate_area()\nperimeter = rectangle.calculate_perimeter()\nprint(area)\nprint(perimeter)",
        "most_similar_instructions": {
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5666666666666667,
            "Create a Python class to represent a Rectangle. The class should have attributes such as length and width, and methods such as calculate_area and calculate_perimeter to calculate the area and perimeter of the rectangle.": 0.5555555555555556,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.5205479452054794,
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.4923076923076923,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.4482758620689656,
            "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.": 0.4411764705882353,
            "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.": 0.44067796610169496,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.44067796610169496,
            "Implement a Python class to store and manipulate a 2D matrix. The class should have methods to initialize the matrix, get the value at a particular cell, set the value at a particular cell, and print the matrix.": 0.43243243243243246,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4193548387096774
        },
        "avg_similarity_score": 0.19865746656786096
    },
    {
        "instruction": "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']",
        "output": "names = ['John', 'Emily', 'Michael', 'Sarah']\nsorted_names = sorted(names, key=lambda x: len(x), reverse=True)\nprint(sorted_names)",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5945945945945946,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.46511627906976744,
            "Implement a Python function that sorts a list of strings based on the length of each string in descending order.\nInput: ['apple', 'banana', 'kiwi', 'grapes']": 0.4583333333333333,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.4444444444444444,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4324324324324324,
            "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]": 0.42857142857142855,
            "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]": 0.41509433962264153,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.39999999999999997,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.39999999999999997,
            "How can you sort a list of strings in alphabetical order using Python?": 0.3888888888888889
        },
        "avg_similarity_score": 0.16310620870467038
    },
    {
        "instruction": "Complete the following Python code to calculate the sum of all values in a dictionary.\ndata = {'a': 5, 'b': 3, 'c': 10}",
        "output": "data = {'a': 5, 'b': 3, 'c': 10}\nsum_values = sum(data.values())\nprint(sum_values)",
        "most_similar_instructions": {
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.56,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.55,
            "What is the Python code to calculate the length of a string?": 0.4705882352941177,
            "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]": 0.46511627906976744,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.45454545454545453,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.44897959183673464,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.43902439024390244,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.4285714285714286,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.4285714285714286,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.4285714285714286
        },
        "avg_similarity_score": 0.1912925396716513
    },
    {
        "instruction": "Complete the following Python code to find the index of the first occurrence of a given value in a list.\nnumbers = [1, 3, 5, 7, 9, 3, 4, 5]\nvalue = 3",
        "output": "numbers = [1, 3, 5, 7, 9, 3, 4, 5]\nvalue = 3\nindex = numbers.index(value)\nprint(index)",
        "most_similar_instructions": {
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.5862068965517241,
            "Write Python code to find the index of a specific element in a list.\nInput: [5, 3, 9, 2, 7], element = 9": 0.5283018867924528,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5245901639344263,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.5245901639344263,
            "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]": 0.5,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.5,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.4814814814814815,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.48000000000000004,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.48000000000000004,
            "How can you write Python code to count the number of occurrences of a specific element in a list?\nelement = 7\nnumbers = [5, 2, 7, 4, 7, 1, 7]": 0.4666666666666667
        },
        "avg_similarity_score": 0.20346892430235017
    },
    {
        "instruction": "Create a Python list with numbers from 1 to 10 and then extract and print the even numbers.",
        "output": "numbers = list(range(1, 11))\neven_numbers = [num for num in numbers if num % 2 == 0]\nprint(even_numbers)",
        "most_similar_instructions": {
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.4615384615384615,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.45714285714285713,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.4444444444444444,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.4444444444444444,
            "Create a Python program to find the first n Fibonacci numbers.": 0.41379310344827586,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.41025641025641024,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.39999999999999997,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.3902439024390244,
            "Can you write a Python script to concatenate two strings and print the result?": 0.375
        },
        "avg_similarity_score": 0.20999037172914248
    },
    {
        "instruction": "Explain the difference between '==' and 'is' operators in Python.",
        "output": "The '==' operator in Python checks if two objects have the same value. For example, \"a == b\" will return True if the values of 'a' and 'b' are equal.\nThe 'is' operator, on the other hand, checks if two objects refer to the same memory location. It checks for object identity. For example, \"a is b\" will return True if 'a' and 'b' are the same object in memory.",
        "most_similar_instructions": {
            "Provide code to calculate the factorial of a given number in Python.": 0.28571428571428575,
            "How can you generate a random integer between a given range in Python?": 0.27272727272727276,
            "How would you generate a random number between 1 and 100 using Python?": 0.27272727272727276,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.26666666666666666,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.2608695652173913,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.25,
            "Write Python code to calculate the Euclidean distance between two points in a two-dimensional space.": 0.24000000000000005,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.24000000000000005,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.24000000000000005,
            "How can you concatenate two lists in Python?": 0.23529411764705882
        },
        "avg_similarity_score": 0.10610714409529902
    },
    {
        "instruction": "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.",
        "output": "days_dict = {\"Monday\": 1, \"Tuesday\": 2, \"Wednesday\": 3, \"Thursday\": 4, \"Friday\": 5, \"Saturday\": 6, \"Sunday\": 7}",
        "most_similar_instructions": {
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.47619047619047616,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.46511627906976744,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.4390243902439024,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.4324324324324324,
            "Create a Python dictionary with keys \"name\", \"age\", and \"location\" and values \"John\", 30, and \"New York\" respectively.": 0.4210526315789474,
            "Create a Python dictionary that stores the names of fruits as keys and their corresponding quantities as values. Add the following items to the dictionary: 'apple' with quantity 3, 'banana' with quantity 5, and 'orange' with quantity 2.": 0.41379310344827586,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.41025641025641024,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.39285714285714285,
            "Create a Python dictionary with keys and values swapped from an existing dictionary.\nExisting dictionary: {'a': 1, 'b': 2, 'c': 3}": 0.3902439024390244,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.380952380952381
        },
        "avg_similarity_score": 0.19941567982688116
    },
    {
        "instruction": "Explain how to handle exceptions in Python using try-except blocks.",
        "output": "In Python, you can handle exceptions using try-except blocks. You enclose the code that might raise an exception in the try block, and then specify the type of exception you want to handle in the corresponding except block. For example:\n\ntry:\n    # code that might raise an exception\n    ...\nexcept ValueError:\n    # code to handle the ValueError exception\n    ...\nexcept ZeroDivisionError:\n    # code to handle the ZeroDivisionError exception\n    ...\nYou can also use a generic except block to catch any type of exception, although it is generally recommended to handle specific exceptions for better error handling.",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.380952380952381,
            "How would you round a given float number to 2 decimal places in Python?": 0.32,
            "How can you concatenate two lists in Python?": 0.3157894736842105,
            "How would you create an empty list in Python?": 0.3,
            "Explain the difference between '==' and 'is' operators in Python.": 0.3,
            "Provide a code snippet to reverse a string in Python.": 0.28571428571428564,
            "How can you remove duplicate elements from a list in Python?": 0.2727272727272727,
            "Provide code to calculate the factorial of a given number in Python.": 0.2608695652173913,
            "How can you generate a random integer between a given range in Python?": 0.24999999999999994,
            "How can you sort a list of strings in alphabetical order using Python?": 0.24999999999999994
        },
        "avg_similarity_score": 0.08681979907190135
    },
    {
        "instruction": "Create a Python class named \"Circle\" with attribute radius. Implement methods to compute the area and circumference of the circle.",
        "output": "import math\n\nclass Circle:\n  def __init__(self, radius):\n    self.radius = radius\n\n  def compute_area(self):\n    return math.pi * self.radius**2\n\n  def compute_circumference(self):\n    return 2 * math.pi * self.radius",
        "most_similar_instructions": {
            "Create a Python class called \"Circle\" that has one attribute: radius. Implement methods called \"area\" that calculates and returns the area of the circle, and \"circumference\" that calculates and returns the circumference of the circle.": 0.5818181818181818,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.5641025641025641,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5454545454545454,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5454545454545454,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5116279069767442,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.5106382978723405,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.45161290322580644,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.4000000000000001,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.39999999999999997,
            "Create a Python class called `Circle` that has a radius attribute and a method called `calculate_area` that returns the area of the circle (pi * radius^2). Use the math module to access the constant pi.": 0.39285714285714285
        },
        "avg_similarity_score": 0.20690911010897617
    },
    {
        "instruction": "Write a Python program that reads a list of numbers from the user, separates the positive and negative numbers, and prints them separately.",
        "output": "numbers = input(\"Enter a list of numbers: \").split()\npositive_numbers = []\nnegative_numbers = []\nfor num in numbers:\n  if int(num) > 0:\n    positive_numbers.append(num)\n  elif int(num) < 0:\n    negative_numbers.append(num)\nprint(\"Positive numbers:\", positive_numbers)\nprint(\"Negative numbers:\", negative_numbers)",
        "most_similar_instructions": {
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.5652173913043478,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.5238095238095238,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.4680851063829787,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.46511627906976744,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.4583333333333333,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4571428571428571,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4545454545454545,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.4444444444444445,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.4444444444444444,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4444444444444444
        },
        "avg_similarity_score": 0.24945639294509236
    },
    {
        "instruction": "How would you implement a Python class with a constructor and a method that returns the square of a given number?",
        "output": "class Numbers:\n    def __init__(self, number):\n        self.number = number\n    \n    def square(self):\n        return self.number ** 2",
        "most_similar_instructions": {
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5,
            "Implement a Python program that calculates the square root of a given number using the math module.\nNumber: 9": 0.5,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.4864864864864864,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4782608695652174,
            "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?": 0.4736842105263158,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.47058823529411764,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.4615384615384615,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4571428571428571,
            "Write a Python function that returns a list of all divisors of a given number.": 0.4444444444444444
        },
        "avg_similarity_score": 0.25435346218350113
    },
    {
        "instruction": "Please complete the code snippet to find the largest element in a given list.\nnumbers = [10, 24, 8, 45, 18]",
        "output": "numbers = [10, 24, 8, 45, 18]\nlargest = max(numbers)\nprint(f\"The largest element in the list is: {largest}\")",
        "most_similar_instructions": {
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.6,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.6,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.5365853658536585,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.5238095238095238,
            "Write Python code to find the largest and smallest elements in a given list.\n[10, 4, 23, 6, 1, 12]": 0.5,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.46153846153846156,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.45454545454545453,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.45,
            "Write code in Python to find the sum of all elements in a given list.\n[10, 20, 30, 40, 50]": 0.45,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.4390243902439024
        },
        "avg_similarity_score": 0.16742938439783916
    },
    {
        "instruction": "Write a Python function that finds the maximum value in a given dictionary and returns the key corresponding to that value.",
        "output": "def find_max_value(dictionary):\n    max_value = max(dictionary.values())\n    max_key = [key for key, value in dictionary.items() if value == max_value]\n    return max_key[0]",
        "most_similar_instructions": {
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5238095238095238,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.5,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4864864864864864,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.47619047619047616,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.4680851063829788,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.46511627906976744,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4615384615384615,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4615384615384615,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.4615384615384615
        },
        "avg_similarity_score": 0.2728262566581729
    },
    {
        "instruction": "Create a Python function that concatenates two lists into one and returns the concatenated list.",
        "output": "def concatenate_lists(list1, list2):\n    concatenated_list = list1 + list2\n    return concatenated_list",
        "most_similar_instructions": {
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5806451612903225,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4848484848484848,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4827586206896552,
            "Implement a Python program that merges two sorted lists into a single sorted list.": 0.4827586206896552,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.47368421052631576,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.4615384615384615,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4571428571428572,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.45,
            "What is the Python code to concatenate two lists into one list?": 0.4444444444444445,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4444444444444444
        },
        "avg_similarity_score": 0.24349592848830476
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)",
        "output": "import random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)\n# Output: A random number between 1 and 100",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.5925925925925926,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4878048780487805,
            "Give a suggestion for completing the following code snippet.\n\nimport random\n\ndef generate_random_numbers(n):\n    '''This function should generate n random numbers between 1 and 100.'''": 0.47826086956521735,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.46153846153846156,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.425531914893617,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.41025641025641024,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.40909090909090906,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.39999999999999997,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.39999999999999997,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.38461538461538464
        },
        "avg_similarity_score": 0.1383214539531219
    },
    {
        "instruction": "Write a Python script that randomly selects a name from a list and prints it.",
        "output": "import random\n\nnames = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\nrandom_name = random.choice(names)\nprint(random_name)",
        "most_similar_instructions": {
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.5,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.4848484848484848,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.4848484848484848,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4848484848484848,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4827586206896552,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.47368421052631576,
            "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.": 0.47058823529411764,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.47058823529411764
        },
        "avg_similarity_score": 0.2625076808129855
    },
    {
        "instruction": "Write a Python program to truncate a given string to a specified length.\n\"Hello, World!\", 7",
        "output": "def truncate_string(string, length):\n    if len(string) <= length:\n        return string\n    else:\n        return string[:length] + \"...\"\n\nstring = \"Hello, World!\"\ntruncated = truncate_string(string, 7)\nprint(truncated)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5806451612903225,
            "Generate a Python program to reverse a given string.": 0.56,
            "Create a Python program to convert a string to a list of words.": 0.5517241379310345,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5333333333333333,
            "Write a Python script that converts a given string to uppercase.": 0.5185185185185185,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5161290322580646,
            "Write a Python program to convert a string of lowercase characters to uppercase characters using the built-in string method.\nstring = 'hello world!'": 0.5128205128205128,
            "Design a Python function to convert a given string to title case.": 0.5,
            "Write a Python function to check if a given year is a leap year.": 0.4666666666666667,
            "Please write a Python function to generate a random password of a given length.": 0.4666666666666667
        },
        "avg_similarity_score": 0.249747456217262
    },
    {
        "instruction": "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).",
        "output": "def is_palindrome(string):\n    return string == string[::-1]\n\nuser_input = input(\"Enter a string: \")\nif is_palindrome(user_input):\n    print(\"The string is a palindrome.\")\nelse:\n    print(\"The string is not a palindrome.\")",
        "most_similar_instructions": {
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5882352941176471,
            "Write a Python program that checks if a given string is a palindrome ignoring spaces and punctuation.\n\"A man, a plan, a canal - Panama!\"": 0.5581395348837209,
            "Create a Python function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.": 0.5454545454545454,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5294117647058824,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5283018867924528,
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.5238095238095238,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.5238095238095238,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5217391304347826,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5128205128205129,
            "Create a Python program that generates all possible combinations of a given string.": 0.5
        },
        "avg_similarity_score": 0.24712006083232996
    },
    {
        "instruction": "Write Python code to sort a list of strings alphabetically.\nlst = [\"banana\", \"apple\", \"cherry\", \"blueberry\"]",
        "output": "lst = [\"banana\", \"apple\", \"cherry\", \"blueberry\"]\nsorted_lst = sorted(lst)\nprint(sorted_lst)",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5517241379310344,
            "Write Python code to convert a list of strings to a single string separated by commas.\nInput: ['apple', 'banana', 'orange']": 0.5142857142857143,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.4827586206896552,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.4666666666666667,
            "Write a Python function to reverse a given list of integers.": 0.4615384615384615,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.45161290322580644,
            "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]": 0.4444444444444444,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.43749999999999994,
            "Write Python code to check if a given list is empty or not.": 0.42857142857142855,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.42424242424242425
        },
        "avg_similarity_score": 0.1976408268451689
    },
    {
        "instruction": "Write a Python script that calculates the area of a rectangle with given length and width, then stores the result in a variable named 'area'.",
        "output": "length = 5\nwidth = 3\narea = length * width\nprint(\"The area of the rectangle is:\", area)",
        "most_similar_instructions": {
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.5777777777777778,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.5333333333333332,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5128205128205129,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.509090909090909,
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.49056603773584906,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4782608695652174,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.4782608695652174,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4761904761904762,
            "Write a Python function that calculates the area of a triangle given its base and height.\nFunction name: calculate_triangle_area\nInput: base = 5, height = 8": 0.47058823529411764,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.46511627906976744
        },
        "avg_similarity_score": 0.2583117463917181
    },
    {
        "instruction": "Provide a complete code for a Python class named \"Student\" with attributes name and age. The class should have a method named \"display_info\" that prints the name and age of the student.",
        "output": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def display_info(self):\n        print(f\"Name: {self.name}\\nAge: {self.age}\")\n        \nstudent1 = Student(\"Alice\", 18)\nstudent1.display_info()",
        "most_similar_instructions": {
            "Create a Python class called \"Book\" that has attributes \"title\" and \"author\". It should have a method named \"display_info\" that prints the title and author of the book.": 0.5806451612903226,
            "Create a Python class named \"Car\" with attributes \"color\" and \"brand\". The class should have a method named \"drive\" that prints \"The [color] [brand] car is driving.\".": 0.5666666666666667,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5483870967741935,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.5161290322580646,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.507936507936508,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.4838709677419355,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.4666666666666667,
            "Design a Python class called `Employee` that has attributes for name, age, and salary. It should have a method called `get_salary` that returns the current salary of the employee.": 0.4444444444444445,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.4411764705882353,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.41379310344827586
        },
        "avg_similarity_score": 0.18039125812397616
    },
    {
        "instruction": "Complete the following Python code to reverse a string.\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string",
        "output": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string",
        "most_similar_instructions": {
            "Complete the following Python code to reverse a given string.\ndef reverse_string(string):\n    # TODO: Implement the function": 0.5777777777777777,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.5245901639344261,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.4727272727272727,
            "Complete the following Python code to convert a string to a dictionary where the keys are the characters and the values are the number of occurrences of each character.\ndef string_to_dict(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict": 0.40476190476190477,
            "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))": 0.3835616438356165,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.3448275862068965,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.34375,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.3333333333333333,
            "Provide a code snippet to reverse a string in Python.": 0.32432432432432434,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.3225806451612903
        },
        "avg_similarity_score": 0.1287095310110642
    },
    {
        "instruction": "Complete the following Python code to sort a list of strings in descending order.\ndef sort_strings(strings):\n    strings.sort(reverse=True)\n    return strings",
        "output": "def sort_strings(strings):\n    strings.sort(reverse=True)\n    return strings",
        "most_similar_instructions": {
            "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']": 0.5957446808510638,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.5818181818181819,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5789473684210527,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.45454545454545453,
            "Complete the following Python code to reverse a given string.\ndef reverse_string(string):\n    # TODO: Implement the function": 0.42857142857142855,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4210526315789474,
            "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]": 0.4186046511627907,
            "Write Python code to sort a list of strings alphabetically.\nlst = [\"banana\", \"apple\", \"cherry\", \"blueberry\"]": 0.4102564102564102,
            "Complete the following Python code to reverse a string.\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string": 0.39215686274509803,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.39024390243902435
        },
        "avg_similarity_score": 0.16093544336176532
    },
    {
        "instruction": "Implement a Python function that checks if a given number is prime (only divisible by 1 and itself) and returns True if it is, and False otherwise.\nExample input: 7",
        "output": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "most_similar_instructions": {
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.5517241379310344,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.5333333333333333,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4814814814814815,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.4727272727272728,
            "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2": 0.43749999999999994,
            "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17": 0.4363636363636364,
            "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"": 0.423076923076923,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.4
        },
        "avg_similarity_score": 0.20214003848762302
    },
    {
        "instruction": "Write a Python function that finds the second smallest and second largest values in a given list and returns them as a tuple (second_smallest, second_largest).",
        "output": "def find_second_smallest_largest(numbers):\n    sorted_numbers = sorted(numbers)\n    second_smallest = sorted_numbers[1]\n    second_largest = sorted_numbers[-2]\n    return (second_smallest, second_largest)",
        "most_similar_instructions": {
            "Write a Python function that finds the maximum value in a given dictionary and returns the key corresponding to that value.": 0.5,
            "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'": 0.47826086956521735,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.47826086956521735,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.47619047619047616,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.47058823529411764,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4583333333333333,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4444444444444445,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.4444444444444444,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.44000000000000006,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.425531914893617
        },
        "avg_similarity_score": 0.24466899020136518
    },
    {
        "instruction": "Design a Python function that generates n Fibonacci numbers.\n8",
        "output": "def generate_fibonacci_numbers(n):\n    fibonacci_list = [0, 1]\n    while len(fibonacci_list) < n:\n        next_number = fibonacci_list[-1] + fibonacci_list[-2]\n        fibonacci_list.append(next_number)\n    return fibonacci_list\n\nfib_count = 8\nprint(generate_fibonacci_numbers(fib_count))",
        "most_similar_instructions": {
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.5714285714285713,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5454545454545454,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.48,
            "Create a Python program to find the first n Fibonacci numbers.": 0.47619047619047616,
            "Create a Python function that prints the Fibonacci sequence up to the n-th term.\n8": 0.4615384615384615,
            "Design a Python function that removes all duplicates from a given list.": 0.45454545454545453,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4347826086956522,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.41666666666666663,
            "Design a Python function that reverses the order of words in a given sentence.": 0.41666666666666663,
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.41666666666666663
        },
        "avg_similarity_score": 0.19671312131381916
    },
    {
        "instruction": "Write a Python program that takes a string as input and reverses the order of the words in the string.\nInput: \"Hello World! Python is amazing\"\nOutput: \"amazing is Python World! Hello\"",
        "output": "def reverse_words(string):\n    words = string.split()\n    reversed_string = \" \".join(reversed(words))\n    return reversed_string\n\nstring = \"Hello World! Python is amazing\"\nprint(reverse_words(string))",
        "most_similar_instructions": {
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5882352941176471,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.5714285714285715,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.5283018867924528,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.5000000000000001,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.4927536231884059,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4912280701754386,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.49056603773584906,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4827586206896552,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4666666666666667,
            "Write a Python function that takes a list as input and returns a new list with the unique elements from the input list. The order of the elements in the output list should be the same as the input list.": 0.4444444444444445
        },
        "avg_similarity_score": 0.23356809539058138
    },
    {
        "instruction": "Write a Python program that converts a temperature from Fahrenheit to Celsius.\nInput: 98.6\nOutput: 37.0",
        "output": "def fahrenheit_to_celsius(temperature):\n    return (temperature - 32) * 5/9\n\nfahrenheit = 98.6\ncelsius = fahrenheit_to_celsius(fahrenheit)\nprint(celsius)",
        "most_similar_instructions": {
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.5625000000000001,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.5454545454545454,
            "Write a Python program that converts a number in decimal format to binary format.": 0.5,
            "Write a Python code snippet to convert a temperature in Fahrenheit to Celsius.\nfahrenheit = 86": 0.4848484848484848,
            "Write a Python script that converts a given string to uppercase.": 0.4827586206896552,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.42424242424242425,
            "Write a Python function that converts a sentence into title case.": 0.41379310344827586,
            "Write a Python script that uses a for loop to print the numbers from 0 to 9.": 0.39999999999999997,
            "Implement a Python program that converts a string to title case (each word starts with an uppercase letter).\nInput string: 'python code generator'": 0.3902439024390244,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.3888888888888889
        },
        "avg_similarity_score": 0.218709052958635
    },
    {
        "instruction": "Write a Python program that checks whether a given string is a palindrome or not. A palindrome is a word that is the same when reversed (e.g. \"level\" or \"radar\").\nInput: \"madam\"\nOutput: True",
        "output": "def is_palindrome(string):\n    return string == string[::-1]\n\nstring = \"madam\"\nprint(is_palindrome(string))",
        "most_similar_instructions": {
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.5806451612903226,
            "Write a Python function that checks whether a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors.": 0.5294117647058822,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.4848484848484849,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.4814814814814815,
            "Write a Python program that checks if a given string is a palindrome ignoring spaces and punctuation.\n\"A man, a plan, a canal - Panama!\"": 0.4745762711864407,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.4615384615384615,
            "Create a Python function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.": 0.4507042253521127,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.44,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.43636363636363634,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.43636363636363634
        },
        "avg_similarity_score": 0.19269724850324518
    },
    {
        "instruction": "Create a Python program that calculates the area of a circle. The program should ask the user for the radius of the circle and print the calculated area.",
        "output": "import math\n\ndef calculate_area(radius):\n    return math.pi * radius**2\n\nradius = float(input(\"Enter the radius of the circle: \"))\narea = calculate_area(radius)\nprint(area)",
        "most_similar_instructions": {
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5454545454545454,
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.5423728813559322,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.5172413793103449,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.5,
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.47058823529411764,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4230769230769231,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.42105263157894735,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.41666666666666663,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.41666666666666663,
            "Write a Python script that calculates the area of a rectangle with given length and width, then stores the result in a variable named 'area'.": 0.4150943396226415
        },
        "avg_similarity_score": 0.22738672469133248
    },
    {
        "instruction": "Create a Python program that generates a random password containing a combination of letters (upper and lower case) and special characters. The password should have a length of 10 characters.",
        "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(10))\n    \n    return password\n\npassword = generate_password()\nprint(password)",
        "most_similar_instructions": {
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.5245901639344263,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5185185185185186,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.4912280701754386,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.46808510638297873,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.45833333333333326,
            "Implement a Python program that generates a Fibonacci sequence up to a specified number of terms and prints the sequence.\nNumber of terms: 10": 0.4444444444444445,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.4313725490196078,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4285714285714285,
            "Write a Python program that generates a random password of given length. The password should include at least one lowercase letter, one uppercase letter, one digit, and one special character.\n10": 0.4262295081967213
        },
        "avg_similarity_score": 0.21555188335158745
    },
    {
        "instruction": "Develop a Python function that checks if a given string is a palindrome. Ignore case and ignore spaces.\nString: \"Able was I ere I saw Elba\"",
        "output": "def is_palindrome(string):\n    string = string.replace(\" \", \"\").lower()\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n\nstring = \"Able was I ere I saw Elba\"\nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")",
        "most_similar_instructions": {
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5853658536585367,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4897959183673469,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.4888888888888889,
            "Write a Python program that checks if a given string is a palindrome ignoring spaces and punctuation.\n\"A man, a plan, a canal - Panama!\"": 0.48000000000000004,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.47058823529411764,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.4666666666666667,
            "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"": 0.4583333333333333,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4583333333333333,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.45,
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.44897959183673475
        },
        "avg_similarity_score": 0.20307155736864752
    },
    {
        "instruction": "Write a Python function that performs matrix multiplication between two given matrices.\n[[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]]",
        "output": "import numpy as np\n\ndef matrix_multiplication(matrix1, matrix2):\n    result = np.dot(matrix1, matrix2)\n    return result\n\nmatrix1 = np.array([[1, 2, 3], [4, 5, 6]])\nmatrix2 = np.array([[7, 8], [9, 10], [11, 12]])\nprint(matrix_multiplication(matrix1, matrix2))",
        "most_similar_instructions": {
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.5531914893617021,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5490196078431373,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4888888888888889,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.4615384615384615,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.45901639344262296,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.4583333333333333,
            "Write a Python function that takes two lists as input and returns True if they have at least one common element, False otherwise.\n[1, 2, 3], [4, 5, 6, 3]": 0.4444444444444445,
            "Write a Python function that checks whether all elements in a list are even numbers.\nlist = [2, 4, 6, 8, 10]": 0.4444444444444445,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.43999999999999995,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.4390243902439025
        },
        "avg_similarity_score": 0.19810872684244363
    },
    {
        "instruction": "Can you generate Python code to convert a string to lowercase?",
        "output": "text = \"HELLO WORLD\"\nlowercase_text = text.lower()\nprint(lowercase_text)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5714285714285713,
            "How can you implement a Python function to reverse a string?": 0.5454545454545454,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5384615384615385,
            "Design a Python function to convert a given string to title case.": 0.5217391304347826,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.5185185185185185,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.5185185185185185,
            "Generate a Python program to reverse a given string.": 0.5,
            "Create a Python program to convert a string to a list of words.": 0.4999999999999999,
            "Write a Python code snippet to convert a temperature in Fahrenheit to Celsius.\nfahrenheit = 86": 0.4615384615384615,
            "Generate Python code to reverse the elements of a given list.": 0.45454545454545453
        },
        "avg_similarity_score": 0.18436436681761437
    },
    {
        "instruction": "Generate Python code to parse a JSON string into a dictionary.",
        "output": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nparsed_json = json.loads(json_string)\nprint(parsed_json)",
        "most_similar_instructions": {
            "Can you generate Python code to convert a string to lowercase?": 0.5454545454545454,
            "Generate a Python program to reverse a given string.": 0.5,
            "Generate Python code to reverse the elements of a given list.": 0.45454545454545453,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.45161290322580644,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.4444444444444444,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.43478260869565216,
            "What is the Python code to calculate the length of a string?": 0.43478260869565216,
            "Create a Python program to convert a string to a list of words.": 0.41666666666666663,
            "Write Python code to find the number of vowels in a given string.": 0.41666666666666663,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.41379310344827586
        },
        "avg_similarity_score": 0.17813130216265355
    },
    {
        "instruction": "Write a Python program to create a dictionary from two lists, where the keys come from one list and the values come from the other list.",
        "output": "keys = ['name', 'age', 'city']\nvalues = ['John', 30, 'New York']\n\ndictionary = dict(zip(keys, values))\nprint(dictionary)",
        "most_similar_instructions": {
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.5,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.4444444444444445,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.4444444444444444,
            "Write a Python program to concatenate two lists.": 0.411764705882353,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.39999999999999997,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.39999999999999997,
            "Create a Python function that concatenates two lists into one and returns the concatenated list.": 0.3902439024390244,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.3859649122807018,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3829787234042554,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.37500000000000006
        },
        "avg_similarity_score": 0.22637447230331872
    },
    {
        "instruction": "Create a Python function that checks if a given string is a palindrome. Palindromes are words or phrases that read the same forwards and backwards, ignoring spaces, punctuation, and capitalization.\n\"Madam Arora teaches malayalam\"",
        "output": "def is_palindrome(s):\n    s = s.replace(' ', '').lower()\n    return s == s[::-1]\n\ninput_string = \"Madam Arora teaches malayalam\"\nprint(is_palindrome(input_string))",
        "most_similar_instructions": {
            "Create a Python function that takes a string and checks if it is a valid palindrome. Ignore spaces, capitalization, and punctuation.\n\"Madam Arora teaches malayalam\"": 0.5423728813559322,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5294117647058824,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.5283018867924528,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.5161290322580646,
            "Write a Python program that checks if a given string is a palindrome ignoring spaces and punctuation.\n\"A man, a plan, a canal - Panama!\"": 0.4827586206896552,
            "Develop a Python function that checks if a given string is a palindrome. Ignore case and ignore spaces.\nString: \"Able was I ere I saw Elba\"": 0.4666666666666667,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.45901639344262296,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.4489795918367347,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.4406779661016949,
            "Write a Python program that checks whether a given string is a palindrome or not. A palindrome is a word that is the same when reversed (e.g. \"level\" or \"radar\").\nInput: \"madam\"\nOutput: True": 0.43478260869565216
        },
        "avg_similarity_score": 0.1970476991464943
    },
    {
        "instruction": "Implement a Python program that calculates the factorial of a given number n using recursion.\n5! = 5 x 4 x 3 x 2 x 1",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 5\nprint(factorial(number))",
        "most_similar_instructions": {
            "Implement a Python program that calculates the square root of a given number using the math module.\nNumber: 9": 0.5454545454545454,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5128205128205129,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.48780487804878053,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.48,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.47368421052631576,
            "Generate a Python program to calculate the power of a number using recursion.": 0.47368421052631576,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.4615384615384615,
            "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.": 0.45454545454545453,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.4444444444444445,
            "Develop a Python script that calculates the mean, median, and mode of a given list of numbers.\n[2, 3, 5, 3, 2, 8, 6, 2]": 0.44
        },
        "avg_similarity_score": 0.22557284446474063
    },
    {
        "instruction": "Write a Python function that takes a string as input and checks if it is a valid email address. Valid email addresses should contain an '@' symbol and a domain name.",
        "output": "def is_valid_email(email):\n    if '@' in email and '.' in email[email.index('@'):]:\n        return True\n    else:\n        return False\n\nemail = input(\"Enter an email address: \")\nis_valid = is_valid_email(email)\nprint(\"Is it a valid email address?\", is_valid)",
        "most_similar_instructions": {
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.56,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.5517241379310344,
            "Create a Python function that takes a string and checks if it is a valid palindrome. Ignore spaces, capitalization, and punctuation.\n\"Madam Arora teaches malayalam\"": 0.5454545454545454,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.49056603773584906,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.4897959183673469,
            "Create a Python function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.": 0.4848484848484848,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.47058823529411764,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4642857142857143,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4444444444444445
        },
        "avg_similarity_score": 0.21378720340096283
    },
    {
        "instruction": "Create a Python program to find the length of a string.\n\"Hello, World!\"",
        "output": "def find_length(s):\n    return len(s)\n\nresult = find_length(\"Hello, World!\")\nprint(result)",
        "most_similar_instructions": {
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.5945945945945945,
            "Create a Python program to find the first n Fibonacci numbers.": 0.5833333333333334,
            "What is the Python code to calculate the length of a string?": 0.5599999999999999,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5517241379310345,
            "Write a Python program to truncate a given string to a specified length.\n\"Hello, World!\", 7": 0.5517241379310345,
            "Generate a Python program to reverse a given string.": 0.5454545454545455,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.5454545454545455,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5384615384615384,
            "Create a Python program to convert a string to a list of words.": 0.5384615384615384,
            "Write Python code to find the number of vowels in a given string.": 0.5384615384615384
        },
        "avg_similarity_score": 0.26649205631675366
    },
    {
        "instruction": "Write a Python code snippet to merge two dictionaries.\ndict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}",
        "output": "dict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}\n\nmerged_dict = {**dict1, **dict2}\nprint(merged_dict)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.5555555555555555,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.5555555555555555,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.5,
            "How can you write Python code to merge two dictionaries into one dictionary?\ndict1 = {'apple': 3, 'banana': 2}\ndict2 = {'cherry': 5, 'kiwi': 1}": 0.47619047619047616,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.45,
            "Write Python code to concatenate two strings.\nString 1: \"Hello\"\nString 2: \"World\"": 0.4375,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.42105263157894735,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.4186046511627907,
            "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]": 0.4186046511627907,
            "Write Python code to check if two given lists are equal regardless of the order of elements.\n[1, 2, 3, 4], [4, 3, 2, 1]": 0.40909090909090906
        },
        "avg_similarity_score": 0.17918525002702604
    },
    {
        "instruction": "How would you implement a function in Python to check if a given word is a palindrome or not?\nracecar",
        "output": "def is_palindrome(word):\n    word = word.lower()\n    return word == word[::-1]\n\nword = 'racecar'\nif is_palindrome(word):\n    print(f'{word} is a palindrome')\nelse:\n    print(f'{word} is not a palindrome')",
        "most_similar_instructions": {
            "Create a Python program to check if a number is a perfect square or not.": 0.5714285714285715,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.5555555555555556,
            "Provide a way to check if a given string is a palindrome in Python.\nString: \"racecar\"": 0.5555555555555556,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.553191489361702,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.55,
            "Write Python code to check if a given list is empty or not.": 0.5454545454545455,
            "Write a Python function to check if a given year is a leap year.": 0.5294117647058824,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.5263157894736842,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5142857142857143,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.48888888888888893
        },
        "avg_similarity_score": 0.21250184630922317
    },
    {
        "instruction": "Write a Python script that creates a new directory with the given name.",
        "output": "import os\n\ndef create_directory(directory_name):\n    os.mkdir(directory_name)\n\ndirectory_name = \"new_directory\"\ncreate_directory(directory_name)",
        "most_similar_instructions": {
            "Write a Python script that converts a given string to uppercase.": 0.5833333333333334,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.5714285714285714,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.5294117647058824,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5185185185185186,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5128205128205128,
            "Write a Python script that randomly selects a name from a list and prints it.": 0.5,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.48648648648648646,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.47058823529411764,
            "Write a Python script that uses a for loop to print the numbers from 0 to 9.": 0.4666666666666667,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.46153846153846156
        },
        "avg_similarity_score": 0.26373109198720207
    },
    {
        "instruction": "How can you write a Python program to find the largest and smallest values in a dictionary and print their keys?\ndictionary = {\"apple\": 5, \"banana\": 2, \"cherry\": 8, \"date\": 3}",
        "output": "dictionary = {\"apple\": 5, \"banana\": 2, \"cherry\": 8, \"date\": 3}\nmax_key = max(dictionary, key=dictionary.get)\nmin_key = min(dictionary, key=dictionary.get)\nprint(\"Largest key:\", max_key)\nprint(\"Smallest key:\", min_key)",
        "most_similar_instructions": {
            "Can you write a Python program to find the minimum and maximum values in a list without using any built-in functions or libraries?\nnumbers = [5, 2, 8, 3, 10]": 0.5666666666666667,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.5555555555555556,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.5172413793103449,
            "How can you write a Python program to find and replace a specific element with a new element in a given list?\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace = 3\nnew_element = 10": 0.46875,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.46808510638297873,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.456140350877193,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.4528301886792453,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4528301886792453,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.4528301886792453,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.43999999999999995
        },
        "avg_similarity_score": 0.22468859828776305
    },
    {
        "instruction": "Write a Python function that encrypts a given string using the Caesar cipher with a given key.\n\"hello\", 5",
        "output": "def caesar_cipher_encrypt(s, key):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypted += chr((ord(char) - ord('A') + key) % 26 + ord('A'))\n            else:\n                encrypted += chr((ord(char) - ord('a') + key) % 26 + ord('a'))\n        else:\n            encrypted += char\n    return encrypted\n\nresult = caesar_cipher_encrypt(\"hello\", 5)\nprint(result)",
        "most_similar_instructions": {
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5454545454545454,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5405405405405405,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5,
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.47368421052631576,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.47058823529411764,
            "Write a Python function that returns a list of all divisors of a given number.": 0.47058823529411764,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.47058823529411764,
            "Write a Python script that converts a given string to uppercase.": 0.4666666666666667,
            "Write a Python program to truncate a given string to a specified length.\n\"Hello, World!\", 7": 0.45714285714285713,
            "Write a Python function that finds the maximum value in a given dictionary and returns the key corresponding to that value.": 0.45
        },
        "avg_similarity_score": 0.2692664905792765
    },
    {
        "instruction": "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"",
        "output": "def count_word_frequencies(s):\n    words = s.split()\n    frequencies = {}\n    for word in words:\n        if word in frequencies:\n            frequencies[word] += 1\n        else:\n            frequencies[word] = 1\n    return frequencies\n\nresult = count_word_frequencies(\"I enjoy coding and coding is fun\")\nprint(result)",
        "most_similar_instructions": {
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.5357142857142857,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.5357142857142857,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.5357142857142857,
            "Design a Python function that counts the occurrences of each element in a given list and returns a dictionary with the elements as keys and their counts as values.\n[1, 2, 1, 3, 2, 4, 2]": 0.523076923076923,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5217391304347826,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.5,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.4897959183673469,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4888888888888889,
            "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'": 0.47761194029850745,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.456140350877193
        },
        "avg_similarity_score": 0.2517939508612027
    },
    {
        "instruction": "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]",
        "output": "def convert_to_dict(items):\n    dictionary = {}\n    for item in items:\n        key = item[0]\n        value = item[1]\n        dictionary[key] = value\n    return dictionary\n\nresult = convert_to_dict([(1, 'apple'), (2, 'banana'), (3, 'cherry')])\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5945945945945946,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5365853658536585,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.5263157894736842,
            "Write a Python function to reverse a given list of integers.": 0.5161290322580645,
            "Write a Python function that converts a sentence into title case.": 0.5161290322580645,
            "Write a Python function that returns a list of all divisors of a given number.": 0.5142857142857143,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5128205128205129,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5116279069767442,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.5,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.5
        },
        "avg_similarity_score": 0.27254582760666235
    },
    {
        "instruction": "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10",
        "output": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\n    def display_student(self):\n        print(\"Name:\", self.name)\n        print(\"Grade:\", self.grade)\n\nstudent = Student(\"John Doe\", 10)\nstudent.display_student()",
        "most_similar_instructions": {
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.5660377358490567,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.5423728813559322,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5106382978723404,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5098039215686274,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.5,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.4782608695652174,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.4571428571428572,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.4528301886792453,
            "Provide a complete code for a Python class named \"Student\" with attributes name and age. The class should have a method named \"display_info\" that prints the name and age of the student.": 0.4210526315789474,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.4186046511627907
        },
        "avg_similarity_score": 0.17737754528291974
    },
    {
        "instruction": "Create a Python class called \"BankAccount\" with attributes account_number and balance and methods to deposit and withdraw money.\n\"1234567890\", 1000",
        "output": "class BankAccount:\n    def __init__(self, account_number, balance):\n        self.account_number = account_number\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print(\"Insufficient balance\")\n\naccount = BankAccount(\"1234567890\", 1000)\naccount.deposit(500)\naccount.withdraw(300)\nprint(account.balance)",
        "most_similar_instructions": {
            "Write a Python class called \"BankAccount\" with attributes \"balance\" (initially 0) and methods \"deposit(amount)\" and \"withdraw(amount)\" that update the balance accordingly.": 0.5909090909090909,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.56,
            "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10": 0.5333333333333333,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.45,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.43749999999999994,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.42857142857142855,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.39999999999999997,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.39999999999999997,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.39999999999999997
        },
        "avg_similarity_score": 0.16280205804104436
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)",
        "output": "import re\n\ndef remove_special_characters(text):\n    '''This function removes special characters from the given text and returns the result.'''\n    return re.sub('[^A-Za-z0-9 ]+', '', text)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.5161290322580645,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.46511627906976744,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.46511627906976744,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.4583333333333333,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.44897959183673475,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4444444444444445,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.42857142857142855,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.39215686274509803,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.37037037037037035,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.3666666666666667
        },
        "avg_similarity_score": 0.14322018880493861
    },
    {
        "instruction": "Create a Python function that removes duplicate values from a list.\n[1, 2, 2, 3, 4, 4, 4, 5]",
        "output": "def remove_duplicates(lst):\n    unique_lst = list(set(lst))\n    return unique_lst\n\ninput_list = [1, 2, 2, 3, 4, 4, 4, 5]\nunique_list = remove_duplicates(input_list)\nprint(f'List with duplicates removed: {unique_list}')",
        "most_similar_instructions": {
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.5957446808510638,
            "Create a Python program that removes all occurrences of a specified element from a list.\nlist_with_occurrences = [1, 2, 2, 3, 4, 2, 5]\nelement_to_remove = 2": 0.5833333333333334,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.5789473684210527,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5789473684210527,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5500000000000002,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5500000000000002,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.5454545454545454,
            "Create a Python program that accepts a list of numbers and removes all duplicate numbers, keeping only the unique ones.\n[1, 2, 2, 3, 4, 4, 5, 5, 6]": 0.5416666666666666,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.5357142857142857,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.5333333333333333
        },
        "avg_similarity_score": 0.2355005850472286
    },
    {
        "instruction": "Design a Python class for a bank account that has methods to withdraw money, deposit money, and check the current balance.",
        "output": "class BankAccount:\n    def __init__(self, initial_balance):\n        self.balance = initial_balance\n    \n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n            return amount\n        else:\n            return \"Insufficient funds\"\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def check_balance(self):\n        return self.balance\n\naccount = BankAccount(1000)\naccount.withdraw(500)\nbalance = account.check_balance()\nprint(balance)",
        "most_similar_instructions": {
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.5283018867924528,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.5,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.48000000000000004,
            "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.": 0.4545454545454545,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.4,
            "Create a Python class called \"BankAccount\" with attributes account_number and balance and methods to deposit and withdraw money.\n\"1234567890\", 1000": 0.38095238095238093,
            "Implement a Python class for a basic calculator that supports addition, subtraction, multiplication, and division operations.": 0.37837837837837834,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.375,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.37209302325581395,
            "Write a Python class called \"BankAccount\" with attributes \"balance\" (initially 0) and methods \"deposit(amount)\" and \"withdraw(amount)\" that update the balance accordingly.": 0.3636363636363636
        },
        "avg_similarity_score": 0.19171668868018701
    },
    {
        "instruction": "Design a Python class for a stopwatch that can start, stop, and reset the timer. Include methods for each operation.",
        "output": "import time\n\nclass Stopwatch:\n    def __init__(self):\n        self.start_time = None\n        self.elapsed_time = 0\n    \n    def start(self):\n        self.start_time = time.time()\n    \n    def stop(self):\n        if self.start_time is not None:\n            self.elapsed_time += time.time() - self.start_time\n            self.start_time = None\n    \n    def reset(self):\n        self.elapsed_time = 0\n\nstopwatch = Stopwatch()\nstopwatch.start()\ntime.sleep(2)\nstopwatch.stop()\nprint(stopwatch.elapsed_time)",
        "most_similar_instructions": {
            "Design a Python class for a bank account that has methods to withdraw money, deposit money, and check the current balance.": 0.4390243902439024,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.4,
            "Implement a Python class for a basic calculator that supports addition, subtraction, multiplication, and division operations.": 0.38888888888888884,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.3529411764705882,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.3404255319148936,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.3404255319148936,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.3333333333333333,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.33333333333333326,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.32653061224489793,
            "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.": 0.3255813953488372
        },
        "avg_similarity_score": 0.18279433238393564
    },
    {
        "instruction": "Write a Python program to find the maximum product of two integers in a list.\n[2, 4, 6, 8, 10]",
        "output": "numbers = [2, 4, 6, 8, 10]\nsorted_numbers = sorted(numbers)\n\nmax_product = sorted_numbers[-1] * sorted_numbers[-2]\nprint(\"Maximum product:\", max_product)",
        "most_similar_instructions": {
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.6,
            "Write a Python program to find the index of an item in a list.\nInput list: [4, 8, 2, 6, 3]\nItem to find: 2": 0.5777777777777778,
            "Write a Python program to count the frequency of each element in a given list.": 0.5714285714285715,
            "Can you write a Python program to find the minimum and maximum values in a list without using any built-in functions or libraries?\nnumbers = [5, 2, 8, 3, 10]": 0.56,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.553191489361702,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5365853658536585,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.5365853658536585,
            "Write a Python function that checks whether all elements in a list are even numbers.\nlist = [2, 4, 6, 8, 10]": 0.5365853658536585,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5294117647058824,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5238095238095238
        },
        "avg_similarity_score": 0.2694801188655587
    },
    {
        "instruction": "Write a Python program that checks if a given string is a valid credit card number.\n\"1234-5678-9012-3456\"",
        "output": "import re\n\ndef is_valid_credit_card_number(card_number):\n    pattern = r'^\\d{4}-\\d{4}-\\d{4}-\\d{4}$'\n    if re.match(pattern, card_number):\n        return True\n    else:\n        return False\n\ncard_number = \"1234-5678-9012-3456\"\nprint(is_valid_credit_card_number(card_number))",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.588235294117647,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5714285714285715,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5714285714285713,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.5641025641025641,
            "Write a Python program that checks if a given string is a palindrome ignoring spaces and punctuation.\n\"A man, a plan, a canal - Panama!\"": 0.5454545454545454,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5142857142857143,
            "How would you create a Python function that checks if a given string is a valid phone number?\nFunction name: is_valid_phone_number\nInput: \"123-456-7890\"": 0.5,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.48888888888888893,
            "Develop a Python program that checks if a number is even or odd.": 0.4848484848484849,
            "Write a Python function to check if a given year is a leap year.": 0.47058823529411764
        },
        "avg_similarity_score": 0.23786370222838463
    },
    {
        "instruction": "Implement a Python class that represents a stack. The class should have methods to push an element onto the stack, pop an element from the stack, and check if the stack is empty.",
        "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, element):\n        self.stack.append(element)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\nstack = Stack()\nstack.push(5)\nstack.push(10)\nstack.push(15)\npopped_element = stack.pop()\nprint(popped_element)\nprint(stack.is_empty())",
        "most_similar_instructions": {
            "Implement a Python class that represents a rectangle. The class should have methods to calculate the area and perimeter of the rectangle. It should also have attributes to store the length and width of the rectangle.": 0.49275362318840576,
            "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.": 0.49230769230769234,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.49230769230769234,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4912280701754386,
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.4838709677419355,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.4727272727272727,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4406779661016949,
            "Implement a Python class to store and manipulate a 2D matrix. The class should have methods to initialize the matrix, get the value at a particular cell, set the value at a particular cell, and print the matrix.": 0.4225352112676056,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.4000000000000001,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.39999999999999997
        },
        "avg_similarity_score": 0.1894539922681034
    },
    {
        "instruction": "Create a Python class called \"Dog\" with an instance variable called \"name\". Add a method called \"bark\" that prints \"Woof! My name is {name}\".",
        "output": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        print(\"Woof! My name is\", self.name)\n\ndog = Dog(\"Max\")\ndog.bark()",
        "most_similar_instructions": {
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.5660377358490567,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.4888888888888889,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.4489795918367347,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.4313725490196078,
            "Create a class called \"Cat\" with the following attributes: name, age, color. Provide a constructor to initialize these attributes and a method called \"meow\" that prints \"Meow!\".": 0.4313725490196078,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.4067796610169492,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.39999999999999997,
            "Create a Python class called \"Employee\" with attributes name, age, and salary. Implement a method called \"get_tax\" in the class that calculates and returns the tax amount based on the salary.": 0.39285714285714285,
            "Create a Python class named \"Car\" with attributes \"color\" and \"brand\". The class should have a method named \"drive\" that prints \"The [color] [brand] car is driving.\".": 0.39215686274509803,
            "Provide a complete code for a Python class named \"Student\" with attributes name and age. The class should have a method named \"display_info\" that prints the name and age of the student.": 0.3508771929824562
        },
        "avg_similarity_score": 0.154974466870941
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''",
        "output": "import time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''\n    time.sleep(seconds)",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.5660377358490566,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.5416666666666667,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.5185185185185186,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.4838709677419355,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.4590163934426229,
            "Suggest a completion for the following python code.": 0.4444444444444445,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.425531914893617,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.39285714285714285,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.39215686274509803,
            "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))": 0.3783783783783784
        },
        "avg_similarity_score": 0.1759270940902348
    },
    {
        "instruction": "Can you design a Python program to generate a Fibonacci sequence up to a given limit?\nlimit = 10",
        "output": "def generate_fibonacci(limit):\n    sequence = [0, 1]\n    while sequence[-1] < limit:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:-1]\n\nlimit = 10\nfibonacci_sequence = generate_fibonacci(limit)\nprint(fibonacci_sequence)",
        "most_similar_instructions": {
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.5625000000000001,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5454545454545454,
            "How would you write a Python program to generate Fibonacci series up to n terms using recursion?\nn = 10": 0.5405405405405405,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.5142857142857143,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.5,
            "Implement a Python program that generates a Fibonacci sequence up to a specified number of terms and prints the sequence.\nNumber of terms: 10": 0.4761904761904762,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.47058823529411764,
            "Create a Python program to convert a string to a list of words.": 0.45161290322580644,
            "Generate a Python program to reverse a given string.": 0.4444444444444444,
            "Please write a Python function to generate a random password of a given length.": 0.43750000000000006
        },
        "avg_similarity_score": 0.21816688355053124
    },
    {
        "instruction": "Create a Python function called \"compute_average\" that takes any number of arguments as input and returns their average.\nArguments: 4, 5, 6, 7, 8",
        "output": "def compute_average(*args):\n    average = sum(args) / len(args)\n    return average\n\nresult = compute_average(4, 5, 6, 7, 8)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5833333333333334,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5128205128205129,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.5,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4827586206896552,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.48148148148148145,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.48,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.48,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.46428571428571425,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4615384615384615,
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.4583333333333333
        },
        "avg_similarity_score": 0.2048662166255763
    },
    {
        "instruction": "How can you create a Python dictionary comprehension to square each element of a list and store it as key-value pairs in a dictionary?\ninput_list = [1, 2, 3, 4, 5]",
        "output": "input_list = [1, 2, 3, 4, 5]\nsquared_dict = {num: num**2 for num in input_list}\nprint(squared_dict)",
        "most_similar_instructions": {
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.5490196078431372,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.5454545454545455,
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.5,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4912280701754386,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.4727272727272727,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4666666666666667,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.4666666666666667,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.45614035087719296,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.4528301886792453,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4406779661016949
        },
        "avg_similarity_score": 0.22453212749926404
    },
    {
        "instruction": "How can you iterate over the key-value pairs of a dictionary in Python?\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}",
        "output": "my_dict = {'apple': 1, 'banana': 2, 'cherry': 3}\nfor key, value in my_dict.items():\n    print(key, value)",
        "most_similar_instructions": {
            "How can you iterate over a dictionary in Python and print both key and value?": 0.4864864864864865,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.4444444444444445,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.43243243243243246,
            "How can you find the length of a string using Python?": 0.4242424242424242,
            "How can you write a Python program to find the largest and smallest values in a dictionary and print their keys?\ndictionary = {\"apple\": 5, \"banana\": 2, \"cherry\": 8, \"date\": 3}": 0.423076923076923,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.4186046511627907,
            "How can you create a Python dictionary comprehension to square each element of a list and store it as key-value pairs in a dictionary?\ninput_list = [1, 2, 3, 4, 5]": 0.4074074074074074,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4,
            "How can you convert a string to uppercase in Python?": 0.37499999999999994,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.36734693877551017
        },
        "avg_similarity_score": 0.15013136906115623
    },
    {
        "instruction": "How can you concatenate two dictionaries in Python?\ndict1 = {'apple': 1, 'banana': 2}\ndict2 = {'cherry': 3, 'dragonfruit': 4}",
        "output": "dict1 = {'apple': 1, 'banana': 2}\ndict2 = {'cherry': 3, 'dragonfruit': 4}\nconcatenated_dict = {**dict1, **dict2}\nprint(concatenated_dict)",
        "most_similar_instructions": {
            "How can you iterate over the key-value pairs of a dictionary in Python?\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}": 0.55,
            "How can you concatenate two lists in Python?": 0.5384615384615385,
            "How can you write Python code to merge two dictionaries into one dictionary?\ndict1 = {'apple': 3, 'banana': 2}\ndict2 = {'cherry': 5, 'kiwi': 1}": 0.5365853658536586,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.5128205128205129,
            "Write a Python code snippet to merge two dictionaries.\ndict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}": 0.43243243243243246,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.42424242424242425,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.39999999999999997,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.3902439024390244,
            "How can you write a Python program to find the largest and smallest values in a dictionary and print their keys?\ndictionary = {\"apple\": 5, \"banana\": 2, \"cherry\": 8, \"date\": 3}": 0.37499999999999994,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.358974358974359
        },
        "avg_similarity_score": 0.10751088175100333
    },
    {
        "instruction": "Write a Python function that counts the number of vowels in a given string. Consider 'a', 'e', 'i', 'o', and 'u' as vowels.",
        "output": "def count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\nsentence = \"Hello, World!\"\nvowel_count = count_vowels(sentence)\nprint(vowel_count)",
        "most_similar_instructions": {
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.6,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.6,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.576923076923077,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.5581395348837209,
            "Write Python code to find the number of vowels in a given string.": 0.5555555555555555,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5128205128205128,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.4878048780487805,
            "Design a Python function that reverses the order of words in a given sentence.": 0.4864864864864865,
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.48,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.4680851063829787
        },
        "avg_similarity_score": 0.2635426231311043
    },
    {
        "instruction": "Implement a Python function that checks if a given string is a valid email address by matching it against a regular expression pattern. The pattern for a valid email address is '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'.",
        "output": "import re\n\ndef is_valid_email(email):\n    pattern = '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n\nemail_address = 'test@example.com'\nif is_valid_email(email_address):\n    print(email_address, \"is a valid email address\")\nelse:\n    print(email_address, \"is not a valid email address\")",
        "most_similar_instructions": {
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4615384615384615,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.4225352112676056,
            "Write a Python program that checks if a given string is a palindrome ignoring spaces and punctuation.\n\"A man, a plan, a canal - Panama!\"": 0.3880597014925373,
            "Write a Python function that takes a string as input and checks if it is a valid email address. Valid email addresses should contain an '@' symbol and a domain name.": 0.3835616438356165,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.3793103448275862,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.3783783783783784,
            "How would you create a Python function that checks if a given string is a valid phone number?\nFunction name: is_valid_phone_number\nInput: \"123-456-7890\"": 0.36619718309859156,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.36363636363636365,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.36363636363636365,
            "Implement a Python function that checks if a given number is prime (only divisible by 1 and itself) and returns True if it is, and False otherwise.\nExample input: 7": 0.35616438356164387
        },
        "avg_similarity_score": 0.16173741004559186
    },
    {
        "instruction": "Create a Python program that finds the maximum common divisor (GCD) of two given numbers using the Euclidean algorithm.",
        "output": "def compute_gcd(a, b):\n    while b != 0:\n        remainder = a % b\n        a = b\n        b = remainder\n    return a\n\nnum1 = 48\nnum2 = 18\n\ngcd = compute_gcd(num1, num2)\nprint(gcd)",
        "most_similar_instructions": {
            "Implement a Python function that calculates and returns the greatest common divisor (GCD) of two given numbers.\nNumbers: 24, 36": 0.5641025641025641,
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.5454545454545454,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5294117647058824,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5142857142857142,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.5,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.4864864864864865,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.47368421052631576,
            "Implement a Python program that calculates the square root of a given number using the math module.\nNumber: 9": 0.47368421052631576,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.46153846153846156,
            "Write a Python script that takes two integers as input and prints their greatest common divisor using the Euclidean algorithm.": 0.46153846153846156
        },
        "avg_similarity_score": 0.2353020864647681
    },
    {
        "instruction": "Create a Python dictionary called \"car\" with keys \"brand\", \"model\", and \"year\". Set the values for each key to your favorite car's brand, model, and year.",
        "output": "car = {\n    \"brand\": \"Toyota\",\n    \"model\": \"Camry\",\n    \"year\": 2020\n}",
        "most_similar_instructions": {
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.4897959183673469,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.409090909090909,
            "Create a Python dictionary with keys \"name\", \"age\", and \"location\" and values \"John\", 30, and \"New York\" respectively.": 0.4,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.39999999999999997,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.391304347826087,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.3829787234042553,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.375,
            "Create a Python dictionary with keys \"name\", \"age\", and \"city\". Write a function that takes the dictionary as input and prints each key-value pair on a separate line.": 0.35714285714285715,
            "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10": 0.35294117647058826,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.33333333333333337
        },
        "avg_similarity_score": 0.15735179404492158
    },
    {
        "instruction": "Create a Python class called \"BankAccount\" with attributes account number and balance. Implement methods in the class for depositing money, withdrawing money, and checking the current balance.",
        "output": "class BankAccount:\n    def __init__(self, account_number):\n        self.account_number = account_number\n        self.balance = 0\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            print(\"Insufficient balance\")\n        else:\n            self.balance -= amount\n    \n    def check_balance(self):\n        return self.balance\n\naccount = BankAccount(\"123456789\")\naccount.deposit(1000)\naccount.withdraw(500)\nprint(f\"Current balance: {account.check_balance()}\")",
        "most_similar_instructions": {
            "Create a Python class called \"BankAccount\" with attributes account_number and balance and methods to deposit and withdraw money.\n\"1234567890\", 1000": 0.5833333333333334,
            "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.": 0.52,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.48,
            "Write a Python class called \"BankAccount\" with attributes \"balance\" (initially 0) and methods \"deposit(amount)\" and \"withdraw(amount)\" that update the balance accordingly.": 0.48,
            "Create a Python class called \"Employee\" with attributes name, age, and salary. Implement a method called \"get_tax\" in the class that calculates and returns the tax amount based on the salary.": 0.47457627118644063,
            "Design a Python class for a bank account that has methods to withdraw money, deposit money, and check the current balance.": 0.4583333333333333,
            "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10": 0.4313725490196078,
            "Create a Python class named \"Circle\" with attribute radius. Implement methods to compute the area and circumference of the circle.": 0.425531914893617,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.41379310344827586,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.40816326530612246
        },
        "avg_similarity_score": 0.16549517621088985
    },
    {
        "instruction": "Write a Python function that takes in a list of strings and converts all strings to lowercase.",
        "output": "def convert_to_lowercase(strings):\n    lowercase_list = [string.lower() for string in strings]\n    return lowercase_list",
        "most_similar_instructions": {
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5714285714285715,
            "Write a Python function that returns a list of all divisors of a given number.": 0.5625,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5625,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5405405405405405,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5263157894736842,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.5106382978723405,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5,
            "Write a Python function to reverse a given list of integers.": 0.5,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5
        },
        "avg_similarity_score": 0.2776238868358284
    },
    {
        "instruction": "Implement a Python function to sort a given list of strings in alphabetical order.\nOriginal List: ['banana', 'apple', 'orange', 'grape']",
        "output": "def sort_strings(strings):\n    return sorted(strings)\n\noriginal_list = ['banana', 'apple', 'orange', 'grape']\nsorted_list = sort_strings(original_list)\nprint(sorted_list)",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.588235294117647,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.5405405405405405,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5294117647058824,
            "Write a Python function to reverse a given list of integers.": 0.5161290322580645,
            "Write Python code to sort a list of strings alphabetically.\nlst = [\"banana\", \"apple\", \"cherry\", \"blueberry\"]": 0.5142857142857143,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.5,
            "Implement a Python function that sorts a list of strings based on the length of each string in descending order.\nInput: ['apple', 'banana', 'kiwi', 'grapes']": 0.48888888888888893,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.48648648648648646,
            "How can you sort a list of strings in alphabetical order using Python?": 0.4848484848484849,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.47058823529411764
        },
        "avg_similarity_score": 0.23176870956646964
    },
    {
        "instruction": "Please generate a Python program that reads a string from the user and removes all vowels from the string.",
        "output": "input_str = input(\"Enter a string: \")\nvowels = ['a', 'e', 'i', 'o', 'u']\nno_vowels_str = ''.join([char for char in input_str if char.lower() not in vowels])\nprint('String without vowels:', no_vowels_str)",
        "most_similar_instructions": {
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.5263157894736842,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5263157894736842,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.5128205128205129,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4888888888888889,
            "Write a Python program that reads a list of numbers from the user, separates the positive and negative numbers, and prints them separately.": 0.47619047619047616,
            "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.": 0.47368421052631576,
            "Create a Python program that reads two integers from the user and swaps their values without using a temporary variable.": 0.46153846153846156,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4444444444444444,
            "Design a Python function that converts a string to lowercase and removes all punctuation marks.\n\"Hello, World!\"": 0.4444444444444444
        },
        "avg_similarity_score": 0.23765283939198192
    },
    {
        "instruction": "Create an empty Python list called \"my_list\". Add the numbers 1, 2, and 3 to the list. Print the list.",
        "output": "my_list = []\nmy_list.extend([1, 2, 3])\nprint(my_list)",
        "most_similar_instructions": {
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.4444444444444444,
            "Create a Python list with numbers from 1 to 10 and then extract and print the even numbers.": 0.41025641025641024,
            "Create a Python list called \"fruits\" with the following items: \"apple\", \"banana\", \"orange\". Print the second item in the list.": 0.3902439024390244,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.3636363636363636,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.35555555555555557,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.35,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.34782608695652173,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.3414634146341463,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.3396226415094339,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3333333333333333
        },
        "avg_similarity_score": 0.17672067887464332
    },
    {
        "instruction": "Write a Python function that receives a list of tuples, where each tuple represents a student's name and grade. The function should return a list of names of students who have a grade higher than or equal to 90.",
        "output": "def get_students_with_high_grade(student_grades):\n    return [student[0] for student in student_grades if student[1] >= 90]",
        "most_similar_instructions": {
            "Write a Python function that takes a list of tuples as input, where each tuple contains a name and an age. The function should return a new list of tuples, where the names are sorted in alphabetical order.": 0.5897435897435896,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.417910447761194,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.3934426229508196,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.3793103448275862,
            "Write a Python function that calculates the factorial of a number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.\nNumber: 5": 0.37837837837837834,
            "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.": 0.3636363636363637,
            "Write a Python function that returns a list of all divisors of a given number.": 0.36363636363636365,
            "Write a Python function that accepts two parameters: a list of integers and a target value. The function should return the indices of the two numbers in the list that add up to the target value.\nInput: [2, 7, 1, 5], target = 9": 0.3614457831325302,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.35135135135135137,
            "Write a Python function that takes in a list of strings and converts all strings to lowercase.": 0.3508771929824561
        },
        "avg_similarity_score": 0.20722827008330172
    },
    {
        "instruction": "Create an infinite loop that prints the numbers from 1 to 10 repeatedly.",
        "output": "count = 1\nwhile True:\n    print(count)\n    count += 1\n    if count > 10:\n        count = 1",
        "most_similar_instructions": {
            "Create a Python list with numbers from 1 to 10 and then extract and print the even numbers.": 0.3870967741935484,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.3684210526315789,
            "Create a Python function called \"print_pattern\" that takes an integer as input and prints a pattern of numbers from 1 to the input number.\n5": 0.3589743589743589,
            "Create an empty Python list called \"my_list\". Add the numbers 1, 2, and 3 to the list. Print the list.": 0.35294117647058826,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.3448275862068966,
            "Create a Python function that prints the Fibonacci sequence up to the n-th term.\n8": 0.3448275862068966,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.33333333333333337,
            "Write a Python script that uses a for loop to print the numbers from 0 to 9.": 0.33333333333333337,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.3225806451612903,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.32
        },
        "avg_similarity_score": 0.13097340459444676
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport os\n\nfile_path = \"data.txt\"\nfile_size = os.path.getsize(file_path)",
        "output": "import os\n\nfile_path = \"data.txt\"\nfile_size = os.path.getsize(file_path)\n\nprint(file_size)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.5517241379310345,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.45,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.4390243902439024,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.42553191489361697,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4186046511627907,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4090909090909091,
            "Suggest a completion for the following python code.\nimport pandas as pd\n\ndata = {'Name': ['John', 'Emma', 'Sam', 'Anna'], 'Age': [25, 30, 22, 35]}\n\ndf = pd.DataFrame(data)\ndf.": 0.40816326530612246,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.391304347826087,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.3902439024390244,
            "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''": 0.3673469387755102
        },
        "avg_similarity_score": 0.11023667144298205
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()",
        "output": "import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\n\nprint(data)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.": 0.5517241379310345,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.4878048780487805,
            "Suggest a completion for the following python code.\nimport os\n\nfile_path = \"data.txt\"\nfile_size = os.path.getsize(file_path)": 0.47619047619047616,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.45,
            "Suggest a completion for the following python code.\nimport pandas as pd\n\ndata = {'Name': ['John', 'Emma', 'Sam', 'Anna'], 'Age': [25, 30, 22, 35]}\n\ndf = pd.DataFrame(data)\ndf.": 0.4489795918367347,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4186046511627907,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4090909090909091,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.39999999999999997,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.391304347826087,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.3902439024390244
        },
        "avg_similarity_score": 0.11170737008249856
    },
    {
        "instruction": "Create a Python program that takes two lists and combines them by alternating elements.\nInput lists: [1, 2, 3], [4, 5, 6]",
        "output": "def combine_lists(list1, list2):\n    combined_list = []\n    for i in range(len(list1)):\n        combined_list.append(list1[i])\n        combined_list.append(list2[i])\n    return combined_list\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nresult = combine_lists(list1, list2)\nprint(result)",
        "most_similar_instructions": {
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.5423728813559323,
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.5333333333333332,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.52,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.5128205128205129,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.5106382978723404,
            "Write a Python function that takes two lists as input and returns True if they have at least one common element, False otherwise.\n[1, 2, 3], [4, 5, 6, 3]": 0.5,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4897959183673469,
            "Create a Python program that accepts a list of numbers and removes all duplicate numbers, keeping only the unique ones.\n[1, 2, 2, 3, 4, 4, 5, 5, 6]": 0.47058823529411764,
            "Create a Python program that takes two dates as input and calculates the number of days between them.\nDate 1: \"2022-01-01\"\nDate 2: \"2022-02-01\"": 0.44,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.43902439024390244
        },
        "avg_similarity_score": 0.2012408243988449
    },
    {
        "instruction": "Create a Python program that takes a list of tuples and sorts the list by the second element in each tuple.\nInput list: [('banana', 3), ('apple', 5), ('cherry', 2)]",
        "output": "def sort_list_by_second_element(tuples):\n    sorted_list = sorted(tuples, key=lambda x: x[1])\n    return sorted_list\n\ninput_list = [('banana', 3), ('apple', 5), ('cherry', 2)]\nresult = sort_list_by_second_element(input_list)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4999999999999999,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.48148148148148145,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.4782608695652174,
            "How can you write Python code to sort a list of tuples based on the second element of each tuple in ascending order?\nList: [('apple', 3), ('banana', 1), ('cherry', 2)]": 0.47457627118644075,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.4642857142857143,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.45161290322580644,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.4489795918367347,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.4444444444444445,
            "Create a Python program that loops through a list and prints each element in reverse order.": 0.4444444444444445
        },
        "avg_similarity_score": 0.23858632409646183
    },
    {
        "instruction": "Write a Python function to merge two dictionaries into a new dictionary.",
        "output": "def merge_dictionaries(dict1, dict2):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n\ndictionary1 = {'a': 1, 'b': 2}\ndictionary2 = {'c': 3, 'd': 4}\nmerged_dictionary = merge_dictionaries(dictionary1, dictionary2)\nprint('Merged dictionary:', merged_dictionary)",
        "most_similar_instructions": {
            "Given two sorted lists, write a Python function to merge them into a single sorted list.": 0.5714285714285715,
            "Create a Python program to merge two dictionaries into a new dictionary.\ndict1 = {'name': 'John', 'age': 25}\ndict2 = {'gender': 'Male', 'city': 'New York'}": 0.5714285714285714,
            "Write a Python function to reverse a given list of integers.": 0.5217391304347826,
            "Write a Python program to concatenate two lists.": 0.5,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.4827586206896552,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.4761904761904762,
            "Write a Python function to check if a given year is a leap year.": 0.4615384615384615,
            "Please write a Python function to generate a random password of a given length.": 0.4615384615384615,
            "How can you write Python code to merge two dictionaries into one dictionary?\ndict1 = {'apple': 3, 'banana': 2}\ndict2 = {'cherry': 5, 'kiwi': 1}": 0.4571428571428571,
            "Write a Python code snippet to merge two dictionaries.\ndict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}": 0.4516129032258065
        },
        "avg_similarity_score": 0.23811364204066102
    },
    {
        "instruction": "Can you write a Python function that checks if two lists are equal?\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]",
        "output": "def are_lists_equal(list1, list2):\n    return list1 == list2\n\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nare_equal = are_lists_equal(list1, list2)\nprint(are_equal)",
        "most_similar_instructions": {
            "Write a Python program that checks if two lists are equal or not.": 0.588235294117647,
            "How can you write a Python function that checks if all elements in a given list are equal?\nlst = [1, 1, 1, 1, 1]": 0.5777777777777778,
            "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]": 0.5777777777777778,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5217391304347826,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.4888888888888889,
            "Write Python code to check if two given lists are equal regardless of the order of elements.\n[1, 2, 3, 4], [4, 3, 2, 1]": 0.4782608695652174,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.47619047619047616,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.47619047619047616,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.4736842105263158,
            "Write a Python function that checks whether two lists are circularly identical. Two lists are circularly identical if one list can be obtained by rotating the other list.\nInput: [1, 2, 3, 4, 5], [3, 4, 5, 1, 2]": 0.4666666666666667
        },
        "avg_similarity_score": 0.20417369188082113
    },
    {
        "instruction": "Write a Python function that sums all the values in a dictionary.\n{'a': 5, 'b': 3, 'c': 7}",
        "output": "def sum_dictionary(dictionary):\n    return sum(dictionary.values())\n\ndict = {'a': 5, 'b': 3, 'c': 7}\nresult = sum_dictionary(dict)\nprint(result)",
        "most_similar_instructions": {
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.5652173913043479,
            "Complete the following Python code to calculate the sum of all values in a dictionary.\ndata = {'a': 5, 'b': 3, 'c': 10}": 0.55,
            "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]": 0.5128205128205129,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.4878048780487805,
            "Write a Python function that finds the maximum value in a given dictionary and returns the key corresponding to that value.": 0.4615384615384615,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4615384615384615,
            "Create a Python function to concatenate all the strings in a given list into a single string.": 0.45714285714285713,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.45714285714285713,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.4545454545454546
        },
        "avg_similarity_score": 0.2586274814167482
    },
    {
        "instruction": "Create a Python dictionary with keys as strings and values as integers. Write a script that prints the sum of all the values.",
        "output": "dictionary = {'A': 5, 'B': 10, 'C': 3, 'D': 7}\ntotal_sum = sum(dictionary.values())\nprint(total_sum)",
        "most_similar_instructions": {
            "Create a Python dictionary called \"students\" with keys as student names and values as their respective ages. Write a function to print the keys of the students who are above 18 years old.": 0.5357142857142857,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.5217391304347826,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.5,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.5,
            "Given a dictionary called \"person\", write a Python script that prints the values of the dictionary in alphabetical order.": 0.47619047619047616,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.46511627906976744,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.4390243902439025,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.4390243902439025,
            "Create a Python dictionary with keys \"name\", \"age\", and \"city\". Write a function that takes the dictionary as input and prints each key-value pair on a separate line.": 0.4230769230769231,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.41666666666666663
        },
        "avg_similarity_score": 0.21445310151800837
    },
    {
        "instruction": "Write a Python function to encrypt a given message using the Caesar cipher. The Caesar cipher is a simple substitution cipher where each letter is shifted a certain number of places down or up the alphabet.",
        "output": "def caesar_cipher_encrypt(message, shift):\n    encrypted_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_char = chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((ord(char) - 97 + shift) % 26 + 97)\n            encrypted_message += encrypted_char\n        else:\n            encrypted_message += char\n    return encrypted_message\n\nmessage = \"Hello, World!\"\nshift = 3\nencrypted_message = caesar_cipher_encrypt(message, shift)\nprint(encrypted_message)",
        "most_similar_instructions": {
            "Write a Python function that encrypts a given string using the Caesar cipher with a given key.\n\"hello\", 5": 0.4000000000000001,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.3880597014925373,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.380952380952381,
            "Write a Python function to check if a given year is a leap year.": 0.36,
            "Write a Python function to reverse a given list of integers.": 0.3404255319148936,
            "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']": 0.33333333333333337,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.3333333333333333,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.3333333333333333,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.3283582089552239,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.32727272727272727
        },
        "avg_similarity_score": 0.19441218104146807
    },
    {
        "instruction": "Write a Python function that combines two lists by alternatingly taking elements from each list.",
        "output": "def combine_lists(list1, list2):\n    combined_list = []\n    min_length = min(len(list1), len(list2))\n    for i in range(min_length):\n        combined_list.append(list1[i])\n        combined_list.append(list2[i])\n    if len(list1) > min_length:\n        combined_list.extend(list1[min_length:])\n    elif len(list2) > min_length:\n        combined_list.extend(list2[min_length:])\n    return combined_list\n\nlist1 = [1, 3, 5]\nlist2 = [2, 4, 6]\ncombined_list = combine_lists(list1, list2)\nprint(combined_list)",
        "most_similar_instructions": {
            "Generate a Python program to combine two lists by alternatingly taking elements.": 0.5925925925925926,
            "Create a Python function that concatenates two lists into one and returns the concatenated list.": 0.4666666666666667,
            "Design a Python function that removes all duplicates from a given list.": 0.4444444444444445,
            "Write a Python program to concatenate two lists.": 0.43478260869565216,
            "Write a Python program that checks if two lists are equal or not.": 0.42857142857142855,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.4210526315789474,
            "Implement a Python program that merges two sorted lists into a single sorted list.": 0.4137931034482759,
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.4137931034482759,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4137931034482759,
            "Write a Python script that randomly selects a name from a list and prints it.": 0.4000000000000001
        },
        "avg_similarity_score": 0.21211651329719422
    },
    {
        "instruction": "Write a Python function that truncates a string to a specified length and adds ellipsis (...) at the end.\n'This is a long sentence that needs to be truncated.', 20",
        "output": "def truncate_string(string, length):\n    if len(string) > length:\n        return string[:length] + '...'\n    else:\n        return string\n\nprint(truncate_string('This is a long sentence that needs to be truncated.', 20))",
        "most_similar_instructions": {
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4727272727272727,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.46808510638297873,
            "Write a Python program to truncate a given string to a specified length.\n\"Hello, World!\", 7": 0.4,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.39285714285714285,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.39215686274509803,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.38461538461538464,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.38095238095238093,
            "Write a Python function that encrypts a given string using the Caesar cipher with a given key.\n\"hello\", 5": 0.375,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.375,
            "Write a Python function to check if a given year is a leap year.": 0.37209302325581395
        },
        "avg_similarity_score": 0.23091335408210975
    },
    {
        "instruction": "Write a Python function that sorts a dictionary by its values in ascending order.\n{'apple': 3, 'banana': 2, 'kiwi': 5, 'grapes': 4}",
        "output": "def sort_dictionary(dictionary):\n    return dict(sorted(dictionary.items(), key=lambda item: item[1]))\n\ndictionary = {'apple': 3, 'banana': 2, 'kiwi': 5, 'grapes': 4}\nprint(sort_dictionary(dictionary))",
        "most_similar_instructions": {
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.5238095238095238,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5116279069767442,
            "Implement a Python function that sorts a list of strings based on the length of each string in descending order.\nInput: ['apple', 'banana', 'kiwi', 'grapes']": 0.5106382978723404,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.46153846153846156,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.46153846153846156,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.45,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.4285714285714286,
            "Write a Python function that finds and returns the mode(s) of a given list of integers. If there are multiple modes, return them in ascending order.\nInput: [1, 2, 3, 2, 4, 2]": 0.42857142857142855,
            "You are given a list of strings. Write a Python function to sort the list in ascending order based on the length of each string.\n['apple', 'banana', 'kiwi', 'orange', 'grapes']": 0.423076923076923,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.4210526315789474
        },
        "avg_similarity_score": 0.21916206330126603
    },
    {
        "instruction": "How can you create a Python list that contains the squares of numbers from 1 to 10?",
        "output": "squares = [num**2 for num in range(1, 11)]\nprint(squares)",
        "most_similar_instructions": {
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.5714285714285715,
            "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10": 0.5365853658536585,
            "Create an infinite loop that prints the numbers from 1 to 10 repeatedly.": 0.5333333333333333,
            "Create a Python list with numbers from 1 to 10 and then extract and print the even numbers.": 0.5142857142857143,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.5,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.48484848484848486,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4827586206896552,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.4736842105263158,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.47058823529411764,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.45714285714285713
        },
        "avg_similarity_score": 0.2487593463076538
    },
    {
        "instruction": "Create a Python function that takes a floating-point number as input and rounds it to the nearest integer.",
        "output": "def round_to_nearest_integer(number):\n    return round(number)\n\nfloat_number = 3.7\nrounded_number = round_to_nearest_integer(float_number)\nprint(rounded_number)",
        "most_similar_instructions": {
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5641025641025641,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.5365853658536586,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5263157894736842,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5238095238095238,
            "Implement a Python function called \"binary_to_decimal\" that takes a binary number as input (in the form of a string) and converts it to its decimal equivalent.": 0.5106382978723404,
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.5,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5,
            "Create a Python function called \"print_pattern\" that takes an integer as input and prints a pattern of numbers from 1 to the input number.\n5": 0.4888888888888889,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.4864864864864865,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.48484848484848486
        },
        "avg_similarity_score": 0.25250857657588055
    },
    {
        "instruction": "Generate a Python program that takes two strings as input and checks if they are anagrams. If they are anagrams, print \"The strings are anagrams\", otherwise print \"The strings are not anagrams\".",
        "output": "def are_anagrams(str1, str2):\n    if sorted(str1.lower()) == sorted(str2.lower()):\n        return True\n    else:\n        return False\n\nstring1 = \"listen\"\nstring2 = \"silent\"\nif are_anagrams(string1, string2):\n    print(\"The strings are anagrams\")\nelse:\n    print(\"The strings are not anagrams\")",
        "most_similar_instructions": {
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4615384615384615,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.4482758620689655,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.4375,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.43636363636363634,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.41379310344827586,
            "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2": 0.393939393939394,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.391304347826087,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.37735849056603776,
            "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.": 0.375
        },
        "avg_similarity_score": 0.17200503572113357
    },
    {
        "instruction": "Write a Python function that receives the base and height of a triangle and returns its area.",
        "output": "def calculate_triangle_area(base, height):\n    area = 0.5 * base * height\n    return area",
        "most_similar_instructions": {
            "Write a Python function that calculates the area of a triangle given its base and height.\nFunction name: calculate_triangle_area\nInput: base = 5, height = 8": 0.5116279069767442,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.5,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.4782608695652174,
            "Write a Python function that finds the maximum value in a given dictionary and returns the key corresponding to that value.": 0.4736842105263158,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.4736842105263158,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4736842105263158,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.4736842105263158,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.47058823529411764,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.46153846153846156,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.45714285714285713
        },
        "avg_similarity_score": 0.266935470833047
    },
    {
        "instruction": "Implement a Python class that represents a bank account. The account should have attributes like account number, account holder name, and balance. It should also have methods for depositing and withdrawing money.",
        "output": "class BankAccount:\n    def __init__(self, account_number, account_holder, balance):\n        self.account_number = account_number\n        self.account_holder = account_holder\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient balance\")\n\naccount = BankAccount(123456, \"John Doe\", 1000)\naccount.deposit(500)\naccount.withdraw(200)\nprint(account.balance)",
        "most_similar_instructions": {
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.5573770491803278,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.4927536231884059,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.47457627118644063,
            "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.": 0.4727272727272727,
            "Implement a Python class that represents a rectangle. The class should have methods to calculate the area and perimeter of the rectangle. It should also have attributes to store the length and width of the rectangle.": 0.47058823529411764,
            "Create a Python class called \"BankAccount\" with attributes account number and balance. Implement methods in the class for depositing money, withdrawing money, and checking the current balance.": 0.4406779661016949,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.4375,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.425531914893617,
            "Create a Python class called \"BankAccount\" with attributes account_number and balance and methods to deposit and withdraw money.\n\"1234567890\", 1000": 0.4150943396226415,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.41379310344827586
        },
        "avg_similarity_score": 0.16892229148266605
    },
    {
        "instruction": "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]",
        "output": "def reverse_list(lst):\n    return lst[::-1]\n\nmy_list = [1, 2, 3, 4, 5]\nprint(reverse_list(my_list))",
        "most_similar_instructions": {
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.5641025641025641,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.5142857142857143,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5116279069767442,
            "Can you suggest a way to reverse the order of elements in a given list without using the reverse() method?": 0.5,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.48888888888888893,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.4878048780487805,
            "How can you iterate over the key-value pairs of a dictionary in Python?\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}": 0.47619047619047616,
            "How can you concatenate two dictionaries in Python?\ndict1 = {'apple': 1, 'banana': 2}\ndict2 = {'cherry': 3, 'dragonfruit': 4}": 0.4736842105263158,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.46511627906976744,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.46153846153846156
        },
        "avg_similarity_score": 0.1911834914712836
    },
    {
        "instruction": "Write Python code to convert a regular string to a title case string.\nstring = \"python is amazing\"",
        "output": "def convert_to_title_case(string):\n    words = string.split()\n    return ' '.join(word.capitalize() for word in words)\n\nstring = \"python is amazing\"\nprint(convert_to_title_case(string))",
        "most_similar_instructions": {
            "Design a Python function to convert a given string to title case.": 0.5517241379310345,
            "Write Python code to convert a string to title case. For example, given the string \"hello world\", the code should convert it to \"Hello World\".": 0.5238095238095238,
            "Can you generate Python code to convert a string to lowercase?": 0.5,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5,
            "Write Python code to convert a list of strings to a single string separated by commas.\nInput: ['apple', 'banana', 'orange']": 0.48648648648648646,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.48484848484848486,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.4827586206896552,
            "Create a Python program to convert a string to a list of words.": 0.4666666666666667,
            "Write a Python program to convert a string of lowercase characters to uppercase characters using the built-in string method.\nstring = 'hello world!'": 0.45,
            "Write a Python code snippet to convert a temperature in Fahrenheit to Celsius.\nfahrenheit = 86": 0.43749999999999994
        },
        "avg_similarity_score": 0.18993446266348232
    },
    {
        "instruction": "Write a Python function that checks if an integer is a power of 2.\n16",
        "output": "def is_power_of_two(n):\n    while n > 1:\n        n = n / 2\n    if n == 1:\n        return True\n    else:\n        return False\n\nnumber = 16\nprint(is_power_of_two(number))",
        "most_similar_instructions": {
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.5882352941176471,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5517241379310344,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.5263157894736841,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.5,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.4864864864864865,
            "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"": 0.4864864864864865,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.4848484848484848,
            "Write Python code that checks if a number is a perfect square.\nInput: 25": 0.4827586206896552,
            "Write a Python function to check if a given year is a leap year.": 0.4827586206896552
        },
        "avg_similarity_score": 0.2551571327659547
    },
    {
        "instruction": "Encapsulate the following code snippet into a Python function that takes a temperature in Celsius and converts it to Fahrenheit. The function should return the converted value.\ncelsius = 25\nfahrenheit = (celsius * 9/5) + 32",
        "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 25\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(fahrenheit)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.5245901639344261,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.5,
            "Complete the following Python function that converts Fahrenheit temperature to Celsius.\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5/9)": 0.43636363636363634,
            "Create a Python function that takes a floating-point number as input and rounds it to the nearest integer.": 0.3773584905660377,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.3728813559322034,
            "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.": 0.3666666666666667,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.3666666666666667,
            "Implement a Python function called \"binary_to_decimal\" that takes a binary number as input (in the form of a string) and converts it to its decimal equivalent.": 0.3548387096774193,
            "Write a Python function that takes in a list of strings and converts all strings to lowercase.": 0.35294117647058826,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.34375
        },
        "avg_similarity_score": 0.19293217458903952
    },
    {
        "instruction": "Write a Python program to sort a dictionary by values in descending order.\n{'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}",
        "output": "def sort_dictionary(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n\ndictionary = {'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}\nprint(sort_dictionary(dictionary))",
        "most_similar_instructions": {
            "Write a Python function that sorts a dictionary by its values in ascending order.\n{'apple': 3, 'banana': 2, 'kiwi': 5, 'grapes': 4}": 0.5116279069767442,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.5,
            "How can you sort a dictionary by its values in descending order?": 0.4848484848484849,
            "How can you write a Python program to find the largest and smallest values in a dictionary and print their keys?\ndictionary = {\"apple\": 5, \"banana\": 2, \"cherry\": 8, \"date\": 3}": 0.47058823529411764,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.4680851063829788,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4571428571428571,
            "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]": 0.45,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.42857142857142855,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.4230769230769231,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.42105263157894735
        },
        "avg_similarity_score": 0.20975064412462657
    },
    {
        "instruction": "Given a list of numbers, write a Python function that returns the largest difference between any two numbers in the list.\n[3, 5, 1, 9, 2]",
        "output": "def find_largest_difference(numbers):\n    return max(numbers) - min(numbers)\n\nnumbers = [3, 5, 1, 9, 2]\nprint(find_largest_difference(numbers))",
        "most_similar_instructions": {
            "Given a list of integers, write a Python function that returns a new list with only the even numbers from the input list.": 0.5714285714285715,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.5660377358490566,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.5217391304347826,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5106382978723405,
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.4999999999999999,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4680851063829788,
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.4680851063829788,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.43999999999999995,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.4347826086956522,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.4347826086956522
        },
        "avg_similarity_score": 0.23041408309928368
    },
    {
        "instruction": "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)",
        "output": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sum_even_numbers(numbers))",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.5142857142857142,
            "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))": 0.4675324675324675,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.4411764705882353,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.43333333333333335,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.41509433962264153,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4137931034482759,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.40740740740740744,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.39999999999999997,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.3888888888888889,
            "Suggest a completion for the following Python code to check if a list is sorted in ascending order.\ndef is_ascending(numbers):\n    '''This function should return True if the list ``numbers`` is sorted in ascending order and False otherwise.'''": 0.37837837837837845
        },
        "avg_similarity_score": 0.1978164427253133
    },
    {
        "instruction": "Create a Python function that merges two dictionaries and returns the result.\n{'apple': 5, 'banana': 7}, {'cherry': 3, 'dragonfruit': 9}",
        "output": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}\n\ndict1 = {'apple': 5, 'banana': 7}\ndict2 = {'cherry': 3, 'dragonfruit': 9}\nmerged_dict = merge_dictionaries(dict1, dict2)\nprint(merged_dict)",
        "most_similar_instructions": {
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.5652173913043479,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.5555555555555556,
            "Create a Python function that concatenates two lists into one and returns the concatenated list.": 0.5142857142857143,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5116279069767442,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5,
            "Write a Python program to sort a dictionary by values in descending order.\n{'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}": 0.4878048780487805,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4878048780487805,
            "Write a Python function that merges two dictionaries and returns the combined dictionary.\nDictionaries:\n{\"name\": \"John\", \"age\": 25}\n{\"city\": \"New York\", \"country\": \"USA\"}": 0.46511627906976744,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4444444444444445,
            "Write a Python function that finds the common elements from two given lists.\n['apple', 'banana', 'cherry', 'dragonfruit'], ['cherry', 'dragonfruit', 'guava', 'kiwi']": 0.4390243902439024
        },
        "avg_similarity_score": 0.2183745277991094
    },
    {
        "instruction": "Provide a Python code snippet that generates a random integer between 1 and 100.",
        "output": "import random\n\nrandom_num = random.randint(1, 100)\nprint(random_num)",
        "most_similar_instructions": {
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.6,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.588235294117647,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5714285714285714,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5641025641025641,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5625000000000001,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.5333333333333333,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.5294117647058824,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.5161290322580646,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.5,
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.48484848484848486
        },
        "avg_similarity_score": 0.23150974022246149
    },
    {
        "instruction": "How would you add two numbers using Python code?\nnumber1 = 5\nnumber2 = 7",
        "output": "number1 = 5\nnumber2 = 7\nsum = number1 + number2\nprint(sum)",
        "most_similar_instructions": {
            "How would you merge two Python dictionaries into one?": 0.4545454545454546,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.39999999999999997,
            "How would you generate a random number between 1 and 100 using Python?": 0.38461538461538464,
            "How can you concatenate two lists in Python?": 0.380952380952381,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.37499999999999994,
            "How would you create an empty list in Python?": 0.3636363636363637,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.35294117647058826,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.33333333333333337,
            "How can you find the length of a string using Python?": 0.33333333333333337,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.3125
        },
        "avg_similarity_score": 0.10484102835731611
    },
    {
        "instruction": "Design a Python script that merges two dictionaries into a new dictionary. If the same key exists in both dictionaries, the value from the second dictionary should overwrite the value from the first dictionary.\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}",
        "output": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\n\nmerged_dict = {**dict1, **dict2}\nprint(merged_dict)",
        "most_similar_instructions": {
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.37142857142857144,
            "Create a Python dictionary with keys and values swapped from an existing dictionary.\nExisting dictionary: {'a': 1, 'b': 2, 'c': 3}": 0.3384615384615385,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.33333333333333326,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.33333333333333326,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.32786885245901637,
            "Write a Python function that sums all the values in a dictionary.\n{'a': 5, 'b': 3, 'c': 7}": 0.3225806451612903,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.31884057971014496,
            "Write a Python code snippet to merge two dictionaries.\ndict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}": 0.31746031746031744,
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.31746031746031744,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.3116883116883117
        },
        "avg_similarity_score": 0.1718819519275492
    },
    {
        "instruction": "Create a Python function called \"word_frequency\" that takes a string as input and returns a dictionary mapping each word to its frequency in the string.\n\"Hello world! This is a sample sentence. Hello again!\"",
        "output": "def word_frequency(text):\n    words = text.split()\n    frequency = {}\n    \n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n            \n    return frequency\n\ninput_text = \"Hello world! This is a sample sentence. Hello again!\"\nfrequency_dict = word_frequency(input_text)\nprint(frequency_dict)",
        "most_similar_instructions": {
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.5396825396825397,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.5245901639344263,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.509090909090909,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4918032786885245,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.490566037735849,
            "Write a Python program that takes a string as input and reverses the order of the words in the string.\nInput: \"Hello World! Python is amazing\"\nOutput: \"amazing is Python World! Hello\"": 0.4776119402985075,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.4745762711864407,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.46875000000000006,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4666666666666667
        },
        "avg_similarity_score": 0.2209227782916184
    },
    {
        "instruction": "Create a Python script that generates and prints the first N Fibonacci numbers, where N is a positive integer input by the user.",
        "output": "def generate_fibonacci_numbers(n):\n    fibonacci = [0, 1]\n\n    if n <= 2:\n        return fibonacci[:n]\n    else:\n        for i in range(2, n):\n            next_number = fibonacci[i-1] + fibonacci[i-2]\n            fibonacci.append(next_number)\n\n    return fibonacci\n\nn = int(input(\"Enter a positive integer: \"))\nprint(generate_fibonacci_numbers(n))",
        "most_similar_instructions": {
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5,
            "Create a Python program to find the first n Fibonacci numbers.": 0.4705882352941176,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4324324324324324,
            "Design a Python function that generates n Fibonacci numbers.\n8": 0.42424242424242425,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.4186046511627907,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.41025641025641024,
            "Create a Python function that prints the Fibonacci sequence up to the n-th term.\n8": 0.41025641025641024,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.4090909090909091,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.39999999999999997
        },
        "avg_similarity_score": 0.21982762465847924
    },
    {
        "instruction": "Implement a Python script that accepts two numbers as inputs and checks if they are both even, both odd, or one even and one odd.\nNumber 1: 4\nNumber 2: 7",
        "output": "def check_numbers(number1, number2):\n    if number1 % 2 == 0 and number2 % 2 == 0:\n        return \"Both numbers are even\"\n    elif number1 % 2 != 0 and number2 % 2 != 0:\n        return \"Both numbers are odd\"\n    else:\n        return \"One number is even and the other is odd\"\n\nnumber1 = 4\nnumber2 = 7\nprint(check_numbers(number1, number2))",
        "most_similar_instructions": {
            "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2": 0.39999999999999997,
            "Develop a Python program that checks if a number is even or odd.": 0.36363636363636365,
            "Write a Python function that takes two lists as input and returns True if they have at least one common element, False otherwise.\n[1, 2, 3], [4, 5, 6, 3]": 0.36065573770491804,
            "Write a program that accepts a list of numbers and checks if there are any duplicates in the list in Python.\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]": 0.35483870967741943,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.3508771929824561,
            "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.": 0.339622641509434,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.33333333333333337,
            "Write a Python script that generates a random integer between a specified range and checks if it is divisible by a given number.\nstart = 1\nend = 100\ndivisor = 7": 0.33333333333333337,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.32786885245901637,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.3272727272727273
        },
        "avg_similarity_score": 0.16400400999745737
    },
    {
        "instruction": "Write a Python program that requests a password from the user and checks if it meets the following criteria: \n- At least 8 characters long\n- Contains both uppercase and lowercase letters\n- Contains at least one digit\n- Contains at least one special character (!@#$%^&*)",
        "output": "import re\n\ndef check_password(password):\n    if len(password) < 8:\n        return False\n\n    if not re.search(r'[a-z]', password):\n        return False\n\n    if not re.search(r'[A-Z]', password):\n        return False\n\n    if not re.search(r'[0-9]', password):\n        return False\n\n    if not re.search(r'[!@#$%^&*]', password):\n        return False\n\n    return True\n\npassword = input(\"Enter a password: \")\nprint(check_password(password))",
        "most_similar_instructions": {
            "Write a Python program that generates a random password of given length. The password should include at least one lowercase letter, one uppercase letter, one digit, and one special character.\n10": 0.4444444444444444,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.39344262295081966,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.3823529411764706,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.3561643835616438,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.34920634920634924,
            "Write a Python program that reads a list of numbers from the user, separates the positive and negative numbers, and prints them separately.": 0.34375000000000006,
            "Please generate a Python program that reads a string from the user and removes all vowels from the string.": 0.3333333333333333,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.3333333333333333,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.32876712328767116,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.31884057971014496
        },
        "avg_similarity_score": 0.16848175289372852
    },
    {
        "instruction": "Write a Python function that accepts a string and returns a new string with only the first and last character of each word capitalized.\nString: \"hello world, how are you?\"",
        "output": "def capitalize_word(string):\n    words = string.split()\n    capitalized_words = []\n\n    for word in words:\n        if len(word) > 1:\n            new_word = word[0].upper() + word[1:-1] + word[-1].upper()\n            capitalized_words.append(new_word)\n        else:\n            capitalized_words.append(word.upper())\n\n    return ' '.join(capitalized_words)\n\nstring = \"hello world, how are you?\"\nprint(capitalize_word(string))",
        "most_similar_instructions": {
            "Create a Python program that converts a string into title case (the first letter of each word capitalized).\nInput: \"hello world, how are you?\"": 0.5925925925925926,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5199999999999999,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.4897959183673469,
            "Create a Python function that takes a string as input and returns a new string that is the reverse of the original string, but with the case of each letter reversed. For example, 'Hello' would become 'oLLEh'.": 0.47761194029850745,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.47058823529411764,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4642857142857143,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.4642857142857143,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.45833333333333326,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4545454545454545,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4528301886792453
        },
        "avg_similarity_score": 0.23180706887114388
    },
    {
        "instruction": "Generate a Python script that finds and prints the largest number in a given list of integers.\nList: [25, 8, 56, 32, 18, 98, 43]",
        "output": "def find_largest_number(numbers):\n    largest_number = max(numbers)\n    return largest_number\n\nnumber_list = [25, 8, 56, 32, 18, 98, 43]\nlargest_number = find_largest_number(number_list)\nprint(largest_number)",
        "most_similar_instructions": {
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.5833333333333334,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5777777777777778,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5454545454545454,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.5238095238095238,
            "Generate a correct python program to fulfill the following purpose\nFind the largest number in a list of integers:\n[10, 5, 20, 8, 15]": 0.4897959183673469,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.4782608695652174,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4782608695652174,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.46808510638297873,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4615384615384615,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4583333333333333
        },
        "avg_similarity_score": 0.23335358758211389
    },
    {
        "instruction": "Write a Python program that creates a dictionary containing the square of each number from 1 to a given integer.\n5",
        "output": "def generate_squared_dict(n):\n    squared_dict = {}\n    for i in range(1, n+1):\n        squared_dict[i] = i*i\n    return squared_dict\n\ninput_number = 5\nsquared_dict = generate_squared_dict(input_number)\nprint(squared_dict)",
        "most_similar_instructions": {
            "Generate a Python program that computes the factorial of a given positive integer.": 0.5294117647058824,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.5238095238095238,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5128205128205129,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.5,
            "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.": 0.5,
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.48979591836734687,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4864864864864864,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.4864864864864864,
            "Write a Python script that creates a new directory with the given name.": 0.47058823529411764
        },
        "avg_similarity_score": 0.27691657856870777
    },
    {
        "instruction": "Generate Python code to check whether a given number is a power of 2.",
        "output": "def is_power_of_two(n):\n    if n <= 0:\n        return False\n    while n % 2 == 0:\n        n = n / 2\n    return n == 1",
        "most_similar_instructions": {
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.5454545454545454,
            "Write Python code to check if a given list is empty or not.": 0.5185185185185186,
            "Write a Python function to check if a given year is a leap year.": 0.5,
            "What code would you write to check if a given number is a perfect square in Python?\nnumber = 16": 0.48484848484848486,
            "Create a Python program to check if a number is a perfect square or not.": 0.4827586206896552,
            "Generate Python code to parse a JSON string into a dictionary.": 0.4799999999999999,
            "Generate Python code to reverse the elements of a given list.": 0.4799999999999999,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.4666666666666667,
            "Generate a Python code snippet to find the sum of all natural numbers up to a given number using a for loop.": 0.4444444444444444,
            "Generate a Python program to reverse a given string.": 0.43478260869565216
        },
        "avg_similarity_score": 0.20577942607156902
    },
    {
        "instruction": "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12",
        "output": "number = int(input(\"Enter a number: \"))\n\neven_sum = 0\n\nfor i in range(1, number + 1):\n    if i % 2 == 0:\n        even_sum += i\n\nprint(f\"The sum of even numbers up to {number} is {even_sum}\")",
        "most_similar_instructions": {
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5714285714285715,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5416666666666667,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.5283018867924528,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.5217391304347826,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5172413793103449,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.5172413793103449,
            "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.": 0.5106382978723404,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.48979591836734687,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.48979591836734687
        },
        "avg_similarity_score": 0.2511324995686333
    },
    {
        "instruction": "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.",
        "output": "num1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\nif num1 % num2 == 0:\n    print(f\"{num1} is divisible by {num2}\")\nelse:\n    print(f\"{num1} is not divisible by {num2}\")",
        "most_similar_instructions": {
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.6,
            "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2": 0.5901639344262295,
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.576923076923077,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.5714285714285714,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.553191489361702,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.5454545454545454,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5263157894736842,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.5263157894736842,
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.5084745762711864,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5084745762711864
        },
        "avg_similarity_score": 0.22499691921041942
    },
    {
        "instruction": "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.",
        "output": "def get_largest_negative(numbers):\n    negative_numbers = [number for number in numbers if number < 0]\n    if len(negative_numbers) > 0:\n        return max(negative_numbers)\n    else:\n        return None",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5833333333333334,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5573770491803278,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5333333333333333,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.52,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.48,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.47826086956521735,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.47826086956521735,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.47058823529411764,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.4666666666666667
        },
        "avg_similarity_score": 0.2569391060195114
    },
    {
        "instruction": "Create a Python class called \"Car\" that has attributes for brand, model, and year. Add a method that prints the details of the car as a formatted string.",
        "output": "class Car:\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year\n    \n    def print_car_details(self):\n        print(f\"Brand: {self.brand}, Model: {self.model}, Year: {self.year}\")\n    \ncar = Car(\"Toyota\", \"Camry\", 2020)\ncar.print_car_details()",
        "most_similar_instructions": {
            "Create a Python class called \"Book\" that has attributes \"title\" and \"author\". It should have a method named \"display_info\" that prints the title and author of the book.": 0.5614035087719299,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.5357142857142857,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.5306122448979592,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.5283018867924528,
            "Design a Python class called `Employee` that has attributes for name, age, and salary. It should have a method called `get_salary` that returns the current salary of the employee.": 0.5172413793103449,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.5084745762711865,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.4799999999999999,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4727272727272727,
            "Create a Python class named \"Car\" with attributes \"color\" and \"brand\". The class should have a method named \"drive\" that prints \"The [color] [brand] car is driving.\".": 0.4727272727272727,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.4615384615384615
        },
        "avg_similarity_score": 0.21899350142427676
    },
    {
        "instruction": "Develop a Python program that generates a random uppercase letter from the English alphabet.",
        "output": "import random\nimport string\n\ndef generate_random_letter():\n    return random.choice(string.ascii_uppercase)\n\nrandom_letter = generate_random_letter()\nprint(\"Random uppercase letter:\", random_letter)",
        "most_similar_instructions": {
            "Create a Python program that generates a random number within a specified range.": 0.5185185185185186,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4615384615384615,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.45161290322580644,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.45161290322580644,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4444444444444445,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4444444444444445,
            "Develop a Python program that checks if a number is even or odd.": 0.4444444444444445,
            "Create a Python program that generates all possible combinations of a given string.": 0.4444444444444445,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.4444444444444444,
            "Provide a Python code snippet that generates a random integer between 1 and 100.": 0.42857142857142855
        },
        "avg_similarity_score": 0.22258788345100092
    },
    {
        "instruction": "What would be the correct code to concatenate two lists in Python?",
        "output": "To concatenate two lists in Python, you can use the '+' operator. \n\nFor example:\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nconcatenated_list = list1 + list2\n\nNow, the variable \"concatenated_list\" will contain [1, 2, 3, 4, 5, 6].",
        "most_similar_instructions": {
            "What is the Python code to concatenate two lists into one list?": 0.5833333333333334,
            "How can you concatenate two lists in Python?": 0.5,
            "Write a Python program to concatenate two lists.": 0.4,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.3846153846153846,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.380952380952381,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.37499999999999994,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.36363636363636365,
            "Provide a code snippet to reverse a string in Python.": 0.3636363636363636,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.3448275862068966,
            "What code would you write to check if a string contains only numeric characters in Python?\nstring = \"12345\"": 0.33333333333333337
        },
        "avg_similarity_score": 0.11319724456039826
    },
    {
        "instruction": "Write a Python script that reads a string from the user, converts all the characters to lowercase, and prints the updated string.",
        "output": "user_string = input(\"Enter a string: \")\nupdated_string = user_string.lower()\nprint(f\"The updated string is: {updated_string}\")",
        "most_similar_instructions": {
            "Please generate a Python program that reads a string from the user and removes all vowels from the string.": 0.5853658536585366,
            "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.": 0.5853658536585366,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.5365853658536586,
            "Write a Python program that reads a list of numbers from the user, separates the positive and negative numbers, and prints them separately.": 0.5333333333333332,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.5333333333333332,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.5116279069767442,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.4888888888888889,
            "Write a Python script that randomly selects a name from a list and prints it.": 0.4864864864864865,
            "Write a Python script that converts a given string to uppercase.": 0.4848484848484849,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.47619047619047616
        },
        "avg_similarity_score": 0.2488721906572793
    },
    {
        "instruction": "Create a Python script that sorts a list of dictionaries based on a given key in ascending order.\nkey = \"name\"\npeople = [\n    {\"name\": \"John\", \"age\": 25},\n    {\"name\": \"Alice\", \"age\": 30},\n    {\"name\": \"Bob\", \"age\": 20}\n]",
        "output": "key = \"name\"\npeople = [\n    {\"name\": \"John\", \"age\": 25},\n    {\"name\": \"Alice\", \"age\": 30},\n    {\"name\": \"Bob\", \"age\": 20}\n]\n\nsorted_people = sorted(people, key=lambda x: x[key])\nprint(sorted_people)",
        "most_similar_instructions": {
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.5757575757575758,
            "Can you write a Python program that sorts a list of dictionaries based on a specific key in each dictionary? The program should ask the user for the key to sort by.\n[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 22}, {'name': 'Charlie', 'age': 25}]": 0.5454545454545454,
            "Write a Python function that sorts a list of dictionaries by a specified key. The list and the key should be provided as input to the function.\nInput: [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}]\nKey: \"age\"": 0.4799999999999999,
            "Write Python code to sort a list of dictionaries based on a key in each dictionary.\nstudents = [{'name': 'Alice', 'age': 20}, {'name': 'Bob', 'age': 18}, {'name': 'Charlie', 'age': 22}]\nSort by 'age' key in ascending order.": 0.463768115942029,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.4150943396226416,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.4150943396226416,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.40740740740740733,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.39999999999999997,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.39999999999999997,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.39999999999999997
        },
        "avg_similarity_score": 0.18577208633561815
    },
    {
        "instruction": "Write a Python function to transpose a matrix represented as a list of lists.\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "def transpose_matrix(matrix):\n    return [list(row) for row in zip(*matrix)]\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntransposed_matrix = transpose_matrix(matrix)\nprint(transposed_matrix)",
        "most_similar_instructions": {
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.5957446808510638,
            "Write a Python function that performs matrix multiplication between two given matrices.\n[[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]]": 0.5833333333333334,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.5777777777777778,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.5416666666666666,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5116279069767442,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5098039215686274,
            "Write a program that accepts a list of numbers and checks if there are any duplicates in the list in Python.\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]": 0.509090909090909,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.5,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.5,
            "Generate a Python program that takes two lists as inputs and returns a new list that contains only the common elements between the two lists.\n[1,2,3,4,5,6], [4,5,6,7,8,9]": 0.4918032786885246
        },
        "avg_similarity_score": 0.23922173435522898
    },
    {
        "instruction": "Write a Python function to find the second largest number in a given list.\nGiven list: [5, 1, 3, 7, 9, 2, 8, 6, 4]",
        "output": "def find_second_largest(lst):\n    sorted_list = sorted(lst)\n    return sorted_list[-2]\n\ngiven_list = [5, 1, 3, 7, 9, 2, 8, 6, 4]\nresult = find_second_largest(given_list)\nprint(result)",
        "most_similar_instructions": {
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5833333333333334,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.5777777777777778,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5777777777777778,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5652173913043478,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5652173913043478,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.5531914893617023,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5454545454545454,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.5416666666666667,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.5384615384615384,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5333333333333332
        },
        "avg_similarity_score": 0.252563884721635
    },
    {
        "instruction": "Create a Python script that takes a list of strings as input and concatenates them into a single string separated by spaces.",
        "output": "strings = [\"Hello\", \"world\", \"python\", \"code\"]\nconcatenated_string = ' '.join(strings)\nprint(concatenated_string)",
        "most_similar_instructions": {
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.6,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5714285714285713,
            "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']": 0.5652173913043478,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5416666666666667,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5365853658536586,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.5306122448979591,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5238095238095238,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5217391304347826,
            "Create a Python program that takes a list of strings as input and checks if any of the strings contain the substring \"python\". If a string does contain \"python\", print that string.": 0.5185185185185185,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.5106382978723404
        },
        "avg_similarity_score": 0.24228671400107796
    },
    {
        "instruction": "Implement a Python script that takes a string as input, then checks if the string is a valid email address.",
        "output": "import re\n\ndef check_email_address(email):\n  email_regex = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n  if email_regex.match(email):\n    return True\n  else:\n    return False\n\nemail_address = \"test@example.com\"\nif check_email_address(email_address):\n  print(\"Valid email address.\")\nelse:\n  print(\"Invalid email address.\")",
        "most_similar_instructions": {
            "Write a Python function that takes a string as input and checks if it is a valid email address. Valid email addresses should contain an '@' symbol and a domain name.": 0.6,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.6,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5238095238095238,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.5217391304347826,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5128205128205129,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.5116279069767442,
            "Create a Python function that takes a string and checks if it is a valid palindrome. Ignore spaces, capitalization, and punctuation.\n\"Madam Arora teaches malayalam\"": 0.48888888888888893,
            "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.": 0.47619047619047616,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.4736842105263158,
            "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.": 0.46153846153846156
        },
        "avg_similarity_score": 0.23234857421174132
    },
    {
        "instruction": "Suggest a Python program to find the second largest number in a list.",
        "output": "def find_second_largest(lst):\n    lst.sort()\n    return lst[-2]",
        "most_similar_instructions": {
            "Generate a correct python program to fulfill the following purpose\nFind the largest number in a list of integers:\n[10, 5, 20, 8, 15]": 0.5945945945945945,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5925925925925927,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.588235294117647,
            "Create a Python program to multiply all elements in a list.": 0.5833333333333334,
            "Write a Python function to find the second largest number in a given list.\nGiven list: [5, 1, 3, 7, 9, 2, 8, 6, 4]": 0.5789473684210525,
            "Write a Python program to count the frequency of each element in a given list.": 0.5714285714285715,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.5517241379310345,
            "Write a Python program to find the maximum product of two integers in a list.\n[2, 4, 6, 8, 10]": 0.5454545454545455,
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.5454545454545455,
            "Write Python code to find the number of vowels in a given string.": 0.5384615384615384
        },
        "avg_similarity_score": 0.25634399664994817
    },
    {
        "instruction": "Write a Python script that performs a linear search on a given list and returns the index of a given element if found, or -1 if not found.\nList: [2, 5, 7, 9, 12, 15]\nElement to search: 9",
        "output": "def linear_search(lst, element):\n    for i in range(len(lst)):\n        if lst[i] == element:\n            return i\n    return -1\n\nlst = [2, 5, 7, 9, 12, 15]\nelement = 9\nresult = linear_search(lst, element)\nprint(f'Index of {element}: {result}')",
        "most_similar_instructions": {
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.463768115942029,
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.4193548387096774,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.4,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.4,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4,
            "Write Python code to find the index of a specific element in a list.\nInput: [5, 3, 9, 2, 7], element = 9": 0.3934426229508197,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.3870967741935484,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.38596491228070173,
            "Write a Python function to transpose a matrix represented as a list of lists.\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]": 0.380952380952381
        },
        "avg_similarity_score": 0.22301969133414057
    },
    {
        "instruction": "Write a Python function that checks if two given strings are anagrams (i.e., can be rearranged to form each other) and returns True or False.\nStrings: \"listen\", \"silent\"",
        "output": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2)",
        "most_similar_instructions": {
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.5454545454545454,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5283018867924529,
            "Generate a Python function that checks whether two strings are anagrams or not.\nstring1 = \"listen\"\nstring2 = \"silent\"": 0.5217391304347826,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.5116279069767441,
            "Create a Python program that checks if two given strings are anagrams or not. Ignore case sensitivity and consider only alphanumeric characters.\n\"listen\", \"silent\"": 0.49056603773584906,
            "Create a Python function that checks if two given strings are anagrams. Anagrams are the strings that have the same characters but can be arranged in different orders.\nString 1: \"listen\", String 2: \"silent\"": 0.47619047619047616,
            "Write Python code to check if two strings are anagrams or not.\nInput: \"listen\", \"silent\"": 0.4545454545454545,
            "Write a Python program that checks if two lists are equal or not.": 0.4285714285714286,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.4,
            "Implement a Python function that checks if a given number is prime (only divisible by 1 and itself) and returns True if it is, and False otherwise.\nExample input: 7": 0.3728813559322034
        },
        "avg_similarity_score": 0.18754383562615926
    },
    {
        "instruction": "Write a Python program that finds and replaces all occurrences of a word in a given string with a new word.\nInput string: \"The brown cat jumped over the brown dog.\"\nWord to replace: \"brown\", New word: \"black\"",
        "output": "def replace_word(input_string, word_to_replace, new_word):\n    replaced_string = input_string.replace(word_to_replace, new_word)\n    return replaced_string\n\ninput_str = \"The brown cat jumped over the brown dog.\"\nword_to_replace = \"brown\"\nnew_word = \"black\"\nprint(replace_word(input_str, word_to_replace, new_word))",
        "most_similar_instructions": {
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.5,
            "Write a Python function that takes a string and replaces all occurrences of a given character with a new character.\nString: \"banana\", Old character: \"a\", New character: \"o\"": 0.48484848484848486,
            "Write a Python script that replaces all occurrences of a specified word in a text with a different word.\ntext = \"I love apples, apples are my favorite fruit.\"\nReplace \"apples\" with \"oranges\".": 0.45714285714285713,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.4516129032258065,
            "Write a Python program that finds the length of the longest word in a given string.": 0.44444444444444436,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.4262295081967213,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.3880597014925373,
            "Design a Python function that replaces all occurrences of a given word with another word in a given sentence.\n'apple', 'fruit', 'I ate an apple.'": 0.38095238095238093,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.3548387096774194,
            "Create a Python program that generates all possible combinations of a given string.": 0.35294117647058826
        },
        "avg_similarity_score": 0.20722953087848825
    },
    {
        "instruction": "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.",
        "output": "def are_anagrams(str1, str2):\n    sorted_str1 = ''.join(sorted(str1))\n    sorted_str2 = ''.join(sorted(str2))\n    if sorted_str1 == sorted_str2:\n        return True\n    else:\n        return False\n\nstr1 = input(\"Enter the first string: \")\nstr2 = input(\"Enter the second string: \")\nprint(are_anagrams(str1, str2))",
        "most_similar_instructions": {
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.6,
            "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.": 0.56,
            "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.": 0.55,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.5333333333333333,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5263157894736842,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5238095238095238,
            "Write a Python program that checks if two lists are equal or not.": 0.5161290322580646,
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.5128205128205129,
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.5116279069767442,
            "Create a Python script that prompts the user to enter their age and prints whether they are a minor, an adult, or a senior citizen.": 0.5116279069767442
        },
        "avg_similarity_score": 0.23863900872122557
    },
    {
        "instruction": "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.",
        "output": "def reverse_string(input_string):\n    reversed_string = input_string[::-1]\n    return reversed_string\n\ninput_str = input(\"Enter a string: \")\nprint(reverse_string(input_str))",
        "most_similar_instructions": {
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.6,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.5945945945945946,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.5853658536585366,
            "Create a Python program that loops through a list and prints each element in reverse order.": 0.5714285714285714,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5641025641025641,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.5500000000000002,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.5106382978723404,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.4897959183673469
        },
        "avg_similarity_score": 0.26800303788851715
    },
    {
        "instruction": "Write a Python function to remove all punctuation from a given string. Punctuation includes characters such as '.', ',', '!', '?' etc.\nString: \"Hello, world!\"",
        "output": "import string\n\ndef remove_punctuation(text):\n    no_punct = text.translate(str.maketrans('', '', string.punctuation))\n    return no_punct\n\ntext = \"Hello, world!\"\nclean_text = remove_punctuation(text)\nprint(clean_text)",
        "most_similar_instructions": {
            "How can you write a Python function to remove all punctuation from a given sentence?\nsentence = \"Hello! How are you?\"": 0.5853658536585366,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5714285714285714,
            "Write a Python code snippet to remove all whitespace characters (space, tab, newline) from a given string.\nstring = \"Hello\\tWorld\\n\"": 0.5714285714285714,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.5,
            "Write a program that removes all whitespace characters from a given string and returns the result.\nString: 'hello   world'": 0.5,
            "Write a Python program to truncate a given string to a specified length.\n\"Hello, World!\", 7": 0.4864864864864864,
            "Generate a Python function to remove all occurrences of a specific element from a given list.": 0.4864864864864864,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.4615384615384615,
            "Write a Python program to convert a string of lowercase characters to uppercase characters using the built-in string method.\nstring = 'hello world!'": 0.4545454545454545,
            "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'": 0.45
        },
        "avg_similarity_score": 0.22026445213226306
    },
    {
        "instruction": "Write a Python program to generate a random number between a given range of numbers using the random module.\nRange: 1-100",
        "output": "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start, end)\n\nstart = 1\nend = 100\nrandom_number = generate_random_number(start, end)\nprint(random_number)",
        "most_similar_instructions": {
            "Write Python code to generate a random integer between a given range.\n10, 50": 0.5555555555555556,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5531914893617023,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.5454545454545454,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.5283018867924528,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.5263157894736842,
            "Please write a Python function to generate a random password of a given length.": 0.5000000000000001,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.5,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.4999999999999999,
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.4878048780487805,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.47619047619047616
        },
        "avg_similarity_score": 0.24484553503901688
    },
    {
        "instruction": "Write a Python function to calculate the hypotenuse of a right-angled triangle given the lengths of the other two sides.\nSide 1: 3\nSide 2: 4",
        "output": "import math\n\ndef calculate_hypotenuse(side1, side2):\n    return math.sqrt(side1**2 + side2**2)\n\nside1 = 3\nside2 = 4\nhypotenuse = calculate_hypotenuse(side1, side2)\nprint(hypotenuse)",
        "most_similar_instructions": {
            "Design a Python function that calculates the area of a triangle given the lengths of its three sides.\nSide 1: 5, Side 2: 7, Side 3: 9": 0.5925925925925926,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5833333333333334,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.4888888888888889,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.48148148148148145,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.47826086956521735,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.47826086956521735,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4727272727272727,
            "Write a Python function to find the second largest number in a given list.\nGiven list: [5, 1, 3, 7, 9, 2, 8, 6, 4]": 0.4615384615384615,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4583333333333333,
            "Write a Python function to find the square roots of all the elements in a given list.\nnumbers = [1, 4, 9, 16]": 0.44897959183673464
        },
        "avg_similarity_score": 0.24499269270530868
    },
    {
        "instruction": "Create a Python list of strings containing names. Write a function that sorts the list alphabetically and prints the sorted list.",
        "output": "def sort_string_list(string_list):\n    string_list.sort()\n    return string_list\n\nnames = [\"John\", \"Mary\", \"Alice\", \"David\"]\nsorted_names = sort_string_list(names)\nprint(sorted_names)",
        "most_similar_instructions": {
            "Given a list called \"students\", write a Python script that sorts the students in alphabetical order and prints the sorted list.": 0.5714285714285714,
            "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.": 0.5106382978723405,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.4878048780487805,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.47619047619047616,
            "Given a list of integers, write a Python function that returns a new list with only the even numbers from the input list.": 0.4545454545454545,
            "Create a Python function that concatenates two lists into one and returns the concatenated list.": 0.4444444444444444,
            "Given a list of numbers, write a Python function that returns the largest difference between any two numbers in the list.\n[3, 5, 1, 9, 2]": 0.42553191489361697,
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.4186046511627907,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.41025641025641024,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4090909090909091
        },
        "avg_similarity_score": 0.23557553618046545
    },
    {
        "instruction": "Create a Python dictionary with 3 key-value pairs representing the name, age, and profession of a person.",
        "output": "person = {\n    'name': 'John Doe',\n    'age': 30,\n    'profession': 'Software Engineer'\n}\n\nprint(person)",
        "most_similar_instructions": {
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.5714285714285715,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.5128205128205129,
            "Create a Python dictionary that stores the following information about a person: name, age, city, and profession. Print out the dictionary.": 0.4615384615384615,
            "Create a Python dictionary with keys \"name\", \"age\", and \"location\" and values \"John\", 30, and \"New York\" respectively.": 0.4444444444444444,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.4210526315789474,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.41379310344827586,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.411764705882353,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.39999999999999997,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.39999999999999997
        },
        "avg_similarity_score": 0.20331746772008624
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nnums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''",
        "output": "nums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''\n    return num % 2 == 0",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.5306122448979591,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.5,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.4727272727272727,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.46808510638297873,
            "Suggest a completion for the following python code.": 0.45714285714285713,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.4528301886792453,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.43902439024390244,
            "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''": 0.43636363636363634,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.43478260869565216,
            "Suggest a completion for the following Python code to check if a list is sorted in ascending order.\ndef is_ascending(numbers):\n    '''This function should return True if the list ``numbers`` is sorted in ascending order and False otherwise.'''": 0.42424242424242425
        },
        "avg_similarity_score": 0.18262380098541414
    },
    {
        "instruction": "Suggest a completion for the following Python code.\ntext = 'Lorem ipsum dolor sit amet'\n\ndef count_words(text):\n    '''This function counts the number of words in a given text.'''",
        "output": "text = 'Lorem ipsum dolor sit amet'\n\ndef count_words(text):\n    '''This function counts the number of words in a given text.'''\n    words = text.split()\n    return len(words)",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.5555555555555556,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.5161290322580646,
            "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))": 0.5066666666666666,
            "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''": 0.49122807017543857,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.4897959183673469,
            "Suggest a completion for the following Python code.\nnums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''": 0.4642857142857143,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4615384615384615,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.456140350877193,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.43636363636363634,
            "Suggest a completion for the following python code.": 0.4324324324324324
        },
        "avg_similarity_score": 0.18995381315328408
    },
    {
        "instruction": "Create a Python class called 'Student' with the following attributes: name (string), age (integer), and gpa (float). Include a method called 'calculate_grade' that takes the 'gpa' attribute as input and returns a string indicating the corresponding grade (A, B, C, D, or F).",
        "output": "class Student:\n    def __init__(self, name, age, gpa):\n        self.name = name\n        self.age = age\n        self.gpa = gpa\n\n    def calculate_grade(self):\n        if self.gpa >= 4.0:\n            return 'A'\n        elif self.gpa >= 3.0:\n            return 'B'\n        elif self.gpa >= 2.0:\n            return 'C'\n        elif self.gpa >= 1.0:\n            return 'D'\n        else:\n            return 'F'\n\nstudent = Student('John', 18, 3.5)\ngrade = student.calculate_grade()\nprint(grade)",
        "most_similar_instructions": {
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.4810126582278481,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4507042253521127,
            "Create a Python class called \"Employee\" with attributes name, age, and salary. Implement a method called \"get_tax\" in the class that calculates and returns the tax amount based on the salary.": 0.4473684210526316,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.43478260869565216,
            "Create a class called \"Cat\" with the following attributes: name, age, color. Provide a constructor to initialize these attributes and a method called \"meow\" that prints \"Meow!\".": 0.4225352112676057,
            "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10": 0.4117647058823529,
            "Create a Python dictionary with keys \"name\", \"age\", and \"city\". Write a function that takes the dictionary as input and prints each key-value pair on a separate line.": 0.410958904109589,
            "Create a Python class called \"Car\" that has attributes for brand, model, and year. Add a method that prints the details of the car as a formatted string.": 0.3888888888888889,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.3880597014925373,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.3835616438356164
        },
        "avg_similarity_score": 0.17647523892970746
    },
    {
        "instruction": "Design a Python class to represent a book with attributes like title, author, and year. Include a method that displays the book's information and another method that checks if the book is written by a given author.",
        "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    def display_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Year: {self.year}\")\n\n    def is_written_by(self, author_name):\n        return self.author.lower() == author_name.lower()\n\nbook1 = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\nbook1.display_info()\nprint(book1.is_written_by(\"Harper Lee\"))",
        "most_similar_instructions": {
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5074626865671642,
            "Design a Python class representing a book with attributes title, author, and price. Implement a method to calculate the total price after applying a given discount percentage.": 0.49230769230769234,
            "Create a Python class representing a book. The class should have attributes like title, author, and price. Implement a method that prints the book details.": 0.47619047619047616,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.4307692307692308,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4307692307692308,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.4242424242424242,
            "Create a Python class called \"Book\" that has attributes \"title\" and \"author\". It should have a method named \"display_info\" that prints the title and author of the book.": 0.417910447761194,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.4117647058823529,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.40625000000000006,
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.3928571428571429
        },
        "avg_similarity_score": 0.18796543478115169
    },
    {
        "instruction": "Design a Python class to represent a student with attributes like name, age, and grade. Include methods to update the student's grade and display the student's information.",
        "output": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    def update_grade(self, new_grade):\n        self.grade = new_grade\n\n    def display_info(self):\n        print(f\"Name: {self.name}\")\n        print(f\"Age: {self.age}\")\n        print(f\"Grade: {self.grade}\")\n\nstudent1 = Student(\"Alice\", 15, 9)\nstudent1.display_info()\nstudent1.update_grade(10)\nstudent1.display_info()",
        "most_similar_instructions": {
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.5777777777777777,
            "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10": 0.5660377358490567,
            "Design a Python class that represents a person with attributes for their name, age, and gender. Include a method to print out the person's details.": 0.509090909090909,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.5,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.4827586206896552,
            "Design a Python class to represent a book with attributes like title, author, and year. Include a method that displays the book's information and another method that checks if the book is written by a given author.": 0.47761194029850745,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.4615384615384615,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.4528301886792453,
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.43750000000000006,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.4313725490196078
        },
        "avg_similarity_score": 0.1801735782243563
    },
    {
        "instruction": "Design a Python class to represent a circle with attributes like radius. Include methods to calculate and return the circumference and area of the circle.",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculate_circumference(self):\n        return 2 * math.pi * self.radius\n\n    def calculate_area(self):\n        return math.pi * (self.radius ** 2)\n\ncircle1 = Circle(5)\nprint(circle1.calculate_circumference())\nprint(circle1.calculate_area())",
        "most_similar_instructions": {
            "Design a Python class to represent a student with attributes like name, age, and grade. Include methods to update the student's grade and display the student's information.": 0.5925925925925927,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.5833333333333334,
            "Create a Python class named \"Circle\" with attribute radius. Implement methods to compute the area and circumference of the circle.": 0.5777777777777778,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5306122448979592,
            "Design a Python class that represents a car with attributes for its make, model, and year. Include a method to calculate the age of the car in years.": 0.49056603773584906,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.4897959183673469,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.4615384615384615,
            "Create a Python class to represent a Rectangle. The class should have attributes such as length and width, and methods such as calculate_area and calculate_perimeter to calculate the area and perimeter of the rectangle.": 0.45901639344262296,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.45454545454545453,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.4444444444444445
        },
        "avg_similarity_score": 0.20805195436020613
    },
    {
        "instruction": "You want to generate a random password of length \"n\" using Python. How would you do it?",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(characters) for _ in range(length))\n\npassword_length = 8\nrandom_password = generate_password(password_length)\nprint(random_password)",
        "most_similar_instructions": {
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.5,
            "Please write a Python function to generate a random password of a given length.": 0.45161290322580644,
            "How would you generate a random number between 1 and 100 using Python?": 0.4000000000000001,
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.38095238095238104,
            "Write Python code to generate a random password of length 10 that includes both uppercase and lowercase letters, digits, and special characters.": 0.358974358974359,
            "How can you write a Python function to generate a random password with 8 characters using lowercase letters, uppercase letters, and digits?": 0.358974358974359,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.35294117647058826,
            "How can you generate a random integer between a given range in Python?": 0.33333333333333337,
            "How can you sort a list of strings in alphabetical order using Python?": 0.33333333333333337,
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.3225806451612903
        },
        "avg_similarity_score": 0.1320752694453296
    },
    {
        "instruction": "Write a Python script that generates a random number between 1 and 10, then checks if the number is divisible by 2. If it is, print \"Even number\", otherwise print \"Odd number\".",
        "output": "import random\n\nnumber = random.randint(1, 10)\nif number % 2 == 0:\n    print(\"Even number\")\nelse:\n    print(\"Odd number\")",
        "most_similar_instructions": {
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5660377358490566,
            "Write a Python script that generates a random integer between a specified range and checks if it is divisible by a given number.\nstart = 1\nend = 100\ndivisor = 7": 0.5245901639344263,
            "Write a Python script that takes two numbers as input and checks if the first number is divisible by the second number. Print \"Divisible\" if it is divisible, \"Not divisible\" otherwise.\nInput: 10, 2": 0.5151515151515151,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.5000000000000001,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.5000000000000001,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.47457627118644063,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.47058823529411764,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.46875,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.46875,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.45161290322580644
        },
        "avg_similarity_score": 0.20639795351667237
    },
    {
        "instruction": "Create a Python program that takes a list of strings as input and returns the number of occurrences of a given word in the list.\n['apple', 'banana', 'cherry', 'banana', 'banana']\n'banana'",
        "output": "def count_word_occurrences(lst, word):\n    return lst.count(word)\n\nexample_list = ['apple', 'banana', 'cherry', 'banana', 'banana']\ngiven_word = 'banana'\noccurrences = count_word_occurrences(example_list, given_word)\nprint('Occurrences:', occurrences)",
        "most_similar_instructions": {
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.5882352941176471,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.56,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.5573770491803278,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5555555555555556,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.5517241379310345,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5357142857142857,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5185185185185185,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5098039215686274,
            "Create a Python program that takes a list of tuples and sorts the list by the second element in each tuple.\nInput list: [('banana', 3), ('apple', 5), ('cherry', 2)]": 0.5000000000000001,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5
        },
        "avg_similarity_score": 0.258723884439158
    },
    {
        "instruction": "Can you show an example of how to use the Python random module to generate a random number between 1 and 10, inclusive?",
        "output": "import random\n\nrandom_number = random.randint(1, 10)\nprint(random_number)",
        "most_similar_instructions": {
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.5128205128205128,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.4583333333333333,
            "How would you generate a random number between 1 and 100 using Python?": 0.4444444444444444,
            "Write Python code to generate a random integer between a given range.\n10, 50": 0.3783783783783784,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.3636363636363636,
            "How can you write a Python function to generate a random password with 8 characters using lowercase letters, uppercase letters, and digits?": 0.3555555555555555,
            "Write a Python program to generate a random number between a given range of numbers using the random module.\nRange: 1-100": 0.3555555555555555,
            "Can you design a Python program to generate a Fibonacci sequence up to a given limit?\nlimit = 10": 0.34146341463414637,
            "How can you generate a random integer between a given range in Python?": 0.33333333333333337,
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.3333333333333333
        },
        "avg_similarity_score": 0.1546868053444109
    },
    {
        "instruction": "Can you show an example of how to use the Python re module to find all occurrences of a specific pattern in a string?",
        "output": "import re\n\nstring = \"The quick brown fox jumps over the lazy dog.\"\npattern = r'\\b\\w{4}\\b'  # Find all 4-letter words\nmatches = re.findall(pattern, string)\nprint(matches)",
        "most_similar_instructions": {
            "Can you show an example of how to use the Python random module to generate a random number between 1 and 10, inclusive?": 0.5957446808510638,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.42857142857142855,
            "Generate a Python script to find and replace a specific word in a given string.": 0.4102564102564102,
            "Generate a Python function to remove all occurrences of a specific element from a given list.": 0.4,
            "Write Python code to find the number of vowels in a given string.": 0.3783783783783784,
            "How can you write Python code to count the number of occurrences of a specific element in a list?\nelement = 7\nnumbers = [5, 2, 7, 4, 7, 1, 7]": 0.37735849056603776,
            "What is the Python code to replace all occurrences of a substring within a string?\nstring = \"Hello, World!\"\nold_substring = \"World\"\nnew_substring = \"Universe\"": 0.375,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.375,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.372093023255814,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.3636363636363636
        },
        "avg_similarity_score": 0.15943214779646292
    },
    {
        "instruction": "Can you write a Python code that checks whether a given string is a valid email address or not? (Assuming valid email addresses contain a single '@' symbol and at least one '.' after the '@' symbol)",
        "output": "def is_valid_email(email):\n    if email.count('@') == 1 and email.count('.') > email.index('@'):\n        return True\n    else:\n        return False\n\nemail = \"example@example.com\"\nis_valid = is_valid_email(email)\nprint(is_valid)",
        "most_similar_instructions": {
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5714285714285714,
            "Write a Python function that takes a string as input and checks if it is a valid email address. Valid email addresses should contain an '@' symbol and a domain name.": 0.53125,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.48148148148148157,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.46153846153846156,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.4615384615384615,
            "Write a Python program that checks whether a given string is a palindrome or not. A palindrome is a word that is the same when reversed (e.g. \"level\" or \"radar\").\nInput: \"madam\"\nOutput: True": 0.43478260869565216,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.41935483870967744,
            "Write a Python function that checks whether a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors.": 0.41791044776119407,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.4150943396226416,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.40816326530612246
        },
        "avg_similarity_score": 0.2052446529403566
    },
    {
        "instruction": "Suggest a completion for the following python code that finds the maximum value in a list of integers.\ndef find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value",
        "output": "def find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.5866666666666667,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.5454545454545455,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.5066666666666667,
            "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))": 0.4390243902439024,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.42105263157894735,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.3870967741935483,
            "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))": 0.37209302325581395,
            "Create a Python function to find the maximum value in a list of numbers.": 0.37037037037037035,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.36619718309859156,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.35616438356164376
        },
        "avg_similarity_score": 0.17570174276249112
    },
    {
        "instruction": "Suggest an implementation for the following Python function that reverses a given string.\ndef reverse_string(text):\n    return text[::-1]",
        "output": "def reverse_string(text):\n    return text[::-1]",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.5,
            "Complete the following Python code to reverse a given string.\ndef reverse_string(string):\n    # TODO: Implement the function": 0.4736842105263158,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.47058823529411764,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4186046511627907,
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.4186046511627907,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.4074074074074075,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.4,
            "Complete the following Python code to reverse a string.\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string": 0.3829787234042553,
            "Implement a Python function that checks if a given string is an anagram of another string.\nString 1: \"listen\"\nString 2: \"silent\"": 0.380952380952381,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.36842105263157887
        },
        "avg_similarity_score": 0.1782832288452286
    },
    {
        "instruction": "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))",
        "output": "def remove_duplicates(numbers):\n    return list(set(numbers))",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.5333333333333333,
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.5172413793103448,
            "Suggest a completion for the following python code.": 0.5161290322580645,
            "Design a Python function that removes all duplicates from a given list.": 0.5142857142857143,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5,
            "Suggest a completion for the following Python code to check if a list is sorted in ascending order.\ndef is_ascending(numbers):\n    '''This function should return True if the list ``numbers`` is sorted in ascending order and False otherwise.'''": 0.4838709677419355,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.4814814814814815,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4782608695652174,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.46511627906976744,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4545454545454545
        },
        "avg_similarity_score": 0.1992395313566598
    },
    {
        "instruction": "How can you extract all the odd numbers from a given list and store them in a new list?\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "def extract_odd_numbers(lst):\n    odd_numbers = [num for num in lst if num % 2 != 0]\n    return odd_numbers\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnew_list = extract_odd_numbers(list)\nprint(new_list)",
        "most_similar_instructions": {
            "Write Python code to extract all the unique elements from a given list and store them in a new list.": 0.5714285714285714,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.5357142857142857,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.5263157894736843,
            "How can you create a Python dictionary comprehension to square each element of a list and store it as key-value pairs in a dictionary?\ninput_list = [1, 2, 3, 4, 5]": 0.4918032786885246,
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.49122807017543857,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.49056603773584906,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.4897959183673469,
            "Write a program that accepts a list of numbers and checks if there are any duplicates in the list in Python.\n[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]": 0.4666666666666667,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.45833333333333337,
            "Write a Python function to transpose a matrix represented as a list of lists.\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]": 0.4528301886792453
        },
        "avg_similarity_score": 0.17401557265895964
    },
    {
        "instruction": "How can you convert a given number of seconds into hours, minutes, and seconds using Python?\nseconds = 3700",
        "output": "def convert_seconds(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = (seconds % 3600) % 60\n    return hours, minutes, seconds\n\nseconds = 3700\nh, m, s = convert_seconds(seconds)\nprint(\"Hours:\", h)\nprint(\"Minutes:\", m)\nprint(\"Seconds:\", s)",
        "most_similar_instructions": {
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.5,
            "How can you write a Python function that converts a given number of minutes to hours and minutes?\nminutes = 123": 0.4736842105263158,
            "How can you sort a list of strings in alphabetical order using Python?": 0.45161290322580644,
            "How would you generate a random number between 1 and 100 using Python?": 0.45161290322580644,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.43750000000000006,
            "How can you convert a string to uppercase in Python?": 0.42857142857142855,
            "How can you find the length of a string using Python?": 0.41379310344827586,
            "How can you generate a random integer between a given range in Python?": 0.3870967741935484,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.37837837837837834,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.37837837837837834
        },
        "avg_similarity_score": 0.14055122941309234
    },
    {
        "instruction": "Implement a Python script that prompts the user to input a list of numbers (separated by commas) and then calculates the sum of all the numbers.",
        "output": "numbers = input(\"Enter a list of numbers (separated by commas): \").split(',')\nsum = 0\nfor num in numbers:\n    sum += int(num)\nprint(\"The sum is\", sum)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.5925925925925927,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.5862068965517242,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5652173913043479,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.5531914893617021,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5531914893617021,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.5454545454545455,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.5098039215686274,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.49056603773584906,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4680851063829788,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.4680851063829788
        },
        "avg_similarity_score": 0.24843060906670233
    },
    {
        "instruction": "Design a Python function that sorts a given list in descending order.\n[9, 4, 7, 2, 5]",
        "output": "def sort_list_descending(lst):\n    return sorted(lst, reverse=True)\n\ninput_list = [9, 4, 7, 2, 5]\nsorted_list = sort_list_descending(input_list)\nprint(sorted_list)",
        "most_similar_instructions": {
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5882352941176471,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5789473684210527,
            "Design a Python function that removes all duplicates from a given list.": 0.5517241379310345,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.5405405405405405,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5405405405405405,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.5294117647058824,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5238095238095238,
            "Write a Python function that sorts a dictionary by its values in ascending order.\n{'apple': 3, 'banana': 2, 'kiwi': 5, 'grapes': 4}": 0.5128205128205129,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5128205128205129,
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.5
        },
        "avg_similarity_score": 0.24588362181345708
    },
    {
        "instruction": "Create a Python function that takes a list and returns a new list with unique elements, sorted in ascending order.\n[4, 2, 2, 1, 4, 3]",
        "output": "def unique_sorted(lst):\n    unique_lst = list(set(lst))\n    return sorted(unique_lst)\n\nlst = [4, 2, 2, 1, 4, 3]\nresult = unique_sorted(lst)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.6,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5714285714285715,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5490196078431373,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.5263157894736842,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5217391304347826,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5106382978723405,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5106382978723405,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5084745762711863,
            "Write a Python function that takes a list as input and returns a new list with the unique elements from the input list. The order of the elements in the output list should be the same as the input list.": 0.4848484848484849,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.4814814814814815
        },
        "avg_similarity_score": 0.2381015629237241
    },
    {
        "instruction": "Please provide a Python code snippet that demonstrates how to generate a random number between two given values.",
        "output": "import random\n\nnum1 = 10\nnum2 = 20\nrandom_num = random.randint(num1, num2)\nprint(f\"The random number between {num1} and {num2} is: {random_num}\")",
        "most_similar_instructions": {
            "Provide a Python code snippet that generates a random integer between 1 and 100.": 0.5625000000000001,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.5,
            "Please write a Python function to generate a random password of a given length.": 0.5,
            "Write Python code to generate a random integer between a given range.\n10, 50": 0.5,
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.4864864864864865,
            "Can you provide a Python code snippet to find the square root of a given number?": 0.47058823529411764,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.47058823529411764,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.4545454545454546,
            "Write a Python program to generate a random number between a given range of numbers using the random module.\nRange: 1-100": 0.45,
            "Produce a Python code snippet to concatenate two dictionaries.": 0.4444444444444444
        },
        "avg_similarity_score": 0.22581087676350298
    },
    {
        "instruction": "Write a Python function that finds and returns the median of a given list of numbers. If the list has an even number of elements, return the average of the two middle numbers.\n[6, 4, 8, 2, 9]",
        "output": "def find_median(numbers):\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    if n % 2 == 1:\n        return sorted_numbers[n//2]\n    else:\n        middle1 = sorted_numbers[n//2 - 1]\n        middle2 = sorted_numbers[n//2]\n        return (middle1 + middle2) / 2\n\nnumbers = [6, 4, 8, 2, 9]\nresult = find_median(numbers)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that finds and returns the mode(s) of a given list of integers. If there are multiple modes, return them in ascending order.\nInput: [1, 2, 3, 2, 4, 2]": 0.5,
            "Create a Python function that returns the middle element(s) from a given list. If the list has an odd length, return a single middle element. If the list has an even length, return two middle elements.": 0.4799999999999999,
            "Write a Python function that calculates and returns the average of a given list of numbers.\n[10, 15, 20, 25, 30]": 0.4745762711864407,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4745762711864407,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.4666666666666667,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.4590163934426229,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.4444444444444444,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.4411764705882353,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.43333333333333335,
            "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]": 0.4242424242424242
        },
        "avg_similarity_score": 0.23813338738748438
    },
    {
        "instruction": "Write a Python function that adds a given element at the end of a given list and returns the updated list.\nList: [5, 2, 9]\nElement: 7",
        "output": "def add_element(list, element):\n    list.append(element)\n    return list\n\nmy_list = [5, 2, 9]\nelement = 7\nresult = add_element(my_list, element)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5263157894736842,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.5106382978723405,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.5,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4888888888888889,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4888888888888889,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.48,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.48,
            "Write a Python function that encrypts a given string using the Caesar cipher with a given key.\n\"hello\", 5": 0.47826086956521735,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4615384615384615,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.4583333333333333
        },
        "avg_similarity_score": 0.2713941333826223
    },
    {
        "instruction": "Write a Python function that checks if all elements in a given list are of the same data type. The function should return True if all elements have the same data type and False otherwise.\nList: [1, 2, 3]",
        "output": "def same_data_type(list):\n    data_type = type(list[0])\n    for element in list:\n        if type(element) != data_type:\n            return False\n    return True\n\nmy_list = [1, 2, 3]\nresult = same_data_type(my_list)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.5806451612903226,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5753424657534247,
            "Write a Python program that checks if two given strings are anagrams. The program should return True if they are anagrams and False otherwise.\n'listen', 'silent'": 0.4923076923076924,
            "How can you write a Python function that checks if all elements in a given list are equal?\nlst = [1, 1, 1, 1, 1]": 0.4761904761904762,
            "Write a Python function that checks whether all elements in a list are even numbers.\nlist = [2, 4, 6, 8, 10]": 0.4666666666666667,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.43333333333333335,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.4117647058823529,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.4067796610169492,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4,
            "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.": 0.4
        },
        "avg_similarity_score": 0.2238383065319178
    },
    {
        "instruction": "Can you implement a Python function that returns the reversed version of a given string?\n\"Python is great!\"",
        "output": "def reverse_string(string):\n    return string[::-1]\n\nword = \"Python is great!\"\nprint(reverse_string(word))",
        "most_similar_instructions": {
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5625000000000001,
            "How can you implement a Python function to reverse a string?": 0.5517241379310345,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5454545454545454,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.5128205128205129,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.5,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.5,
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.4888888888888889,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.4878048780487805,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.4864864864864865
        },
        "avg_similarity_score": 0.26541586419461094
    },
    {
        "instruction": "Implement a Python function that finds the index of the first occurrence of an element in a list.\n[5, 2, 8, 3, 1, 2, 5, 8, 2]\n2",
        "output": "def find_first_occurrence(numbers, element):\n    for i, num in enumerate(numbers):\n        if num == element:\n            return i\n    \n    return -1\n\nnumbers = [5, 2, 8, 3, 1, 2, 5, 8, 2]\nelement = 2\nprint('Index of first occurrence:', find_first_occurrence(numbers, element))",
        "most_similar_instructions": {
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.5846153846153848,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5660377358490566,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5517241379310344,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.5517241379310344,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.52,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5106382978723404,
            "Please suggest a Python code snippet to count the number of occurrences of a specific element in a list.\nlist_of_elements = [1, 2, 3, 2, 4, 2, 5, 2]\nspecific_element = 2": 0.49180327868852464,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.48979591836734687,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4888888888888888,
            "Complete the following Python code to find the index of the first occurrence of a given value in a list.\nnumbers = [1, 3, 5, 7, 9, 3, 4, 5]\nvalue = 3": 0.47457627118644063
        },
        "avg_similarity_score": 0.23369640757230037
    },
    {
        "instruction": "Suggest code that sorts a list of integers in ascending order.\nnumbers = [5, 3, 8, 1, 2]",
        "output": "numbers = [5, 3, 8, 1, 2]\nnumbers.sort()\nprint(numbers)",
        "most_similar_instructions": {
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.5945945945945946,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.5945945945945946,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5882352941176471,
            "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]": 0.5555555555555555,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.5405405405405405,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5142857142857143,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.48648648648648646,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.4736842105263158,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.47058823529411764,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4324324324324324
        },
        "avg_similarity_score": 0.17379090668329172
    },
    {
        "instruction": "Write Python code that converts a list of integers into a comma-separated string.\nnumbers = [1, 2, 3, 4, 5]",
        "output": "numbers = [1, 2, 3, 4, 5]\ncomma_separated_string = ', '.join(str(num) for num in numbers)\nprint(comma_separated_string)",
        "most_similar_instructions": {
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.6,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5641025641025641,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5365853658536585,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5365853658536585,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.5333333333333332,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.5263157894736842,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5128205128205129,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.5,
            "Write a Python program to convert a string of comma-separated values (CSV) into a list of integers.\nInput: '1,2,3,4,5'": 0.5,
            "Write Python code that converts a list of integers to its corresponding Roman numeral representation.\n[1, 4, 9, 40, 90, 100, 500, 900, 1000]": 0.5
        },
        "avg_similarity_score": 0.23392899147575316
    },
    {
        "instruction": "Write a Python script that creates a dictionary from two lists, where one list contains the keys and the other list contains the values.\nkeys = [\"apple\", \"banana\", \"cherry\"]\nvalues = [3, 6, 9]",
        "output": "keys = [\"apple\", \"banana\", \"cherry\"]\nvalues = [3, 6, 9]\ndictionary = dict(zip(keys, values))\nprint(dictionary)",
        "most_similar_instructions": {
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.5666666666666667,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.5517241379310345,
            "Write a Python program to create a dictionary from two lists, where the keys come from one list and the values come from the other list.": 0.5172413793103449,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.4482758620689655,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.4444444444444444,
            "Create a Python function that merges two dictionaries and returns the result.\n{'apple': 5, 'banana': 7}, {'cherry': 3, 'dragonfruit': 9}": 0.42307692307692313,
            "Write a Python program to sort a dictionary by values in descending order.\n{'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}": 0.4150943396226415,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.4,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.39215686274509803
        },
        "avg_similarity_score": 0.21470137738759737
    },
    {
        "instruction": "Write a Python script that prompts the user to enter their name and prints a personalized greeting.\nname = input(\"Enter your name: \")",
        "output": "name = input(\"Enter your name: \")\nprint(f\"Hello, {name}! Nice to meet you.\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.576923076923077,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.5714285714285713,
            "Create a Python script that prompts the user to enter their age and prints whether they are a minor, an adult, or a senior citizen.": 0.5531914893617023,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.5365853658536586,
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.5116279069767442,
            "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.": 0.5,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.5,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.5,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.4897959183673469,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.4799999999999999
        },
        "avg_similarity_score": 0.22566481810739983
    },
    {
        "instruction": "Can you demonstrate how to use the requests library in Python to make an HTTP GET request to a URL and retrieve the response?",
        "output": "import requests\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nprint('Response:', response.text)",
        "most_similar_instructions": {
            "Write a Python script that uses the requests library to send an HTTP GET request to a given URL and prints the response status code.": 0.5714285714285714,
            "Can you show an example of how to use the Python random module to generate a random number between 1 and 10, inclusive?": 0.425531914893617,
            "Can you show an example of how to use the Python re module to find all occurrences of a specific pattern in a string?": 0.375,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.3448275862068966,
            "Can you suggest a way to reverse the order of elements in a given list without using the reverse() method?": 0.31818181818181823,
            "Can you write a Python script to concatenate two strings and print the result?": 0.3157894736842105,
            "How can you convert a string to uppercase in Python?": 0.29411764705882354,
            "Can you design a Python program to generate a Fibonacci sequence up to a given limit?\nlimit = 10": 0.28571428571428575,
            "Can you generate Python code to convert a string to lowercase?": 0.28571428571428575,
            "How can you implement a Python function to reverse a string?": 0.28571428571428575
        },
        "avg_similarity_score": 0.15236792825196466
    },
    {
        "instruction": "Can you write a Python script that replaces each occurrence of a given word in a string with another word?\nString: \"The quick brown fox jumps over the lazy dog\"\nReplace: \"fox\"\nWith: \"cat\"",
        "output": "def replace_word(string, word_to_replace, replacement_word):\n    return string.replace(word_to_replace, replacement_word)\n\ninput_string = \"The quick brown fox jumps over the lazy dog\"\nword_to_replace = \"fox\"\nreplacement_word = \"cat\"\nupdated_string = replace_word(input_string, word_to_replace, replacement_word)\nprint(updated_string)",
        "most_similar_instructions": {
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.5614035087719297,
            "Write a Python program that finds and replaces all occurrences of a word in a given string with a new word.\nInput string: \"The brown cat jumped over the brown dog.\"\nWord to replace: \"brown\", New word: \"black\"": 0.5555555555555555,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5517241379310345,
            "Write a Python script that replaces all occurrences of a specified word in a text with a different word.\ntext = \"I love apples, apples are my favorite fruit.\"\nReplace \"apples\" with \"oranges\".": 0.45454545454545453,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4166666666666667,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.3846153846153846,
            "Write a Python script that takes user input of a string, reverses the string and prints the reversed string.": 0.3773584905660377,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.37500000000000006,
            "Design a Python function that replaces all occurrences of a given word with another word in a given sentence.\n'apple', 'fruit', 'I ate an apple.'": 0.3728813559322034,
            "Suggest a Python code snippet to split a given string into a list of words.\nString: \"The quick brown fox\"": 0.37037037037037035
        },
        "avg_similarity_score": 0.20608414319817583
    },
    {
        "instruction": "Create a Python function that swaps the cases (upper to lower and vice versa) of the characters in a given string.",
        "output": "def swap_case(s):\n    return s.swapcase()\n\nsentence = \"Hello World\"\nresult = swap_case(sentence)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python program that finds the length of the longest word in a given string.": 0.5405405405405405,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.5365853658536585,
            "Create a Python function to concatenate all the strings in a given list into a single string.": 0.5263157894736842,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5142857142857143,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5,
            "Create a Python program that generates all possible combinations of a given string.": 0.47058823529411764,
            "Can you implement a Python function that returns the reversed version of a given string?\n\"Python is great!\"": 0.4615384615384615,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.4615384615384615,
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.4583333333333333,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4571428571428571
        },
        "avg_similarity_score": 0.27409770196596966
    },
    {
        "instruction": "Create a Python function that checks if a given string is a valid password. The password must contain at least 8 characters, including at least one uppercase letter, one lowercase letter, one digit, and one special character (@, #, or $).\n\"Password123@\"",
        "output": "import re\n\ndef is_valid_password(password):\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$])[A-Za-z\\d@#$]{8,}$\"\n    return bool(re.match(pattern, password))\n\nresult = is_valid_password(\"Password123@\")\nprint(result)",
        "most_similar_instructions": {
            "Write a Python program that generates a random password of given length. The password should include at least one lowercase letter, one uppercase letter, one digit, and one special character.\n10": 0.5428571428571428,
            "Write a Python program that requests a password from the user and checks if it meets the following criteria: \n- At least 8 characters long\n- Contains both uppercase and lowercase letters\n- Contains at least one digit\n- Contains at least one special character (!@#$%^&*)": 0.42500000000000004,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.41379310344827586,
            "Write a Python function that checks if a given string is a pangramical sentence or not. A pangramical sentence is a sentence containing every letter of the alphabet at least once.": 0.4,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.3934426229508197,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.3880597014925373,
            "How would you create a Python function that checks if a given string is a valid phone number?\nFunction name: is_valid_phone_number\nInput: \"123-456-7890\"": 0.3880597014925373,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.3870967741935484,
            "Can you write a Python code that checks whether a given string is a valid email address or not? (Assuming valid email addresses contain a single '@' symbol and at least one '.' after the '@' symbol)": 0.3835616438356165,
            "Create a Python function that checks if a given string is a palindrome. Palindromes are words or phrases that read the same forwards and backwards, ignoring spaces, punctuation, and capitalization.\n\"Madam Arora teaches malayalam\"": 0.3835616438356165
        },
        "avg_similarity_score": 0.18074681895967423
    },
    {
        "instruction": "Write a Python program to generate a Fibonacci sequence of length `n`, where `n` is provided as input by the user.",
        "output": "def generate_fibonacci(n):\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n        next_num = fibonacci[-1] + fibonacci[-2]\n        fibonacci.append(next_num)\n    return fibonacci",
        "most_similar_instructions": {
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5789473684210527,
            "Please write a Python function to generate a random password of a given length.": 0.4571428571428571,
            "Create a Python script that generates and prints the first N Fibonacci numbers, where N is a positive integer input by the user.": 0.4545454545454545,
            "How would you write a Python program to generate Fibonacci series up to n terms using recursion?\nn = 10": 0.45,
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.43478260869565216,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.4230769230769231,
            "Write a Python program to generate a random number between a given range of numbers using the random module.\nRange: 1-100": 0.4186046511627907,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.41025641025641024,
            "Can you design a Python program to generate a Fibonacci sequence up to a given limit?\nlimit = 10": 0.41025641025641024,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.4
        },
        "avg_similarity_score": 0.22232787137575571
    },
    {
        "instruction": "Create a Python dictionary with keys as integers ranging from 1 to 10 (inclusive) and values as the squares of the corresponding keys.",
        "output": "my_dict = {i: i**2 for i in range(1, 11)}\nprint(my_dict)",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.6,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.5909090909090909,
            "Create a Python dictionary with keys as strings and values as integers. Write a script that prints the sum of all the values.": 0.5652173913043478,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.5454545454545454,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.5217391304347826,
            "Create a Python list with numbers from 1 to 10 and then extract and print the even numbers.": 0.4878048780487805,
            "Create a Python dictionary called \"students\" with keys as student names and values as their respective ages. Write a function to print the keys of the students who are above 18 years old.": 0.4642857142857143,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.42857142857142855,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.4186046511627907,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.4
        },
        "avg_similarity_score": 0.1987590050673207
    },
    {
        "instruction": "Create a Python program that simulates a coin flip. The program should randomly generate \"Heads\" or \"Tails\".",
        "output": "import random\n\ndef coin_flip():\n    result = random.choice([\"Heads\", \"Tails\"])\n    return result\n\nflip_result = coin_flip()\nprint(flip_result)",
        "most_similar_instructions": {
            "Create a Python program that generates a Fibonacci sequence. The program should take an integer as input and generate the Fibonacci sequence up to that number.": 0.46511627906976744,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.41379310344827586,
            "Create a Python program that performs binary search on a sorted list.": 0.41379310344827586,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4117647058823529,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.4117647058823529,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4000000000000001,
            "Create a Python program that generates a random number within a specified range.": 0.4000000000000001,
            "Create a Python program that generates all possible combinations of a given string.": 0.4000000000000001,
            "Develop a Python program that checks if a number is even or odd.": 0.4000000000000001,
            "Create a Python program that calculates the area of a circle. The program should ask the user for the radius of the circle and print the calculated area.": 0.39999999999999997
        },
        "avg_similarity_score": 0.21307739521325253
    },
    {
        "instruction": "Implement a Python class that represents a deck of playing cards. The class should have methods for shuffling and dealing cards.",
        "output": "import random\n\nclass Deck:\n    def __init__(self):\n        self.cards = []\n\n    def shuffle(self):\n        random.shuffle(self.cards)\n\n    def deal(self):\n        return self.cards.pop()\n\ndeck = Deck()\ndeck.shuffle()\ncard = deck.deal()\nprint(card)",
        "most_similar_instructions": {
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.5581395348837208,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.5531914893617021,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5333333333333333,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.5,
            "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.": 0.5,
            "Implement a Python class that represents a bank account. The account should have attributes like account number, account holder name, and balance. It should also have methods for depositing and withdrawing money.": 0.49056603773584906,
            "Implement a Python class that represents a stack. The class should have methods to push an element onto the stack, pop an element from the stack, and check if the stack is empty.": 0.48148148148148145,
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.48000000000000004,
            "Implement a Python class that represents a rectangle. The class should have methods to calculate the area and perimeter of the rectangle. It should also have attributes to store the length and width of the rectangle.": 0.45614035087719296,
            "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.": 0.4528301886792453
        },
        "avg_similarity_score": 0.2068579580163221
    },
    {
        "instruction": "How can you implement a Python function to count the frequency of each element in a list?\nnumbers = [4, 2, 5, 2, 8, 4, 8, 2, 4]",
        "output": "def count_element_frequency(lst):\n    frequency = {}\n    for num in lst:\n        if num not in frequency:\n            frequency[num] = 1\n        else:\n            frequency[num] += 1\n    return frequency\n\nnumbers = [4, 2, 5, 2, 8, 4, 8, 2, 4]\nfrequency_dict = count_element_frequency(numbers)\nprint(frequency_dict)",
        "most_similar_instructions": {
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.6,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.576923076923077,
            "Write a Python program to count the frequency of each element in a given list.": 0.5714285714285714,
            "How can you write Python code to count the number of occurrences of a specific element in a list?\nelement = 7\nnumbers = [5, 2, 7, 4, 7, 1, 7]": 0.5714285714285714,
            "Implement a Python function that finds the index of the first occurrence of an element in a list.\n[5, 2, 8, 3, 1, 2, 5, 8, 2]\n2": 0.5454545454545454,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5416666666666666,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.5306122448979591,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.5245901639344261,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.52,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.5185185185185185
        },
        "avg_similarity_score": 0.23570149797965612
    },
    {
        "instruction": "Can you write a Python function to concatenate two dictionaries into a new one?\ndict1 = {1: 'apple', 2: 'banana'}\ndict2 = {3: 'cherry', 4: 'mango'}",
        "output": "def concatenate_dictionaries(d1, d2):\n    return {**d1, **d2}\n\ndict1 = {1: 'apple', 2: 'banana'}\ndict2 = {3: 'cherry', 4: 'mango'}\nresult_dict = concatenate_dictionaries(dict1, dict2)\nprint(result_dict)",
        "most_similar_instructions": {
            "How can you write Python code to merge two dictionaries into one dictionary?\ndict1 = {'apple': 3, 'banana': 2}\ndict2 = {'cherry': 5, 'kiwi': 1}": 0.5957446808510638,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.5853658536585366,
            "Write a Python code snippet to merge two dictionaries.\ndict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}": 0.5581395348837209,
            "Write a Python function to merge two dictionaries into a new dictionary.": 0.5555555555555556,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.5499999999999999,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.5454545454545454,
            "How can you concatenate two dictionaries in Python?\ndict1 = {'apple': 1, 'banana': 2}\ndict2 = {'cherry': 3, 'dragonfruit': 4}": 0.5238095238095238,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.4615384615384615,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4615384615384615,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.4583333333333333
        },
        "avg_similarity_score": 0.2122241171072337
    },
    {
        "instruction": "Write a Python program that prompts the user for their name and age, then prints a message greeting them and stating how many years until they turn 100 years old.",
        "output": "name = input(\"Enter your name: \")\nage = int(input(\"Enter your age: \"))\n\nyears_until_100 = 100 - age\nmessage = \"Hello, \" + name + \"! You will turn 100 in \" + str(years_until_100) + \" years.\"\nprint(message)",
        "most_similar_instructions": {
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.6,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.5333333333333333,
            "Write a Python script that prompts the user to enter their name and prints a personalized greeting.\nname = input(\"Enter your name: \")": 0.5,
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.47058823529411764,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.423076923076923,
            "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.": 0.41935483870967744,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.4166666666666667,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.4081632653061224,
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.3773584905660377,
            "Write a Python program that reads a list of numbers from the user, separates the positive and negative numbers, and prints them separately.": 0.3773584905660377
        },
        "avg_similarity_score": 0.19145092351765877
    },
    {
        "instruction": "Write a Python program that prompts the user for a decimal number and converts it to binary.",
        "output": "num = int(input(\"Enter a decimal number: \"))\n\nbinary = bin(num)[2:]\nprint(\"Binary representation:\", binary)",
        "most_similar_instructions": {
            "Write a Python program that converts a number in decimal format to binary format.": 0.5806451612903226,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.5555555555555555,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5555555555555555,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.5454545454545455,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.5142857142857143,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5,
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.5,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.4888888888888888,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.48648648648648646,
            "Write a Python script that generates a random number between 0 and 1 and rounds it to 2 decimal places.": 0.48648648648648646
        },
        "avg_similarity_score": 0.25798359977681956
    },
    {
        "instruction": "Design a Python class named \"Student\" with attributes \"name\" and \"age\". Include methods in the class to set and get the attributes.",
        "output": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_age(self, age):\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n\nstudent = Student(\"Alice\", 20)\nstudent.set_name(\"Bob\")\nstudent.set_age(25)\nname = student.get_name()\nage = student.get_age()\nprint(name)\nprint(age)",
        "most_similar_instructions": {
            "Design a Python class to represent a student with attributes like name, age, and grade. Include methods to update the student's grade and display the student's information.": 0.5490196078431373,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.5454545454545455,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.5098039215686274,
            "Provide a complete code for a Python class named \"Student\" with attributes name and age. The class should have a method named \"display_info\" that prints the name and age of the student.": 0.5090909090909091,
            "Create a Python class called \"BankAccount\" with attributes account number and balance. Implement methods in the class for depositing money, withdrawing money, and checking the current balance.": 0.4897959183673469,
            "Create a Python class called \"Rectangle\" with two attributes, \"length\" and \"width\". Include methods to calculate the perimeter and area of the rectangle.": 0.4888888888888889,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.4782608695652174,
            "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10": 0.4782608695652174,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.47368421052631576,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.47058823529411764
        },
        "avg_similarity_score": 0.18352904163626396
    },
    {
        "instruction": "Create a Python class that represents a book with attributes like title, author, and year of publication. The class should have methods for getting and setting the attributes.",
        "output": "class Book:\n    def __init__(self, title, author, publication_year):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publication_year(self):\n        return self.publication_year\n\n    def set_title(self, new_title):\n        self.title = new_title\n\n    def set_author(self, new_author):\n        self.author = new_author\n\n    def set_publication_year(self, new_year):\n        self.publication_year = new_year",
        "most_similar_instructions": {
            "Implement a Python class that represents a deck of playing cards. The class should have methods for shuffling and dealing cards.": 0.5714285714285715,
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.5652173913043479,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.5555555555555555,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5263157894736843,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.509090909090909,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5,
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.49122807017543857,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.4799999999999999,
            "Write a Python class representing a bank account. The class should have methods for depositing, withdrawing, and checking the balance of the account.": 0.47058823529411764,
            "Implement a Python class that represents a bank account. The account should have attributes like account number, account holder name, and balance. It should also have methods for depositing and withdrawing money.": 0.4666666666666667
        },
        "avg_similarity_score": 0.20705815088402502
    },
    {
        "instruction": "Create a Python generator function that generates Fibonacci numbers up to a specified limit.\nInput: 10",
        "output": "def fibonacci_generator(limit):\n    a, b = 0, 1\n    while a <= limit:\n        yield a\n        a, b = b, a + b\n\nfibonacci_limit = 10\nfibonacci_numbers = list(fibonacci_generator(fibonacci_limit))\nprint(fibonacci_numbers)",
        "most_similar_instructions": {
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5806451612903225,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5714285714285715,
            "Implement a Python function that finds and returns all prime numbers up to a given limit.\n50": 0.5454545454545455,
            "Design a Python function that generates n Fibonacci numbers.\n8": 0.5384615384615384,
            "Create a Python function that prints the Fibonacci sequence up to the n-th term.\n8": 0.5,
            "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10": 0.5,
            "Implement a Python program that generates a Fibonacci sequence up to a specified number of terms and prints the sequence.\nNumber of terms: 10": 0.5,
            "Create a Python program that generates a random number within a specified range.": 0.4827586206896552,
            "Can you design a Python program to generate a Fibonacci sequence up to a given limit?\nlimit = 10": 0.47058823529411764,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.47058823529411764
        },
        "avg_similarity_score": 0.23598909058088133
    },
    {
        "instruction": "Design a Python class that represents an email with attributes like sender, recipient, subject, and body. The class should have methods for sending and receiving emails.",
        "output": "class Email:\n    def __init__(self, sender, recipient, subject, body):\n        self.sender = sender\n        self.recipient = recipient\n        self.subject = subject\n        self.body = body\n\n    def send_email(self):\n        # Code to send email\n\n    def receive_email(self):\n        # Code to receive email\n\nemail = Email(\"sender@example.com\", \"recipient@example.com\", \"Hello\", \"This is the body of the email.\")\nemail.send_email()\nemail.receive_email()",
        "most_similar_instructions": {
            "Create a Python class that represents a book with attributes like title, author, and year of publication. The class should have methods for getting and setting the attributes.": 0.5925925925925927,
            "Implement a Python class that represents a deck of playing cards. The class should have methods for shuffling and dealing cards.": 0.5106382978723405,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.4999999999999999,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.46153846153846156,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.4528301886792453,
            "Implement a Python class that represents a bank account. The account should have attributes like account number, account holder name, and balance. It should also have methods for depositing and withdrawing money.": 0.4482758620689655,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.43999999999999995,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.43902439024390244,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.4285714285714286,
            "Design a Python class named \"Student\" with attributes \"name\" and \"age\". Include methods in the class to set and get the attributes.": 0.41666666666666663
        },
        "avg_similarity_score": 0.16914644820144625
    },
    {
        "instruction": "Create a Python dictionary called \"pets\" with the following key-value pairs: \"dog\"-\"bark\", \"cat\"-\"meow\", \"bird\"-\"chirp\". Print the sound made by the bird.",
        "output": "pets = {\n    \"dog\": \"bark\",\n    \"cat\": \"meow\",\n    \"bird\": \"chirp\"\n}\nprint(f\"The bird makes a sound: {pets['bird']}\")",
        "most_similar_instructions": {
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.4761904761904762,
            "Create a Python list called \"fruits\" with the following items: \"apple\", \"banana\", \"orange\". Print the second item in the list.": 0.4444444444444445,
            "Create a Python set called \"colors\" with the following items: \"red\", \"green\", \"blue\". Print the set.": 0.43902439024390244,
            "Create a Python dictionary with 3 key-value pairs representing the name, age, and profession of a person.": 0.41860465116279066,
            "Create a Python dictionary called \"student\" with keys \"name\", \"age\", and \"grade\". Assign appropriate values to each key and print the dictionary.": 0.3829787234042554,
            "Create a Python dictionary that stores the following information about a person: name, age, city, and profession. Print out the dictionary.": 0.34782608695652173,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.34782608695652173,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.3333333333333333,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.3111111111111111,
            "Create a Python dictionary called \"students\" with keys as student names and values as their respective ages. Write a function to print the keys of the students who are above 18 years old.": 0.3103448275862069
        },
        "avg_similarity_score": 0.14527914346934376
    },
    {
        "instruction": "What is the syntax to define a Python generator function? Write a simple generator function that yields values from 1 to n.",
        "output": "def my_generator(n):\n    for i in range(1, n+1):\n        yield i\n\ngenerator = my_generator(5)\nfor num in generator:\n    print(num)",
        "most_similar_instructions": {
            "Create a Python function that removes duplicate values from a list.\n[1, 2, 2, 3, 4, 4, 4, 5]": 0.3414634146341463,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.3243243243243243,
            "Create a Python generator function that generates Fibonacci numbers up to a specified limit.\nInput: 10": 0.3157894736842105,
            "Create a Python function that prints the Fibonacci sequence up to the n-th term.\n8": 0.3157894736842105,
            "Design a Python function that generates n Fibonacci numbers.\n8": 0.3125,
            "How can you create a Python list that contains the squares of numbers from 1 to 10?": 0.30769230769230765,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.30769230769230765,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.3,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.3,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.29787234042553196
        },
        "avg_similarity_score": 0.17312639882303632
    },
    {
        "instruction": "How would you implement a Python function that checks if two lists are equal (have the same elements in the same order)?",
        "output": "def are_lists_equal(list1, list2):\n    return list1 == list2\n\nnumbers1 = [1, 2, 3]\nnumbers2 = [1, 2, 3]\n\nresult = are_lists_equal(numbers1, numbers2)\nprint(f\"The lists are equal: {result}\")",
        "most_similar_instructions": {
            "Write a Python program that checks if two lists are equal or not.": 0.5142857142857142,
            "Can you write a Python function that checks if two lists are equal?\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]": 0.5116279069767442,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.4888888888888889,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.45454545454545453,
            "How can you write a Python function that checks if all elements in a given list are equal?\nlst = [1, 1, 1, 1, 1]": 0.43478260869565216,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.43243243243243246,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4285714285714286,
            "Create a Python function that checks if two given strings are anagrams. Anagrams are the strings that have the same characters but can be arranged in different orders.\nString 1: \"listen\", String 2: \"silent\"": 0.42857142857142855,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4186046511627907,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.41666666666666663
        },
        "avg_similarity_score": 0.21284872943058472
    },
    {
        "instruction": "Create a Python function that takes two strings as input and returns a new string that combines the characters of the two input strings in alternating order.\nInput strings: 'abc', '123'",
        "output": "def alternate_strings(str1, str2):\n    combined_string = ''\n    for char1, char2 in zip(str1, str2):\n        combined_string += char1 + char2\n    return combined_string\n\nstring1 = 'abc'\nstring2 = '123'\nresult = alternate_strings(string1, string2)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5490196078431372,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.5306122448979592,
            "Create a Python function that takes a string as input and returns a new string that is the reverse of the original string, but with the case of each letter reversed. For example, 'Hello' would become 'oLLEh'.": 0.5,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5,
            "Implement a Python function named \"multiply_matrices\" that takes two matrices as input (represented as lists of lists) and returns the result of multiplying the two matrices.": 0.48275862068965514,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.48275862068965514,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.4814814814814815,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4814814814814815,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.47457627118644063,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.4727272727272728
        },
        "avg_similarity_score": 0.22775823411395368
    },
    {
        "instruction": "Write Python code to calculate the power of a number using a recursive function.\nNumber: 2, Power: 3",
        "output": "def calculate_power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * calculate_power(base, exponent - 1)\n\nnumber = 2\npower = 3\nresult = calculate_power(number, power)\nprint(result)",
        "most_similar_instructions": {
            "Generate a Python program to calculate the power of a number using recursion.": 0.5806451612903226,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.5625000000000001,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5405405405405405,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.5,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5,
            "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.": 0.4888888888888889,
            "Provide code to calculate the factorial of a given number in Python.": 0.4666666666666666,
            "What is the Python code to calculate the length of a string?": 0.4666666666666666,
            "Write Python code to find the number of vowels in a given string.": 0.45161290322580644,
            "Complete the following Python code to calculate the sum of all values in a dictionary.\ndata = {'a': 5, 'b': 3, 'c': 10}": 0.45
        },
        "avg_similarity_score": 0.2146309569895846
    },
    {
        "instruction": "Create a Python program that generates a random password of length n. The program should take an integer n as input and return a random string of alphanumeric characters of length n.",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\nn = 8\npassword = generate_password(n)\nprint(password)",
        "most_similar_instructions": {
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.5762711864406779,
            "Create a Python program that generates a Fibonacci sequence. The program should take an integer as input and generate the Fibonacci sequence up to that number.": 0.5517241379310345,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.5306122448979592,
            "Create a Python program that generates a random password containing a combination of letters (upper and lower case) and special characters. The password should have a length of 10 characters.": 0.4838709677419355,
            "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.": 0.4482758620689655,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.4444444444444445,
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.4444444444444444,
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.44000000000000006,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.42857142857142855,
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.42105263157894735
        },
        "avg_similarity_score": 0.2121759880831958
    },
    {
        "instruction": "Write a Python program that generates all prime numbers less than a given number.\nlimit = 20",
        "output": "def generate_primes(limit):\n    primes = []\n\n    for num in range(2, limit):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    \n    return primes\n\nlimit = 20\nprime_numbers = generate_primes(limit)\nprint(prime_numbers)",
        "most_similar_instructions": {
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.5714285714285714,
            "Generate a Python function to find the number of prime numbers less than a given number.": 0.5625,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.5625,
            "Create a Python program that generates all possible combinations of a given string.": 0.5517241379310345,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.5499999999999999,
            "Implement a Python function that finds and returns all prime numbers up to a given limit.\n50": 0.5454545454545455,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.5405405405405405,
            "Write a Python function to find all prime numbers up to the given number n.": 0.5161290322580646,
            "Write a Python function that returns a list of all divisors of a given number.": 0.5161290322580646,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5161290322580646
        },
        "avg_similarity_score": 0.24152130895110754
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport numpy as np\n\ndata = np.linspace(0, 1, num=100)\n\n# Write code to calculate the sum of all elements in the 'data' array.",
        "output": "import numpy as np\n\ndata = np.linspace(0, 1, num=100)\n\n# Write code to calculate the sum of all elements in the 'data' array.\nsum_of_elements = np.sum(data)\nprint(sum_of_elements)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.5185185185185185,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.45614035087719296,
            "Complete the following Python code to calculate the sum of all values in a dictionary.\ndata = {'a': 5, 'b': 3, 'c': 10}": 0.4444444444444444,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.4313725490196078,
            "Suggest a completion for the following python code.\nimport requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()": 0.4150943396226415,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.40816326530612246,
            "Suggest a completion for the following python code.": 0.4,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.4,
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.39999999999999997,
            "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''": 0.39999999999999997
        },
        "avg_similarity_score": 0.16956464702391535
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport re\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\n\n# Write code to find all the words in the text that start with a vowel.",
        "output": "import re\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\n\n# Write code to find all the words in the text that start with a vowel.\nmatches = re.findall(r'\\b[AEIOUaeiou]\\w+', text)\nprint(matches)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.\nimport numpy as np\n\ndata = np.linspace(0, 1, num=100)\n\n# Write code to calculate the sum of all elements in the 'data' array.": 0.4477611940298507,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4137931034482759,
            "Suggest a completion for the following Python code.\ntext = 'Lorem ipsum dolor sit amet'\n\ndef count_words(text):\n    '''This function counts the number of words in a given text.'''": 0.40625,
            "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''": 0.38095238095238093,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.3793103448275862,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.3728813559322034,
            "Suggest a completion for the following python code.": 0.3720930232558139,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.3666666666666667,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.36363636363636365,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.3529411764705882
        },
        "avg_similarity_score": 0.17055475121400274
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport random\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Write code to randomly select an element from the 'numbers' list.",
        "output": "import random\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Write code to randomly select an element from the 'numbers' list.\nrandom_element = random.choice(numbers)\nprint(random_element)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.5714285714285714,
            "Suggest a completion for the following Python code.\nnums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''": 0.48148148148148145,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.47826086956521735,
            "Suggest a completion for the following python code.\nimport numpy as np\n\ndata = np.linspace(0, 1, num=100)\n\n# Write code to calculate the sum of all elements in the 'data' array.": 0.47457627118644063,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.46875,
            "Suggest a completion for the following python code.": 0.45714285714285713,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.44000000000000006,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.425531914893617,
            "Suggest a completion for the following python code.\nimport re\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\n\n# Write code to find all the words in the text that start with a vowel.": 0.41935483870967744,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.409090909090909
        },
        "avg_similarity_score": 0.17421744157942629
    },
    {
        "instruction": "Suggest a completion for the following python code.\nimport requests\n\nurl = 'https://api.example.com/data'\n\n# Write code to make a GET request to the given URL and store the response in a variable.",
        "output": "import requests\n\nurl = 'https://api.example.com/data'\n\n# Write code to make a GET request to the given URL and store the response in a variable.\nresponse = requests.get(url)\nprint(response.text)",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.\nimport requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()": 0.5818181818181817,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.5588235294117647,
            "Suggest a completion for the following python code.\nimport numpy as np\n\ndata = np.linspace(0, 1, num=100)\n\n# Write code to calculate the sum of all elements in the 'data' array.": 0.45454545454545453,
            "Suggest a completion for the following python code.\nimport re\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\n\n# Write code to find all the words in the text that start with a vowel.": 0.43478260869565216,
            "Suggest a completion for the following python code.\nimport random\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Write code to randomly select an element from the 'numbers' list.": 0.4262295081967213,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.4074074074074075,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.4067796610169491,
            "Write a Python script that uses the requests library to send an HTTP GET request to a given URL and prints the response status code.": 0.4067796610169491,
            "Suggest a completion for the following python code.": 0.38095238095238093,
            "Can you demonstrate how to use the requests library in Python to make an HTTP GET request to a URL and retrieve the response?": 0.3793103448275862
        },
        "avg_similarity_score": 0.18949641809809328
    },
    {
        "instruction": "Suggest an implementation for finding the maximum value of a list of numbers in Python using the built-in max() function.\nnumbers = [6, 9, 2, 7, 1, 5]",
        "output": "numbers = [6, 9, 2, 7, 1, 5]\nprint(max(numbers))",
        "most_similar_instructions": {
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.4799999999999999,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.3829787234042553,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.3829787234042553,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.3461538461538462,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.33962264150943394,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.3333333333333333,
            "Suggest an implementation for the following Python function that reverses a given string.\ndef reverse_string(text):\n    return text[::-1]": 0.3333333333333333,
            "Create a Python function to find the maximum value in a list of numbers.": 0.3333333333333333,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.3333333333333333,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.3333333333333333
        },
        "avg_similarity_score": 0.16535715710107735
    },
    {
        "instruction": "Suggest a Python code snippet that reads a user input integer and checks if it is prime or not. Print the result.",
        "output": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\nuser_input = int(input(\"Enter a number: \"))\nif is_prime(user_input):\n    print(\"Prime number\")\nelse:\n    print(\"Not a prime number\")",
        "most_similar_instructions": {
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5714285714285713,
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.5106382978723404,
            "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.": 0.5,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.4878048780487805,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.46153846153846156,
            "Provide a Python code snippet that generates a random integer between 1 and 100.": 0.4444444444444444,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.4444444444444444,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.44,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.4285714285714286,
            "Create a Python function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.": 0.41379310344827586
        },
        "avg_similarity_score": 0.21853536096686152
    },
    {
        "instruction": "Create a Python function that checks if a list is empty. Print the result.\nlist = []",
        "output": "def is_empty_list(lst):\n    return len(lst) == 0\n\nlst = []\nif is_empty_list(lst):\n    print(\"List is empty\")\nelse:\n    print(\"List is not empty\")",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5517241379310344,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.5454545454545454,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.5294117647058824,
            "Write a Python function that checks if all the elements in a given list are the same.\nList: [3, 3, 3, 3, 3]": 0.5263157894736841,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5142857142857143,
            "Develop a Python program that checks if a number is even or odd.": 0.5,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5,
            "Suggest a Python code snippet that reads a user input integer and checks if it is prime or not. Print the result.": 0.4864864864864865,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4848484848484848,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.47368421052631576
        },
        "avg_similarity_score": 0.2627993532351067
    },
    {
        "instruction": "Create a Python program that prints the current date and time.",
        "output": "import datetime\n\ncurrent_datetime = datetime.datetime.now()\nprint(current_datetime)",
        "most_similar_instructions": {
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5384615384615385,
            "What is the Python code to get the current date and time?": 0.5217391304347826,
            "Write a Python script that outputs the current date and time in the format: 'YYYY-MM-DD HH:MM:SS'.": 0.5161290322580645,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4999999999999999,
            "Create a Python program to find the first n Fibonacci numbers.": 0.45454545454545453,
            "Create a Python program that reads two integers from the user and swaps their values without using a temporary variable.": 0.45161290322580644,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.45161290322580644,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.45161290322580644,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.4444444444444444,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.4444444444444444
        },
        "avg_similarity_score": 0.23482469522684177
    },
    {
        "instruction": "Write Python code to count the frequency of each word in a given text.\nInput text: \"This is a sample text. It contains multiple words and words may repeat.\"",
        "output": "def count_word_frequency(text):\n    words = text.split()\n    word_frequency = {}\n    for word in words:\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    return word_frequency\n\ntext = \"This is a sample text. It contains multiple words and words may repeat.\"\nfrequency = count_word_frequency(text)\nprint(frequency)",
        "most_similar_instructions": {
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.5423728813559322,
            "Create a Python script that counts and prints the frequency of each word in a given text.\n\"This is a sample text. This text is used for counting word frequency.\"": 0.5084745762711865,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"": 0.45833333333333337,
            "Write Python code to capitalize the first letter of each word in a string.\nInput: \"welcome to the world of programming\"": 0.44,
            "How would you implement a Python program that counts the frequency of each word in a given text?\ntext = \"Python is a popular programming language. Python is used in web development, data analysis, and machine learning.\"": 0.43076923076923074,
            "Write Python code to find the number of vowels in a given string.": 0.4285714285714286,
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.39285714285714285,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.39215686274509803,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.3829787234042554
        },
        "avg_similarity_score": 0.18821629866949854
    },
    {
        "instruction": "Write Python code to replace all occurrences of a given word with a new word in a text.\nText: \"This is a sample text. It contains multiple words.\"\nWord to replace: \"sample\"\nNew word: \"example\"",
        "output": "def replace_word(text, word_to_replace, new_word):\n    replaced_text = text.replace(word_to_replace, new_word)\n    return replaced_text\n\ntext = \"This is a sample text. It contains multiple words.\"\nword_to_replace = \"sample\"\nnew_word = \"example\"\nreplaced_text = replace_word(text, word_to_replace, new_word)\nprint(replaced_text)",
        "most_similar_instructions": {
            "Write Python code to count the frequency of each word in a given text.\nInput text: \"This is a sample text. It contains multiple words and words may repeat.\"": 0.5937499999999999,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.5660377358490566,
            "Write a Python program that finds and replaces all occurrences of a word in a given string with a new word.\nInput string: \"The brown cat jumped over the brown dog.\"\nWord to replace: \"brown\", New word: \"black\"": 0.4383561643835617,
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.4307692307692308,
            "Write a Python script that replaces all occurrences of a specified word in a text with a different word.\ntext = \"I love apples, apples are my favorite fruit.\"\nReplace \"apples\" with \"oranges\".": 0.3880597014925374,
            "Write a Python function that takes a string and replaces all occurrences of a given character with a new character.\nString: \"banana\", Old character: \"a\", New character: \"o\"": 0.38095238095238093,
            "Create a Python script that counts and prints the frequency of each word in a given text.\n\"This is a sample text. This text is used for counting word frequency.\"": 0.36923076923076925,
            "Design a Python function that replaces all occurrences of a given word with another word in a given sentence.\n'apple', 'fruit', 'I ate an apple.'": 0.3666666666666667,
            "Write Python code to extract all the unique elements from a given list and store them in a new list.": 0.36363636363636365,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.3548387096774193
        },
        "avg_similarity_score": 0.15638779722384727
    },
    {
        "instruction": "Implement a Python class called \"Person\" with attributes name and age. Provide a method that prints the name and age of a person object in the format \"Name: [name], Age: [age]\".",
        "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def print_info(self):\n        print(f\"Name: {self.name}, Age: {self.age}\")\n\nperson1 = Person(\"Alice\", 25)\nperson1.print_info()",
        "most_similar_instructions": {
            "Create a Python class called \"Student\" with attributes name, age, and grade. Implement a method \"get_info()\" that returns a string with the student's information in the format \"Name: {name}, Age: {age}, Grade: {grade}\".": 0.5757575757575757,
            "Create a Python class called \"Person\" with attributes \"name\" and \"age\" and a method \"introduce\" that prints out \"Hello, my name is [name] and I am [age] years old.\"": 0.5666666666666665,
            "Provide a complete code for a Python class named \"Student\" with attributes name and age. The class should have a method named \"display_info\" that prints the name and age of the student.": 0.5625,
            "Create a Python class named 'Person' with attributes 'name' and 'age'. Write a constructor to initialize those attributes and a method to display the person's name and age.": 0.5000000000000001,
            "Create a Python class called \"Person\" that has attributes for name, age, and profession. Implement a method in the class that prints out a greeting message with the person's name.": 0.4838709677419355,
            "Create a Python class called \"Book\" that has attributes \"title\" and \"author\". It should have a method named \"display_info\" that prints the title and author of the book.": 0.4666666666666667,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.46428571428571425,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.4615384615384615,
            "Create a Python class called \"Car\" that has attributes for brand, model, and year. Add a method that prints the details of the car as a formatted string.": 0.44067796610169496,
            "Create a Python class called \"Dog\" with an instance variable called \"name\". Add a method called \"bark\" that prints \"Woof! My name is {name}\".": 0.43636363636363634
        },
        "avg_similarity_score": 0.19988492467046604
    },
    {
        "instruction": "Implement a Python function that takes a number as input and checks if it is a prime number. Return True if it is prime, and False otherwise.\n17",
        "output": "def is_prime(number):\n    if number <= 1:\n        return False\n\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n\n    return True\n\nnumber = 17\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is not a prime number.\")",
        "most_similar_instructions": {
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.576923076923077,
            "Implement a Python function that checks if a given number is prime (only divisible by 1 and itself) and returns True if it is, and False otherwise.\nExample input: 7": 0.5517241379310344,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5416666666666667,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.5357142857142857,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5333333333333333,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5238095238095237,
            "Write a Python function that takes a string as input and checks if it is a valid email address. Valid email addresses should contain an '@' symbol and a domain name.": 0.5172413793103449,
            "Write a Python script that takes user input for a number and checks if it is a perfect square.": 0.5106382978723404,
            "Implement a Python script that takes a string as input, then checks if the string is a valid email address.": 0.5,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.5
        },
        "avg_similarity_score": 0.21029153303824286
    },
    {
        "instruction": "Can you write a Python code that takes a list as input and returns another list without any duplicate elements?",
        "output": "def remove_duplicates(lst):\n    return list(set(lst))",
        "most_similar_instructions": {
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5454545454545454,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5294117647058824,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5128205128205129,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.5,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.48888888888888893,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.4878048780487805,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.47826086956521735,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4736842105263158,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.46511627906976744
        },
        "avg_similarity_score": 0.25211857189325154
    },
    {
        "instruction": "Write Python code for bubble sort algorithm to sort a list of integers.",
        "output": "def bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if numbers[j] > numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    return numbers",
        "most_similar_instructions": {
            "Write a Python function to reverse a given list of integers.": 0.5833333333333334,
            "Write Python code to sort a list of strings alphabetically.\nlst = [\"banana\", \"apple\", \"cherry\", \"blueberry\"]": 0.5714285714285715,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5185185185185186,
            "Write Python code to generate all possible permutations of a given list of elements.": 0.5185185185185186,
            "Write Python code to find the length of the longest consecutive sequence of a given list of integers.": 0.5161290322580646,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.4827586206896552,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.4666666666666667,
            "Write Python code to check if a given list is empty or not.": 0.46153846153846156,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4444444444444445,
            "Write Python code to reverse a list in-place (without creating a new list).": 0.4444444444444445
        },
        "avg_similarity_score": 0.20160129000890073
    },
    {
        "instruction": "Write Python code to remove special characters from a string.",
        "output": "import re\n\ndef remove_special_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string)",
        "most_similar_instructions": {
            "Write a Python code snippet to remove all whitespace characters (space, tab, newline) from a given string.\nstring = \"Hello\\tWorld\\n\"": 0.5806451612903225,
            "Write Python code to reverse a given string.\nInput: \"Python\"\nOutput: \"nohtyP\"": 0.5454545454545454,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.5384615384615384,
            "Write Python code to find the number of vowels in a given string.": 0.5217391304347826,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.48,
            "Can you generate Python code to convert a string to lowercase?": 0.47619047619047616,
            "Generate Python code to parse a JSON string into a dictionary.": 0.47619047619047616,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.4615384615384615,
            "How can you write Python code to extract the extension from a filename?\nfilename = \"example.py\"": 0.4615384615384615,
            "What is the Python code to calculate the length of a string?": 0.45454545454545453
        },
        "avg_similarity_score": 0.1928144250764102
    },
    {
        "instruction": "Can you create a Python class that represents a rectangle and write a method that calculates its area?\nwidth = 5\nheight = 3",
        "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def calculate_area(self):\n        return self.width * self.height\n\nwidth = 5\nheight = 3\nrectangle = Rectangle(width, height)\narea = rectangle.calculate_area()\nprint(area)",
        "most_similar_instructions": {
            "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.": 0.5531914893617023,
            "Create a Python class called \"Rectangle\" with attributes \"width\" and \"height\". Add a method called \"area\" that calculates and returns the area of the rectangle.": 0.46808510638297873,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.45454545454545453,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.43902439024390244,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.43478260869565216,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.4186046511627907,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.40816326530612246,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.3913043478260869,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.3902439024390244,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.3846153846153846
        },
        "avg_similarity_score": 0.21980696245491713
    },
    {
        "instruction": "Please provide a Python function that finds the longest word in a given list of words.\nwords = ['apple', 'banana', 'cherry', 'date']",
        "output": "def find_longest_word(words):\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nwords = ['apple', 'banana', 'cherry', 'date']\nlongest_word = find_longest_word(words)\nprint(longest_word)",
        "most_similar_instructions": {
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.5853658536585366,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5405405405405405,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.5365853658536585,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.4878048780487805,
            "Write a Python function that finds the common elements from two given lists.\n['apple', 'banana', 'cherry', 'dragonfruit'], ['cherry', 'dragonfruit', 'guava', 'kiwi']": 0.47619047619047616,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.47619047619047616,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.4736842105263158,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.4736842105263158
        },
        "avg_similarity_score": 0.24184009414996938
    },
    {
        "instruction": "Implement the merge sort algorithm in Python.",
        "output": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n\n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\narray = [5, 2, 8, 3, 1, 9, 4, 7]\nsorted_array = merge_sort(array)\nprint(\"Sorted array:\", sorted_array)",
        "most_similar_instructions": {
            "Explain the difference between '==' and 'is' operators in Python.": 0.375,
            "What would be the correct code to concatenate two lists in Python?": 0.3157894736842105,
            "Provide code to calculate the factorial of a given number in Python.": 0.3157894736842105,
            "How can you sort a list of strings in alphabetical order using Python?": 0.3,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.2857142857142857,
            "How would you sort a list of dictionaries based on a specific key in Python?": 0.27272727272727276,
            "Suggest a completion for the following python code.": 0.26666666666666666,
            "How can you concatenate two lists in Python?": 0.26666666666666666,
            "Write a program to find the largest prime factor of a given number in Python.\n24": 0.26086956521739124,
            "How would you merge two Python dictionaries into one?": 0.25
        },
        "avg_similarity_score": 0.10202463850370548
    },
    {
        "instruction": "Implement a Python class to represent a circle with attributes for its radius, diameter, area, and circumference.",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        self.diameter = 2 * radius\n        self.area = math.pi * radius ** 2\n        self.circumference = 2 * math.pi * radius\n\nradius = float(input(\"Enter the radius of the circle: \"))\ncircle = Circle(radius)\nprint(\"Radius:\", circle.radius)\nprint(\"Diameter:\", circle.diameter)\nprint(\"Area:\", circle.area)\nprint(\"Circumference:\", circle.circumference)",
        "most_similar_instructions": {
            "Design a Python class to represent a circle with attributes like radius. Include methods to calculate and return the circumference and area of the circle.": 0.5714285714285713,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.5454545454545455,
            "How would you implement a Python class that represents a circle object with attributes radius and center coordinates (x, y)?": 0.5405405405405405,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.5161290322580646,
            "Create a Python class named \"Circle\" with attribute radius. Implement methods to compute the area and circumference of the circle.": 0.48648648648648646,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.4444444444444444,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4390243902439025,
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.42857142857142855,
            "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.": 0.42857142857142855,
            "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?": 0.4117647058823529
        },
        "avg_similarity_score": 0.19367644842853143
    },
    {
        "instruction": "Write a Python class that represents a binary search tree and implements the search and insertion operations.",
        "output": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def search(self, value):\n        return self._search_recursive(self.root, value)\n\n    def _search_recursive(self, node, value):\n        if node is None or node.value == value:\n            return node\n        if value < node.value:\n            return self._search_recursive(node.left, value)\n        else:\n            return self._search_recursive(node.right, value)\n\n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n        else:\n            self._insert_recursive(self.root, value)\n\n    def _insert_recursive(self, node, value):\n        if value < node.value:\n            if node.left is None:\n                node.left = Node(value)\n            else:\n                self._insert_recursive(node.left, value)\n        else:\n            if node.right is None:\n                node.right = Node(value)\n            else:\n                self._insert_recursive(node.right, value)\n\n# Example usage:\nbst = BinarySearchTree()\nbst.insert(5)\nbst.insert(3)\nbst.insert(7)\nprint(bst.search(3)) # Output: Node object\nprint(bst.search(10)) # Output: None",
        "most_similar_instructions": {
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4666666666666667,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.4390243902439025,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4390243902439025,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.43749999999999994,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.4324324324324324,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.42424242424242425,
            "Implement a Python class that represents a deck of playing cards. The class should have methods for shuffling and dealing cards.": 0.42105263157894735,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.41025641025641024,
            "Write a Python script that creates a new directory with the given name.": 0.4000000000000001,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.39999999999999997
        },
        "avg_similarity_score": 0.2364855360535506
    },
    {
        "instruction": "Create a Python program that finds the longest common prefix among a list of strings.",
        "output": "def longest_common_prefix(strings):\n    if not strings:\n        return \"\"\n    prefix = strings[0]\n    for string in strings[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\nstrings = [\"apple\", \"application\", \"append\", \"appreciate\"]\ncommon_prefix = longest_common_prefix(strings)\nprint(\"Longest common prefix:\", common_prefix)",
        "most_similar_instructions": {
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.6,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.6,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.5925925925925926,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.5625,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5405405405405405,
            "Create a Python program that finds the maximum common divisor (GCD) of two given numbers using the Euclidean algorithm.": 0.5294117647058824,
            "Create a Python program that performs binary search on a sorted list.": 0.5185185185185186,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5161290322580646,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5142857142857143,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.5
        },
        "avg_similarity_score": 0.2586719740412211
    },
    {
        "instruction": "Design a Python class that represents a student. The class should have attributes to store the student's name, age, and grades.",
        "output": "class Student:\n    def __init__(self, name, age, grades):\n        self.name = name\n        self.age = age\n        self.grades = grades\n\nstudent1 = Student('John Doe', 18, [80, 90, 75])\nprint(student1.name)\nprint(student1.age)\nprint(student1.grades)",
        "most_similar_instructions": {
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.5909090909090909,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.5306122448979591,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5217391304347826,
            "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.": 0.5185185185185185,
            "Implement a Python class that represents a rectangle. The class should have methods to calculate the area and perimeter of the rectangle. It should also have attributes to store the length and width of the rectangle.": 0.5172413793103449,
            "Implement a Python class that represents a deck of playing cards. The class should have methods for shuffling and dealing cards.": 0.5116279069767442,
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.5098039215686274,
            "Design a Python class that represents a bank account. The class should have methods to initialize an account with an initial balance, deposit funds, withdraw funds, and get the current account balance.": 0.4814814814814815,
            "Create a Python class called \"Student\" with attributes name and grade and methods to display the student's name and grade.\n\"John Doe\", 10": 0.4782608695652174,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.4745762711864407
        },
        "avg_similarity_score": 0.21343826209230937
    },
    {
        "instruction": "Create a Python program that takes a string as input and converts it to title case.\nInput: \"hello world\"",
        "output": "def convert_to_title_case(string):\n    return string.title()\n\ninput_string = \"hello world\"\ntitle_case_string = convert_to_title_case(input_string)\nprint(title_case_string)",
        "most_similar_instructions": {
            "Create a Python function that takes a floating-point number as input and rounds it to the nearest integer.": 0.5789473684210527,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5641025641025641,
            "Create a Python program that converts a string into title case (the first letter of each word capitalized).\nInput: \"hello world, how are you?\"": 0.5581395348837209,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5294117647058824,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.5263157894736842,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5263157894736842,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5128205128205129,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5128205128205129,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.5116279069767442,
            "Write a Python program that takes a string as input and reverses the order of the words in the string.\nInput: \"Hello World! Python is amazing\"\nOutput: \"amazing is Python World! Hello\"": 0.5098039215686275
        },
        "avg_similarity_score": 0.2372466693835057
    },
    {
        "instruction": "Create a Python program that finds the largest prime number within a given range.\nstart: 1\nend: 10",
        "output": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_largest_prime(start, end):\n    largest_prime = 0\n    for num in range(start, end+1):\n        if is_prime(num):\n            largest_prime = num\n    return largest_prime\n\nresult = find_largest_prime(1, 10)\nprint('Largest Prime:', result)",
        "most_similar_instructions": {
            "Create a Python program that generates a random number within a specified range.": 0.5806451612903226,
            "Create a Python program that generates a random number between a given start and end value.\nInput: start=10, end=50": 0.5641025641025642,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.5555555555555556,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5454545454545454,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5405405405405405,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5405405405405405,
            "Create a Python program that finds all prime numbers between 1 and a given positive integer.": 0.5294117647058824,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5263157894736842,
            "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10": 0.5238095238095238,
            "Create a Python program that counts the number of even and odd numbers in a given list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]": 0.4888888888888889
        },
        "avg_similarity_score": 0.24217413546841637
    },
    {
        "instruction": "Write a function in Python that takes a list of strings and returns the longest string from the list.\nInput: ['cat', 'dog', 'elephant', 'lion']",
        "output": "def find_longest_string(strings):\n    longest_string = max(strings, key=len)\n    return longest_string\n\nstring_list = ['cat', 'dog', 'elephant', 'lion']\nlongest_string = find_longest_string(string_list)\nprint(longest_string)",
        "most_similar_instructions": {
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5862068965517241,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5714285714285715,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5333333333333333,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5116279069767442,
            "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.": 0.5098039215686274,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4897959183673469,
            "Write a Python function that takes in a list of strings and converts all strings to lowercase.": 0.48780487804878053,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.4814814814814815,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.48000000000000004,
            "Create a Python program that takes a list of strings as input and returns the number of occurrences of a given word in the list.\n['apple', 'banana', 'cherry', 'banana', 'banana']\n'banana'": 0.4727272727272728
        },
        "avg_similarity_score": 0.24921984838851208
    },
    {
        "instruction": "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.",
        "output": "def count_word_occurrences(sentence):\n    words = sentence.split()\n    count_dict = {}\n    for word in words:\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n    return count_dict\n\nsentence = \"I love Python programming. Python is the best!\"\nresult = count_word_occurrences(sentence)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5945945945945945,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.5882352941176471,
            "Create Python code to count the occurrence of each word in a given sentence.\n\"The cat in the hat\"": 0.5853658536585366,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.5714285714285714,
            "Given a list of strings, write a Python function to count the occurrences of a specific string in the list.": 0.5238095238095238,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5128205128205129,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.5116279069767442,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5000000000000001,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5,
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.5
        },
        "avg_similarity_score": 0.2692600590711688
    },
    {
        "instruction": "Create a Python dictionary that associates each letter of the alphabet with its corresponding ASCII value. The keys of the dictionary should be the lowercase letters and the values should be the ASCII values.",
        "output": "ascii_dict = {}\nfor letter in 'abcdefghijklmnopqrstuvwxyz':\n    ascii_dict[letter] = ord(letter)\nprint(ascii_dict)",
        "most_similar_instructions": {
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.45614035087719296,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.37037037037037035,
            "Create a Python dictionary with keys as the characters from a string and values as their respective frequencies in the string.": 0.3636363636363637,
            "Create a Python program that calculates the area of a circle. The program should ask the user for the radius of the circle and print the calculated area.": 0.3548387096774193,
            "Create a Python dictionary with keys as strings and values as integers. Write a script that prints the sum of all the values.": 0.3508771929824562,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.3448275862068966,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.34375,
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.3384615384615384,
            "Create a Python script that prompts the user to enter a list of numbers, separated by spaces. The script should then sort the numbers in ascending order and print the sorted list.": 0.33333333333333337,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.3278688524590164
        },
        "avg_similarity_score": 0.1723909199743972
    },
    {
        "instruction": "Write a Python script that counts the frequency of each word in a given text and prints the result.\n\"You are the creator of your own destiny\"",
        "output": "def count_word_frequency(text):\n    words = text.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\ntext = \"You are the creator of your own destiny\"\nword_frequency = count_word_frequency(text)\nprint(word_frequency)",
        "most_similar_instructions": {
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.553191489361702,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5490196078431373,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.5416666666666666,
            "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.": 0.5306122448979591,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.5,
            "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'": 0.49230769230769234,
            "Create a Python script that counts and prints the frequency of each word in a given text.\n\"This is a sample text. This text is used for counting word frequency.\"": 0.4912280701754386,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.48148148148148145,
            "Write a Python program to count the frequency of each element in a given list.": 0.47619047619047616,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.47058823529411764
        },
        "avg_similarity_score": 0.24644697685592576
    },
    {
        "instruction": "Write a Python script that reads an integer from the user and prints all its divisors.",
        "output": "number = int(input(\"Enter an integer: \"))\n\ndivisors = []\nfor i in range(1, number + 1):\n    if number % i == 0:\n        divisors.append(i)\n\nprint(divisors)",
        "most_similar_instructions": {
            "Write a Python script that reads a string from the user, converts all the characters to lowercase, and prints the updated string.": 0.5789473684210527,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.5714285714285714,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.5365853658536586,
            "Write a Python script that randomly selects a name from a list and prints it.": 0.5161290322580646,
            "Please generate a Python program that reads a string from the user and removes all vowels from the string.": 0.5142857142857142,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.5142857142857142,
            "Write a Python program that reads a list of numbers from the user, separates the positive and negative numbers, and prints them separately.": 0.5128205128205128,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.5128205128205128,
            "Write a Python script that reads the content of a text file and writes its reversed version into a new file.": 0.4864864864864864,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.4864864864864864
        },
        "avg_similarity_score": 0.22335775461500076
    },
    {
        "instruction": "Write a Python function that merges two dictionaries.",
        "output": "def merge_dicts(dict1, dict2):\n    return {**dict1, **dict2}",
        "most_similar_instructions": {
            "Write a Python function to merge two dictionaries into a new dictionary.": 0.6,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.5833333333333334,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5454545454545454,
            "Write a Python function that finds the highest common factor (HCF) of two numbers.": 0.5454545454545454,
            "Write a Python function that converts a sentence into title case.": 0.5263157894736842,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.5263157894736842,
            "Write a Python function that combines two lists by alternatingly taking elements from each list.": 0.5217391304347827,
            "Write a Python function that merges two dictionaries and returns the combined dictionary.\nDictionaries:\n{\"name\": \"John\", \"age\": 25}\n{\"city\": \"New York\", \"country\": \"USA\"}": 0.5161290322580645,
            "Write a Python program to concatenate two lists.": 0.5,
            "Write a Python function that concatenates two strings and returns the result.\nstring1 = \"Hello\"\nstring2 = \"World\"": 0.5
        },
        "avg_similarity_score": 0.2248504392100024
    },
    {
        "instruction": "How would you write a Python program to count the occurrences of each word in a given string?\nstring = \"I love to code. Coding is fun!\"",
        "output": "def count_word_occurrences(string):\n    word_counts = {}\n    words = string.split()\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return word_counts\n\nstring = \"I love to code. Coding is fun!\"\nprint(count_word_occurrences(string))",
        "most_similar_instructions": {
            "Write a Python program to count the frequency of each element in a given list.": 0.5853658536585367,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.5818181818181819,
            "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.": 0.5416666666666667,
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.5283018867924528,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5238095238095238,
            "You are given a string. Write a Python function to count the frequency of each character in the string.\nstring = \"apple\"": 0.5106382978723405,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.48000000000000004,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.47826086956521735,
            "Write Python code to capitalize the first letter of each word in a string.\nInput: \"welcome to the world of programming\"": 0.4680851063829788,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.46511627906976744
        },
        "avg_similarity_score": 0.24236190684119113
    },
    {
        "instruction": "Create a Python function called \"convert_to_celsius\" that takes a temperature in Fahrenheit as input and returns the temperature in Celsius.\nfahrenheit = 86",
        "output": "def convert_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5 / 9\n\nfahrenheit = 86\nprint(convert_to_celsius(fahrenheit))",
        "most_similar_instructions": {
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5531914893617021,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5454545454545454,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5306122448979592,
            "Write a Python code snippet to convert a temperature in Fahrenheit to Celsius.\nfahrenheit = 86": 0.5128205128205129,
            "Create a Python function that takes a floating-point number as input and rounds it to the nearest integer.": 0.5116279069767442,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.5116279069767442,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.49056603773584906,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4897959183673469,
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.4888888888888889,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.4761904761904762
        },
        "avg_similarity_score": 0.24181184232311526
    },
    {
        "instruction": "Provide a modification to the following code that sorts a given list of strings in descending order.\nnames = [\"John\", \"Alice\", \"Bob\", \"David\"]\n\ndef sort_names(name_list):\n    return sorted(name_list)",
        "output": "names = [\"John\", \"Alice\", \"Bob\", \"David\"]\n\ndef sort_names(name_list):\n    return sorted(name_list, reverse=True)",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.5161290322580645,
            "Complete the following Python code to sort a list of strings in descending order.\ndef sort_strings(strings):\n    strings.sort(reverse=True)\n    return strings": 0.4727272727272728,
            "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']": 0.4444444444444444,
            "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.": 0.42105263157894735,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.41666666666666663,
            "Implement a Python function to sort a given list of strings in alphabetical order.\nOriginal List: ['banana', 'apple', 'orange', 'grape']": 0.39215686274509803,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.3846153846153846,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.375,
            "Design a Python function that sorts a given list in descending order.\n[9, 4, 7, 2, 5]": 0.375,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.37037037037037035
        },
        "avg_similarity_score": 0.16938689581969724
    },
    {
        "instruction": "Write a Python function that converts a string representation of a number to its corresponding integer value.\nInput: '12345'",
        "output": "def convert_to_integer(s):\n    return int(s)\n\nnumber_string = '12345'\nresult = convert_to_integer(number_string)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5555555555555555,
            "Write a Python function that converts a string of binary digits into its decimal equivalent.\nbinary = \"1010\"": 0.5555555555555555,
            "Write a Python script that converts a given string to uppercase.": 0.5333333333333333,
            "Write a Python function that returns a list of all divisors of a given number.": 0.5294117647058824,
            "Write a Python program that converts a number in decimal format to binary format.": 0.48484848484848486,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.48484848484848486,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.47619047619047616,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.47058823529411764,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.47058823529411764,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.47058823529411764
        },
        "avg_similarity_score": 0.25032384470113994
    },
    {
        "instruction": "How can you check if all elements in a Python list are unique?",
        "output": "def are_elements_unique(lst):\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False",
        "most_similar_instructions": {
            "How can you write a Python function that checks if all elements in a given list are equal?\nlst = [1, 1, 1, 1, 1]": 0.5405405405405406,
            "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]": 0.5294117647058824,
            "How can you check if a given number is prime in Python?\ninput: 13": 0.5185185185185186,
            "How can you remove duplicate elements from a list in Python?": 0.4999999999999999,
            "How can you concatenate two lists in Python?": 0.4761904761904762,
            "How can you convert a string to uppercase in Python?": 0.4347826086956522,
            "Create a Python program to multiply all elements in a list.": 0.41666666666666663,
            "How can you implement a Python function to reverse a string?": 0.41666666666666663,
            "How can you find the length of a string using Python?": 0.41666666666666663,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.41379310344827586
        },
        "avg_similarity_score": 0.16072746667109666
    },
    {
        "instruction": "Create a Python class to represent a bank account with methods to deposit and withdraw money.",
        "output": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")",
        "most_similar_instructions": {
            "Create a Python class called \"BankAccount\" with attributes account_number and balance and methods to deposit and withdraw money.\n\"1234567890\", 1000": 0.5945945945945946,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.5806451612903225,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.5777777777777777,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.5625,
            "Design a Python class for a bank account that has methods to withdraw money, deposit money, and check the current balance.": 0.5405405405405405,
            "Design a Python class to represent a circle with attributes like radius. Include methods to calculate and return the circumference and area of the circle.": 0.48780487804878053,
            "Implement a Python class to represent a circle with attributes for its radius, diameter, area, and circumference.": 0.48484848484848486,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.4666666666666667,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.45714285714285713,
            "Design a Python class to represent a student with attributes like name, age, and grade. Include methods to update the student's grade and display the student's information.": 0.4444444444444445
        },
        "avg_similarity_score": 0.20845946984524147
    },
    {
        "instruction": "Complete the following code to find the smallest element in a list.\ndef find_min(numbers):\n    min_number = numbers[0]\n    for number in numbers:\n        if number < min_number:\n            min_number = number\n    return min_number",
        "output": "def find_min(numbers):\n    min_number = numbers[0]\n    for number in numbers:\n        if number < min_number:\n            min_number = number\n    return min_number",
        "most_similar_instructions": {
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.5070422535211269,
            "Suggest a completion for the following python code that finds the maximum value in a list of integers.\ndef find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value": 0.45945945945945943,
            "Please complete the code snippet to find the largest element in a given list.\nnumbers = [10, 24, 8, 45, 18]": 0.4074074074074075,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.40579710144927533,
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.40579710144927533,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.3793103448275862,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.37037037037037035,
            "Provide the missing code to divide each element in the given list by 2 and store the results in a new list.\nnumbers = [2, 4, 6, 8]\ndivided_numbers = []\n\nfor number in numbers:\n    # missing code goes here": 0.3661971830985916,
            "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]": 0.3636363636363637,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.35714285714285715
        },
        "avg_similarity_score": 0.12424651842532058
    },
    {
        "instruction": "Suggest a Python code to remove all the duplicate elements from a list.",
        "output": "def remove_duplicates(numbers):\n    return list(set(numbers))",
        "most_similar_instructions": {
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.588235294117647,
            "Create a Python program to multiply all elements in a list.": 0.5833333333333334,
            "Generate Python code to reverse the elements of a given list.": 0.5833333333333334,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.5625,
            "Generate a Python function to remove all occurrences of a specific element from a given list.": 0.5517241379310345,
            "Write Python code to extract all the unique elements from a given list and store them in a new list.": 0.5454545454545455,
            "Suggest a Python program to find the second largest number in a list.": 0.5384615384615384,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.5333333333333333,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.5333333333333333,
            "Write Python code to remove special characters from a string.": 0.5217391304347826
        },
        "avg_similarity_score": 0.2422385454910225
    },
    {
        "instruction": "What is the correct syntax to define a Python class named 'Car' with attributes 'color' and 'speed'?",
        "output": "class Car:\n    def __init__(self, color, speed):\n        self.color = color\n        self.speed = speed",
        "most_similar_instructions": {
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.5,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.43749999999999994,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.42424242424242425,
            "What is the syntax to define a Python generator function? Write a simple generator function that yields values from 1 to n.": 0.41025641025641024,
            "Create a Python class named \"Car\" with attributes \"color\" and \"brand\". The class should have a method named \"drive\" that prints \"The [color] [brand] car is driving.\".": 0.409090909090909,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.36842105263157887,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.3636363636363636,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.3636363636363636,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.3636363636363636,
            "Design a Python class named \"Student\" with attributes \"name\" and \"age\". Include methods in the class to set and get the attributes.": 0.358974358974359
        },
        "avg_similarity_score": 0.14702757531274938
    },
    {
        "instruction": "What is the correct syntax to define a Python function named 'square' that takes a number as input and returns its square?",
        "output": "def square(number):\n    return number * number",
        "most_similar_instructions": {
            "What is the correct syntax to define a Python class named 'Car' with attributes 'color' and 'speed'?": 0.5641025641025642,
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.5116279069767442,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5000000000000001,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.4878048780487805,
            "Create a Python function that takes a floating-point number as input and rounds it to the nearest integer.": 0.4878048780487805,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.47619047619047616,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.45454545454545453,
            "What is the syntax to define a Python generator function? Write a simple generator function that yields values from 1 to n.": 0.45454545454545453,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4444444444444445,
            "Implement a Python function called \"binary_to_decimal\" that takes a binary number as input (in the form of a string) and converts it to its decimal equivalent.": 0.44
        },
        "avg_similarity_score": 0.2091004418061651
    },
    {
        "instruction": "Suggest a completion for the following python code.\ndef calculate_average(numbers):\n    '''This function takes a list of numbers as input and returns their average.'''",
        "output": "def calculate_average(numbers):\n    '''This function takes a list of numbers as input and returns their average.'''\n    return sum(numbers) / len(numbers)",
        "most_similar_instructions": {
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5833333333333334,
            "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))": 0.5671641791044777,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.5333333333333332,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.52,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5128205128205129,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.4999999999999999,
            "Suggest a completion for the following python code.": 0.48484848484848486,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.48387096774193555,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.47058823529411764,
            "Suggest a completion for the following Python code to check if a list is sorted in ascending order.\ndef is_ascending(numbers):\n    '''This function should return True if the list ``numbers`` is sorted in ascending order and False otherwise.'''": 0.46875
        },
        "avg_similarity_score": 0.21356174239792539
    },
    {
        "instruction": "How would you implement a Python script that generates a random password of length 8, using lowercase alphabets and digits?",
        "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_lowercase + string.digits\n    password = ''.join(random.choice(characters) for _ in range(8))\n    return password",
        "most_similar_instructions": {
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.5789473684210527,
            "How can you write a Python function to generate a random password with 8 characters using lowercase letters, uppercase letters, and digits?": 0.5714285714285713,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5714285714285713,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.5641025641025641,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.5365853658536585,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.5263157894736842,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5128205128205129,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.5,
            "How would you implement a Python script that parses XML data and extracts specific elements from it?": 0.48648648648648646
        },
        "avg_similarity_score": 0.2193382807511389
    },
    {
        "instruction": "Create a Python function that checks whether a given number is prime or not. If it is prime, return True. Otherwise, return False.",
        "output": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\nnumber = 17\nprint(is_prime(number))",
        "most_similar_instructions": {
            "Write Python code to check if a given number is prime or not. Print \"Prime\" if it is prime, otherwise print \"Not prime\".\nInput: 17": 0.5416666666666667,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5405405405405405,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.5365853658536586,
            "Implement a Python function that checks if a given number is prime (only divisible by 1 and itself) and returns True if it is, and False otherwise.\nExample input: 7": 0.5283018867924527,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.5238095238095238,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5116279069767442,
            "Implement a Python function that takes a number as input and checks if it is a prime number. Return True if it is prime, and False otherwise.\n17": 0.5098039215686274,
            "Write a Python function that checks if a given number is prime or not. A prime number is a number that is divisible by only 1 and itself.\nNumber: 13": 0.49056603773584906,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.47368421052631576,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.47058823529411764
        },
        "avg_similarity_score": 0.20706554884302306
    },
    {
        "instruction": "Create a Python function to calculate the area of a circle given its radius. Use the value of pi as 3.14159.",
        "output": "def calculate_circle_area(radius):\n    pi = 3.14159\n    return pi * radius ** 2\n\nradius = 5\narea = calculate_circle_area(radius)\nprint(area)",
        "most_similar_instructions": {
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5789473684210527,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5581395348837208,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5365853658536586,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5,
            "Write a Python function to calculate the hypotenuse of a right-angled triangle given the lengths of the other two sides.\nSide 1: 3\nSide 2: 4": 0.4897959183673469,
            "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.": 0.45454545454545453,
            "Design a Python function that calculates the area of a triangle given the lengths of its three sides.\nSide 1: 5, Side 2: 7, Side 3: 9": 0.44897959183673464,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4444444444444444,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.4313725490196078,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4285714285714286
        },
        "avg_similarity_score": 0.24220626300152356
    },
    {
        "instruction": "Create a Python program to convert Celsius to Fahrenheit using the formula Fahrenheit = (Celsius * 9/5) + 32.",
        "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 25\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(fahrenheit)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.5454545454545455,
            "Create a Python program to convert a string to a list of words.": 0.4666666666666667,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.43749999999999994,
            "Encapsulate the following code snippet into a Python function that takes a temperature in Celsius and converts it to Fahrenheit. The function should return the converted value.\ncelsius = 25\nfahrenheit = (celsius * 9/5) + 32": 0.4313725490196078,
            "Create a Python program to find the first n Fibonacci numbers.": 0.42857142857142855,
            "Create a Python program to find the length of a string.\n\"Hello, World!\"": 0.4000000000000001,
            "Write a Python program to convert a string of lowercase characters to uppercase characters using the built-in string method.\nstring = 'hello world!'": 0.39999999999999997,
            "Create a Python function called \"convert_to_celsius\" that takes a temperature in Fahrenheit as input and returns the temperature in Celsius.\nfahrenheit = 86": 0.39024390243902435,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.3870967741935484,
            "Write a Python code snippet to convert a temperature in Fahrenheit to Celsius.\nfahrenheit = 86": 0.37500000000000006
        },
        "avg_similarity_score": 0.18649060469168224
    },
    {
        "instruction": "Can you write a Python program to find the maximum of three numbers using a lambda function?",
        "output": "find_maximum = lambda num1, num2, num3: max(num1, num2, num3)\nresult = find_maximum(5, 10, 8)\nprint(result)",
        "most_similar_instructions": {
            "Can you provide a Python code snippet to find the square root of a given number?": 0.5454545454545455,
            "Write a Python program to find the maximum product of two integers in a list.\n[2, 4, 6, 8, 10]": 0.5405405405405405,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.5365853658536585,
            "Create a Python program to find the length of a string.\n\"Hello, World!\"": 0.5333333333333333,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5161290322580646,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.5142857142857143,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Create a Python program to find the first n Fibonacci numbers.": 0.5,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5,
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.5
        },
        "avg_similarity_score": 0.2538859384774525
    },
    {
        "instruction": "Implement a Python class called \"Point\" with attributes \"x\" and \"y\". The class should have a method to calculate the distance between two points.",
        "output": "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def calculate_distance(self, other_point):\n        distance = math.sqrt((self.x - other_point.x)**2 + (self.y - other_point.y)**2)\n        return distance\n\npoint1 = Point(1, 2)\npoint2 = Point(3, 4)\nprint(\"Distance between points:\", point1.calculate_distance(point2))",
        "most_similar_instructions": {
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.5660377358490567,
            "Implement a Python class for a book with attributes title, author, and price. The class should also have a method called display_info() that prints the book's information.": 0.5283018867924529,
            "Write a Python class called \"Vehicle\" with attributes \"color\" and \"speed\". The class should have a method called \"accelerate\" that increases the speed of the vehicle by a given amount.": 0.5185185185185186,
            "Create a Python class named \"Car\" with attributes \"color\" and \"brand\". The class should have a method named \"drive\" that prints \"The [color] [brand] car is driving.\".": 0.5098039215686274,
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.5098039215686274,
            "Provide a complete code for a Python class named \"Student\" with attributes name and age. The class should have a method named \"display_info\" that prints the name and age of the student.": 0.45614035087719296,
            "Design a Python class named \"Student\" with attributes \"name\" and \"age\". Include methods in the class to set and get the attributes.": 0.43478260869565216,
            "Create a Python class called Rectangle that has attributes length and width. Implement a method inside the class to calculate its area.": 0.43478260869565216,
            "Design a Python class representing a book with attributes title, author, and price. Implement a method to calculate the total price after applying a given discount percentage.": 0.4313725490196078,
            "Create a Python class that represents a student with attributes name, age, and grade. Implement a method to calculate the average grade of a list of students.": 0.4313725490196078
        },
        "avg_similarity_score": 0.1914003443540672
    },
    {
        "instruction": "Write a Python function that takes two strings as input and checks if they are anagrams or not. Anagrams are words or phrases formed by rearranging the letters of another word or phrase.",
        "output": "def are_anagrams(string1, string2):\n    return sorted(string1.lower()) == sorted(string2.lower())\n\ninput_string1 = input(\"Enter the first string: \")\ninput_string2 = input(\"Enter the second string: \")\n\nif are_anagrams(input_string1, input_string2):\n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings are not anagrams.\")",
        "most_similar_instructions": {
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5614035087719298,
            "Implement a Python function to check if two given strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.": 0.5396825396825397,
            "Generate a Python program that takes two strings as input and checks if they are anagrams. If they are anagrams, print \"The strings are anagrams\", otherwise print \"The strings are not anagrams\".": 0.5230769230769231,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.5,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.4705882352941177,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.42553191489361697,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4150943396226416,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.4067796610169492,
            "Generate a Python function that checks whether two strings are anagrams or not.\nstring1 = \"listen\"\nstring2 = \"silent\"": 0.39999999999999997,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.39999999999999997
        },
        "avg_similarity_score": 0.19320410730223586
    },
    {
        "instruction": "Write a Python function that removes the first occurrence of a specified element from a given list.\n['apple', 'banana', 'cherry', 'dragonfruit'], 'banana'",
        "output": "def remove_element(lst, element):\n  if element in lst:\n    lst.remove(element)\n  return lst\n\nresult = remove_element(['apple', 'banana', 'cherry', 'dragonfruit'], 'banana')\nprint(result)",
        "most_similar_instructions": {
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.5714285714285713,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5641025641025642,
            "Write a Python function that finds the common elements from two given lists.\n['apple', 'banana', 'cherry', 'dragonfruit'], ['cherry', 'dragonfruit', 'guava', 'kiwi']": 0.5581395348837208,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.55,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.5405405405405405,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.5306122448979591,
            "Design a Python function that removes all duplicates from a given list.": 0.5294117647058824,
            "Generate a Python function to remove all occurrences of a specific element from a given list.": 0.5263157894736842,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.5238095238095238,
            "Please provide a Python function that finds the longest word in a given list of words.\nwords = ['apple', 'banana', 'cherry', 'date']": 0.5116279069767442
        },
        "avg_similarity_score": 0.2574618882634388
    },
    {
        "instruction": "Write a Python function to count the occurrences of each word in a given text.\n\"Python is a popular programming language. Python is versatile and easy to learn.\"",
        "output": "def count_word_occurrences(text):\n    words = text.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nsentence = \"Python is a popular programming language. Python is versatile and easy to learn.\"\nresult = count_word_occurrences(sentence)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.": 0.6,
            "How would you implement a Python program that counts the frequency of each word in a given text?\ntext = \"Python is a popular programming language. Python is used in web development, data analysis, and machine learning.\"": 0.5937499999999999,
            "Write Python code to count the frequency of each word in a given text.\nInput text: \"This is a sample text. It contains multiple words and words may repeat.\"": 0.5263157894736843,
            "How would you write a Python program to count the occurrences of each word in a given string?\nstring = \"I love to code. Coding is fun!\"": 0.5185185185185186,
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.5172413793103449,
            "Write a Python program to count the frequency of each element in a given list.": 0.5116279069767441,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.49122807017543857,
            "Create a Python script that counts the frequency of each word in a given string and prints the word with its frequency in descending order.\nsentence = 'I love Python programming because Python is easy to learn and versatile.'": 0.48484848484848486,
            "Suggest a Python code snippet to find the length of the longest word in a given sentence.\nSentence: \"Python programming is fun\"": 0.4799999999999999,
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.4727272727272727
        },
        "avg_similarity_score": 0.23359518086621014
    },
    {
        "instruction": "Design a Python function that takes two dictionaries as input and returns a new dictionary that contains the keys and values from both dictionaries.",
        "output": "def merge_dictionaries(dict1, dict2):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n\ndictionary1 = {'name': 'Alice', 'age': 30}\ndictionary2 = {'job': 'Developer'}\nmerged_dictionary = merge_dictionaries(dictionary1, dictionary2)\nprint(\"Merged dictionary:\", merged_dictionary)",
        "most_similar_instructions": {
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.5531914893617021,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5454545454545454,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5263157894736842,
            "Create a Python function that takes two strings as input and returns a new string that combines the characters of the two input strings in alternating order.\nInput strings: 'abc', '123'": 0.509090909090909,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.4761904761904762,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.4680851063829787,
            "Write a Python function that takes a dictionary as input and returns a sorted list of keys from the dictionary.\nexample_dict = {'b': 2, 'a': 1, 'c': 3}": 0.4615384615384615,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.4615384615384615,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.4615384615384615,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.4583333333333333
        },
        "avg_similarity_score": 0.22119920640717378
    },
    {
        "instruction": "How would you truncate a string in Python to a specific length?",
        "output": "text = \"Hello, World!\"\ntruncated_text = text[:10]\nprint(\"Truncated text:\", truncated_text)",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5454545454545454,
            "How can you implement a Python function to reverse a string?": 0.5217391304347826,
            "How would you implement a function in Python to check if a given word is a palindrome or not?\nracecar": 0.5,
            "How would you create an empty list in Python?": 0.4761904761904762,
            "How would you round a given float number to 2 decimal places in Python?": 0.4615384615384615,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.4444444444444445,
            "How would you sort a list of dictionaries based on a specific key in Python?": 0.4444444444444445,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.4444444444444445,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.4375,
            "How would you implement a Python script that generates a random password of length 8, using lowercase alphabets and digits?": 0.4375
        },
        "avg_similarity_score": 0.2055323241902945
    },
    {
        "instruction": "What Python code can be used to iterate through a dictionary and print both the key and value on separate lines?",
        "output": "my_dict = {'apple': 1, 'banana': 2, 'orange': 3}\n\nfor key, value in my_dict.items():\n    print(key)\n    print(value)",
        "most_similar_instructions": {
            "How can you iterate over a dictionary in Python and print both key and value?": 0.5555555555555556,
            "What is the Python code to get the current date and time?": 0.36363636363636365,
            "Write a Python function that finds the maximum value in a given dictionary and returns the key corresponding to that value.": 0.3333333333333333,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.3243243243243243,
            "Create a Python dictionary with keys \"name\", \"age\", and \"city\". Write a function that takes the dictionary as input and prints each key-value pair on a separate line.": 0.32,
            "Generate Python code to parse a JSON string into a dictionary.": 0.31249999999999994,
            "What is the Python code to calculate the length of a string?": 0.30303030303030304,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.2978723404255319,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.2857142857142857,
            "Can you write a Python script to concatenate two strings and print the result?": 0.2857142857142857
        },
        "avg_similarity_score": 0.15959178133895008
    },
    {
        "instruction": "Write Python code to calculate and print the area of a rectangle given its width and height.\nwidth: 5, height: 10",
        "output": "def calculate_rectangle_area(width, height):\n    return width * height\n\nwidth = 5\nheight = 10\narea = calculate_rectangle_area(width, height)\nprint(area)",
        "most_similar_instructions": {
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5714285714285714,
            "Write a Python function that calculates the area of a triangle given its base and height.\nFunction name: calculate_triangle_area\nInput: base = 5, height = 8": 0.5106382978723405,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5,
            "Write Python code to find the number of vowels in a given string.": 0.47058823529411764,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.4615384615384615,
            "Write Python code to find the factorial of a number using recursion.\nInput: 5": 0.4571428571428571,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.4390243902439024,
            "Generate Python code to reverse the elements of a given list.": 0.43749999999999994,
            "Write a Python script that calculates the area of a rectangle with given length and width, then stores the result in a variable named 'area'.": 0.43478260869565216,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.4324324324324324
        },
        "avg_similarity_score": 0.21545323030380606
    },
    {
        "instruction": "Create a Python function that multiplies each element of a given list by a given number.",
        "output": "def multiply_list_elements(numbers, factor):\n    return [number * factor for number in numbers]",
        "most_similar_instructions": {
            "Write a Python function that returns a list of all divisors of a given number.": 0.5806451612903225,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.5365853658536586,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.5294117647058824,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5161290322580646,
            "Create a Python script that generates a multiplication table for a given number.\nNumber: 5": 0.5161290322580646,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.5142857142857142,
            "Design a Python function that removes all duplicates from a given list.": 0.5,
            "Create a Python function that returns the largest element from a given list of numbers.\nInput: [10, 2, 34, 56, 8]": 0.4864864864864864,
            "Create a Python function to concatenate all the strings in a given list into a single string.": 0.48484848484848486,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.48484848484848486
        },
        "avg_similarity_score": 0.26458515592397175
    },
    {
        "instruction": "Build a Python function that rounds a given number to a specified number of decimal places.",
        "output": "def round_number(number, decimal_places):\n    return round(number, decimal_places)",
        "most_similar_instructions": {
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5333333333333333,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.5161290322580646,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.5142857142857142,
            "Create a Python function that multiplies each element of a given list by a given number.": 0.5,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.48780487804878053,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.48484848484848486,
            "Create a Python program that generates a random number within a specified range.": 0.4827586206896552,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.47058823529411764,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.45714285714285713,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.45161290322580644
        },
        "avg_similarity_score": 0.25032228878470625
    },
    {
        "instruction": "Can you write a Python function that finds and returns the first occurrence of a given element in a list?\nelement = 5\nlst = [1, 3, 5, 7, 5, 9, 11]",
        "output": "def find_first_occurrence(element, lst):\n    for i in range(len(lst)):\n        if lst[i] == element:\n            return i\n    return -1\n\nelement = 5\nlst = [1, 3, 5, 7, 5, 9, 11]\nprint(find_first_occurrence(element, lst))",
        "most_similar_instructions": {
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.588235294117647,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5818181818181818,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.5666666666666667,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.5660377358490566,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5531914893617021,
            "Implement a Python function that finds the index of the first occurrence of an element in a list.\n[5, 2, 8, 3, 1, 2, 5, 8, 2]\n2": 0.5517241379310344,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.5373134328358209,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5283018867924527,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.5172413793103449,
            "How can you write Python code to count the number of occurrences of a specific element in a list?\nelement = 7\nnumbers = [5, 2, 7, 4, 7, 1, 7]": 0.5084745762711865
        },
        "avg_similarity_score": 0.26240493078220817
    },
    {
        "instruction": "What is the correct way to write a Python class with a constructor that accepts parameters and a method to calculate the area of a rectangle given its length and width?",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def calculate_area(self):\n        return self.length * self.width\n\nrectangle = Rectangle(4, 6)\narea = rectangle.calculate_area()\nprint(\"Area:\", area)",
        "most_similar_instructions": {
            "Write a Python class called Rectangle with a constructor that takes the length and width as parameters. Add a method to the class to calculate and return the area of the rectangle.\n4, 5": 0.5230769230769231,
            "Write Python code to calculate and print the area of a rectangle given its width and height.\nwidth: 5, height: 10": 0.5,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.5,
            "Implement a Python function that calculates the area of a rectangle given its length and breadth.\nLength: 6, Breadth: 4": 0.47058823529411764,
            "Write a Python script that calculates the area of a rectangle with given length and width, then stores the result in a variable named 'area'.": 0.46428571428571425,
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.4615384615384615,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.43636363636363634,
            "What is the Python code to calculate the length of a string?": 0.4186046511627908,
            "Implement a Python class that represents a rectangle. The class should have methods to calculate the area and perimeter of the rectangle. It should also have attributes to store the length and width of the rectangle.": 0.417910447761194,
            "What is the correct syntax to define a Python class named 'Car' with attributes 'color' and 'speed'?": 0.41666666666666663
        },
        "avg_similarity_score": 0.2321434852664697
    },
    {
        "instruction": "What is the Python code for checking if a string is a palindrome (reads the same backward as forward) and returns True or False accordingly?",
        "output": "def is_palindrome(string):\n    return string == string[::-1]",
        "most_similar_instructions": {
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.5909090909090909,
            "What is the Python code to check if a given string is a palindrome or not? Write the code to perform the check.\nstring = \"madam\"": 0.48,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.4406779661016949,
            "Create a Python function that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.": 0.39344262295081966,
            "How can you write Python code to check if a string is a palindrome?\nstring = \"radar\"": 0.39024390243902435,
            "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.3846153846153846,
            "What is the Python code to calculate the length of a string?": 0.3783783783783784,
            "What is the Python code to get the current date and time?": 0.3783783783783784,
            "Write a Python function that takes a string input and checks if it is a palindrome (reads the same forwards and backwards, ignoring case and non-alphanumeric characters).": 0.3773584905660378,
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.37499999999999994
        },
        "avg_similarity_score": 0.15418449250675528
    },
    {
        "instruction": "How would you implement the Fibonacci sequence in Python using recursion?",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
        "most_similar_instructions": {
            "How would you create an empty list in Python?": 0.5,
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.4799999999999999,
            "Implement the merge sort algorithm in Python.": 0.4444444444444444,
            "How would you truncate a string in Python to a specific length?": 0.43478260869565216,
            "How can you concatenate two lists in Python?": 0.4210526315789474,
            "How would you round a given float number to 2 decimal places in Python?": 0.4,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.39999999999999997,
            "How would you merge two Python dictionaries into one?": 0.39999999999999997,
            "How would you write a Python program to generate Fibonacci series up to n terms using recursion?\nn = 10": 0.39999999999999997,
            "How would you implement a function in Python to check if a given word is a palindrome or not?\nracecar": 0.3870967741935483
        },
        "avg_similarity_score": 0.11292361758163126
    },
    {
        "instruction": "Write a Python program that prompts the user to enter three sides of a triangle and checks if it is a valid triangle (the sum of any two sides is greater than the third side).",
        "output": "def is_valid_triangle(side1, side2, side3):\n    if side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1:\n        return True\n    else:\n        return False",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a sentence and then checks if it is a pangram (a sentence that contains every letter of the alphabet at least once).": 0.5373134328358209,
            "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.": 0.5263157894736843,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.509090909090909,
            "Write a Python script that prompts the user to enter a number and checks if it is prime. The script should print \"Prime\" if the number is prime, and \"Not prime\" otherwise.": 0.5074626865671641,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.4923076923076923,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.490566037735849,
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.4666666666666667,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.45161290322580644,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.4444444444444445,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.4444444444444445
        },
        "avg_similarity_score": 0.2286388378303842
    },
    {
        "instruction": "Create a Python function named \"capitalize_names\" that capitalizes the first letter of each name in a given list of names.",
        "output": "def capitalize_names(names):\n    return [name.capitalize() for name in names]",
        "most_similar_instructions": {
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.5365853658536585,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5142857142857143,
            "Design a Python function that reverses the order of words in a given sentence.": 0.5142857142857143,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.5,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4878048780487805,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.4878048780487805,
            "Create a Python function that multiplies each element of a given list by a given number.": 0.4864864864864864,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.4782608695652174
        },
        "avg_similarity_score": 0.2600991091541421
    },
    {
        "instruction": "Write a Python script that generates a random password of a given length containing letters, numbers, and special characters.\nPassword length: 10",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\npassword_length = 10\nrandom_password = generate_password(password_length)\nprint(random_password)",
        "most_similar_instructions": {
            "Create a Python program that generates a Fibonacci sequence of a given length and prints it.\nLength: 10": 0.6,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.6,
            "Create a Python program that generates a random password containing a combination of letters (upper and lower case) and special characters. The password should have a length of 10 characters.": 0.576923076923077,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.5714285714285714,
            "Write a Python function that generates a random password consisting of alphanumeric characters.": 0.5714285714285714,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5652173913043478,
            "Please write a Python function to generate a random password of a given length.": 0.5555555555555556,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5454545454545454,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.5416666666666667,
            "Write a Python program that generates a random password of given length. The password should include at least one lowercase letter, one uppercase letter, one digit, and one special character.\n10": 0.5283018867924528
        },
        "avg_similarity_score": 0.24049202092128757
    },
    {
        "instruction": "Suggest a Python code snippet to iterate over a dictionary and print both keys and values.\ndictionary = {'apple': 5, 'banana': 3, 'orange': 2}",
        "output": "dictionary = {'apple': 5, 'banana': 3, 'orange': 2}\nfor key, value in dictionary.items():\n    print(key, value)",
        "most_similar_instructions": {
            "How can you write a Python program to find the largest and smallest values in a dictionary and print their keys?\ndictionary = {\"apple\": 5, \"banana\": 2, \"cherry\": 8, \"date\": 3}": 0.49056603773584906,
            "Write a Python program to sort a dictionary by values in descending order.\n{'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}": 0.4545454545454545,
            "What Python code can be used to iterate through a dictionary and print both the key and value on separate lines?": 0.4545454545454545,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.4444444444444444,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.4210526315789474,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4090909090909091,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.40816326530612246,
            "Provide the missing code to iterate over the keys and values of the given dictionary.\nfruits = {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n\nfor key, value in fruits.______():\n    # missing code goes here": 0.40740740740740744,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.3684210526315789,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.36734693877551017
        },
        "avg_similarity_score": 0.1913891039828765
    },
    {
        "instruction": "Write a Python script to add two matrices of the same size.\nMatrix 1: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nMatrix 2: [[9, 8, 7], [6, 5, 4], [3, 2, 1]]",
        "output": "def add_matrices(matrix1, matrix2):\n    result = []\n    for i in range(len(matrix1)):\n        row = []\n        for j in range(len(matrix1[i])):\n            row.append(matrix1[i][j] + matrix2[i][j])\n        result.append(row)\n    return result\n\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmatrix2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\nresult = add_matrices(matrix1, matrix2)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function to transpose a matrix represented as a list of lists.\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]": 0.5172413793103449,
            "Write a Python function that performs matrix multiplication between two given matrices.\n[[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]]": 0.4827586206896552,
            "Write Python code to check if two given lists are equal regardless of the order of elements.\n[1, 2, 3, 4], [4, 3, 2, 1]": 0.4745762711864407,
            "Write a Python function to find the second largest number in a given list.\nGiven list: [5, 1, 3, 7, 9, 2, 8, 6, 4]": 0.4406779661016949,
            "Create a Python function to find the intersection of two given lists.\nInput: [1, 2, 3, 4, 5], [4, 5, 6, 7, 8]": 0.4210526315789474,
            "Write a Python script to remove duplicate elements from a given list.\nnumbers = [2, 3, 5, 2, 8, 5]": 0.4150943396226416,
            "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]": 0.41379310344827586,
            "Write a program to remove all occurrences of a given element from a list in Python.\n[1, 2, 3, 2, 4, 1, 5, 6, 5, 7, 7], element: 2": 0.41269841269841273,
            "Write a program in Python to find the index of the first occurrence of an element x in a given list y.\n7, [3, 6, 7, 9, 7, 2, 1]": 0.40625,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.4000000000000001
        },
        "avg_similarity_score": 0.1705632342686093
    },
    {
        "instruction": "Design a Python function that finds the largest palindrome in a given string.\n\"madam arora teaches malayalam\"",
        "output": "def find_largest_palindrome(string):\n    words = string.split()\n    palindromes = [word for word in words if word == word[::-1]]\n    largest_palindrome = max(palindromes, key=len)\n    return largest_palindrome\n\ninput_string = \"madam arora teaches malayalam\"\nlargest_palindrome = find_largest_palindrome(input_string)\nprint(largest_palindrome)",
        "most_similar_instructions": {
            "Design a Python function that reverses the order of words in a given sentence.": 0.5806451612903226,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5454545454545455,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5,
            "Create a Python script that finds the second largest element in a given list.\n[10, 5, 20, 15, 8]": 0.5,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.48648648648648646,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.48648648648648646,
            "Design a Python function that removes all duplicates from a given list.": 0.4827586206896552,
            "Design a Python function to convert a given string to title case.": 0.4827586206896552,
            "Create a Python function that takes a string and checks if it is a valid palindrome. Ignore spaces, capitalization, and punctuation.\n\"Madam Arora teaches malayalam\"": 0.4761904761904762,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4736842105263158
        },
        "avg_similarity_score": 0.24160366806708822
    },
    {
        "instruction": "Generate a Python script that converts a decimal number to binary.\nnumber = 10\nInput: Decimal number = 10\nOutput: Binary number = 1010",
        "output": "def decimal_to_binary(number):\n    binary = \"\"\n    while number > 0:\n        binary = str(number % 2) + binary\n        number = number // 2\n    return binary\n\nnumber = 10\nresult = decimal_to_binary(number)\nprint(f'The binary representation of {number} is: {result}')",
        "most_similar_instructions": {
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5,
            "Write a Python function that converts a string of binary digits into its decimal equivalent.\nbinary = \"1010\"": 0.4736842105263158,
            "Write a Python program that converts a number in decimal format to binary format.": 0.4571428571428571,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.4444444444444444,
            "Write a Python script that converts a given string to uppercase.": 0.43749999999999994,
            "Build a Python function that rounds a given number to a specified number of decimal places.": 0.4324324324324324,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.4324324324324324,
            "Write a Python program that prompts the user for a decimal number and converts it to binary.": 0.42105263157894735,
            "Write a Python program that converts a temperature from Fahrenheit to Celsius.\nInput: 98.6\nOutput: 37.0": 0.41025641025641024,
            "Write a Python function that converts a string representation of a number to its corresponding integer value.\nInput: '12345'": 0.4
        },
        "avg_similarity_score": 0.18647674153298777
    },
    {
        "instruction": "Complete the following Python code to sort a list of names in ascending order.\nnames = [\"Emma\", \"Olivia\", \"Liam\", \"Noah\", \"Isabella\", \"Sophia\", \"Mason\"]\nnames_sorted = sorted(names)",
        "output": "names = [\"Emma\", \"Olivia\", \"Liam\", \"Noah\", \"Isabella\", \"Sophia\", \"Mason\"]\nnames_sorted = sorted(names)\nprint(names_sorted)",
        "most_similar_instructions": {
            "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']": 0.5306122448979592,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5,
            "Complete the following Python code to sort a list of strings in descending order.\ndef sort_strings(strings):\n    strings.sort(reverse=True)\n    return strings": 0.48000000000000004,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.47826086956521735,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.45614035087719296,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.45,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.41860465116279066,
            "Provide a modification to the following code that sorts a given list of strings in descending order.\nnames = [\"John\", \"Alice\", \"Bob\", \"David\"]\n\ndef sort_names(name_list):\n    return sorted(name_list)": 0.3859649122807018,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.36734693877551017,
            "Write Python code for bubble sort algorithm to sort a list of integers.": 0.3589743589743589
        },
        "avg_similarity_score": 0.14580054074009074
    },
    {
        "instruction": "Implement a Python decorator that measures and prints the execution time of a function.",
        "output": "import time\n\ndef measure_execution_time(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(\"Execution time:\", execution_time)\n        return result\n    return wrapper",
        "most_similar_instructions": {
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5714285714285714,
            "Create a Python program that prints the current date and time.": 0.4799999999999999,
            "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.": 0.4571428571428571,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.45161290322580644,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.4444444444444445,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4444444444444445,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.43750000000000006,
            "Can you implement a Python function that returns the reversed version of a given string?\n\"Python is great!\"": 0.43750000000000006,
            "Design a Python function that reverses the order of words in a given sentence.": 0.42857142857142855,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.4242424242424242
        },
        "avg_similarity_score": 0.24274750102500364
    },
    {
        "instruction": "Complete the following Python code to find the second largest number in a given list.\nnumbers = [5, 9, 2, 7, 3, 6]\nsorted_numbers = sorted(numbers)\nsecond_largest = sorted_numbers[-2]",
        "output": "numbers = [5, 9, 2, 7, 3, 6]\nsorted_numbers = sorted(numbers)\nsecond_largest = sorted_numbers[-2]\nprint(second_largest)",
        "most_similar_instructions": {
            "What is the Python code to find the largest number in a given list?\n[10, 5, 8, 20, 3, 15]": 0.5490196078431372,
            "Write a Python function to find the second largest number in a given list.\nGiven list: [5, 1, 3, 7, 9, 2, 8, 6, 4]": 0.5357142857142857,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.5098039215686274,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5098039215686274,
            "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]": 0.5,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.4905660377358491,
            "Complete the following Python code to find the index of the first occurrence of a given value in a list.\nnumbers = [1, 3, 5, 7, 9, 3, 4, 5]\nvalue = 3": 0.4838709677419355,
            "Please complete the code snippet to find the largest element in a given list.\nnumbers = [10, 24, 8, 45, 18]": 0.47058823529411764,
            "Suggest a Python program to find the second largest number in a list.": 0.45454545454545453,
            "Write Python code to find the index of a specific element in a list.\nInput: [5, 3, 9, 2, 7], element = 9": 0.45283018867924524
        },
        "avg_similarity_score": 0.1747920910792261
    },
    {
        "instruction": "Create a Python function that checks if a given number is a palindrome or not. The function should return a boolean value.\n121",
        "output": "def check_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ninput_number = 121\nis_palindrome = check_palindrome(input_number)\nprint(is_palindrome)",
        "most_similar_instructions": {
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.5714285714285715,
            "Create a Python function that checks whether a given number is prime or not. If it is prime, return True. Otherwise, return False.": 0.5652173913043478,
            "Write a Python function that checks if a given string is a palindrome (reads the same forwards and backwards). The function should return True if the string is a palindrome, and False otherwise.\n\"racecar\"": 0.5614035087719297,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5581395348837209,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5405405405405405,
            "Implement a Python function that checks whether a given string is a palindrome.\nString: \"racecar\"": 0.5263157894736841,
            "Create a Python program to check if a number is a perfect square or not.": 0.5263157894736841,
            "Create a Python function that checks if a list is empty. Print the result.\nlist = []": 0.5263157894736841,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.5238095238095238,
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.5217391304347826
        },
        "avg_similarity_score": 0.23841088566648547
    },
    {
        "instruction": "Write a Python script that generates a list of all Fibonacci numbers less than or equal to 100.",
        "output": "def generate_fibonacci_numbers(limit):\n    fibonacci_numbers = [0, 1]\n    while fibonacci_numbers[-2] + fibonacci_numbers[-1] <= limit:\n        fibonacci_numbers.append(fibonacci_numbers[-2] + fibonacci_numbers[-1])\n    return fibonacci_numbers\n\nfibonacci_sequence = generate_fibonacci_numbers(100)\nprint(fibonacci_sequence)",
        "most_similar_instructions": {
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.6,
            "Write a Python script that generates a list of all prime numbers between two given numbers (inclusive).\nstart = 2\nend = 20": 0.5641025641025642,
            "Write a Python program that generates all prime numbers less than a given number.\nlimit = 20": 0.5294117647058824,
            "Write a Python function that takes in a list of strings and converts all strings to lowercase.": 0.5142857142857143,
            "Generate a list of all prime numbers less than 100 using a Python program.": 0.5,
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.5,
            "Write a Python function that returns a list of all divisors of a given number.": 0.4848484848484848,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4848484848484848,
            "Write a Python script that converts a given string to uppercase.": 0.4827586206896552,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.4736842105263158
        },
        "avg_similarity_score": 0.2433755976736663
    },
    {
        "instruction": "Write a Python program to generate a list of prime numbers in a given range using a function.",
        "output": "def generate_prime_numbers(start, end):\n    prime_numbers = []\n\n    for num in range(start, end+1):\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n\n    return prime_numbers\n\nstart_num = 1\nend_num = 20\nprint(generate_prime_numbers(start_num, end_num))",
        "most_similar_instructions": {
            "Can you write a Python program to find the maximum of three numbers using a lambda function?": 0.5714285714285715,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.5625000000000001,
            "Please write a Python function to generate a random password of a given length.": 0.5625000000000001,
            "Write a Python program to generate a random number between a given range of numbers using the random module.\nRange: 1-100": 0.55,
            "Write a Python program to count the frequency of each element in a given list.": 0.5454545454545454,
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.5306122448979592,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.5238095238095238,
            "Write Python code to generate a random integer between a given range.\n10, 50": 0.5,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.5,
            "Generate a list of all prime numbers less than 100 using a Python program.": 0.5
        },
        "avg_similarity_score": 0.26830328310856205
    },
    {
        "instruction": "Write a Python program to find the common elements between two lists and return them as a new list.\n['apple', 'banana', 'cherry'], ['banana', 'kiwi', 'grapes']",
        "output": "def find_common_elements(list1, list2):\n    common_elements = list(set(list1).intersection(list2))\n    return common_elements\n\nlist1 = ['apple', 'banana', 'cherry']\nlist2 = ['banana', 'kiwi', 'grapes']\nprint(find_common_elements(list1, list2))",
        "most_similar_instructions": {
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.5499999999999999,
            "Generate a Python program to find the common elements from two lists.": 0.5405405405405406,
            "Write a Python function that finds the common elements from two given lists.\n['apple', 'banana', 'cherry', 'dragonfruit'], ['cherry', 'dragonfruit', 'guava', 'kiwi']": 0.5217391304347826,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.5116279069767442,
            "Given a list of integers, write a Python function to find all the even numbers and return them in a new list.": 0.5106382978723404,
            "Write a Python program to find the maximum product of two integers in a list.\n[2, 4, 6, 8, 10]": 0.4444444444444445,
            "Write Python code to extract all the unique elements from a given list and store them in a new list.": 0.4444444444444445,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.4444444444444445,
            "How can you write a Python program to find the largest and smallest values in a dictionary and print their keys?\ndictionary = {\"apple\": 5, \"banana\": 2, \"cherry\": 8, \"date\": 3}": 0.4363636363636364,
            "Write a Python function that removes the first occurrence of a specified element from a given list.\n['apple', 'banana', 'cherry', 'dragonfruit'], 'banana'": 0.4255319148936171
        },
        "avg_similarity_score": 0.2181567476426309
    },
    {
        "instruction": "Write a Python program to find the difference between two sets and return it as a new set.\n{1, 2, 3}, {2, 3, 4}",
        "output": "def find_set_difference(set1, set2):\n    return set1 - set2\n\nset1 = {1, 2, 3}\nset2 = {2, 3, 4}\nprint(find_set_difference(set1, set2))",
        "most_similar_instructions": {
            "Write a Python program to find the common elements between two lists and return them as a new list.\n['apple', 'banana', 'cherry'], ['banana', 'kiwi', 'grapes']": 0.5714285714285714,
            "Write a Python program to concatenate two dictionaries.\n{'a': 1, 'b': 2} and {'c': 3, 'd': 4}": 0.5365853658536585,
            "Write a Python program to find the maximum product of two integers in a list.\n[2, 4, 6, 8, 10]": 0.5,
            "Write a Python program to check if two given lists are identical or not.\n[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]": 0.5,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4897959183673469,
            "Can you write a Python function to concatenate two dictionaries into a new one?\ndict1 = {1: 'apple', 2: 'banana'}\ndict2 = {3: 'cherry', 4: 'mango'}": 0.4583333333333333,
            "Write a Python function to find the second largest number in a given list.\nGiven list: [5, 1, 3, 7, 9, 2, 8, 6, 4]": 0.4489795918367347,
            "Write a Python program to find the index of an item in a list.\nInput list: [4, 8, 2, 6, 3]\nItem to find: 2": 0.4489795918367347,
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.44827586206896547,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.4444444444444445
        },
        "avg_similarity_score": 0.2267765900750669
    },
    {
        "instruction": "Write a Python program that constructs a dictionary with each unique word as a key and the number of occurrences as the value from a given sentence. Ignore case sensitivity.\n\"The quick brown fox jumps over the lazy dog\"",
        "output": "def count_words(s):\n    words = s.lower().split()\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return word_counts\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(count_words(sentence))",
        "most_similar_instructions": {
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5714285714285714,
            "Can you write a Python script that replaces each occurrence of a given word in a string with another word?\nString: \"The quick brown fox jumps over the lazy dog\"\nReplace: \"fox\"\nWith: \"cat\"": 0.4657534246575343,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.45161290322580644,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.43333333333333335,
            "Write a Python program that creates a dictionary containing the square of each number from 1 to a given integer.\n5": 0.4,
            "Create a Python program that takes a list of strings as input and returns the number of occurrences of a given word in the list.\n['apple', 'banana', 'cherry', 'banana', 'banana']\n'banana'": 0.4,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.37681159420289856,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.3728813559322034,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.368421052631579,
            "Write a Python program that finds and replaces all occurrences of a word in a given string with a new word.\nInput string: \"The brown cat jumped over the brown dog.\"\nWord to replace: \"brown\", New word: \"black\"": 0.36363636363636365
        },
        "avg_similarity_score": 0.2108988857778065
    },
    {
        "instruction": "Create a Python function to calculate the volume of a cylinder using a given radius and height.",
        "output": "import math\n\ndef calculate_volume_cylinder(radius, height):\n    volume = math.pi * radius ** 2 * height\n    return volume",
        "most_similar_instructions": {
            "Write a Python function to calculate the area of a triangle given the length of its base and height.\n4, 7": 0.5789473684210527,
            "Create a Python function to calculate the area of a circle given its radius. Use the value of pi as 3.14159.": 0.5641025641025642,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5555555555555555,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5333333333333333,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5142857142857143,
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.5,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.48648648648648646,
            "Generate a Python function to find the number of prime numbers less than a given number.": 0.48484848484848486,
            "Generate a Python function to remove all occurrences of a specific element from a given list.": 0.48484848484848486,
            "Create a Python function that multiplies each element of a given list by a given number.": 0.48484848484848486
        },
        "avg_similarity_score": 0.26033321515493923
    },
    {
        "instruction": "Implement a Python function named \"count_vowels\" that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.",
        "output": "def count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n    return count",
        "most_similar_instructions": {
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5833333333333334,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5652173913043478,
            "Write a Python function that counts the number of vowels (a, e, i, o, u) in a given string and returns the count.\n\"This is another test\"": 0.5555555555555556,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.553191489361702,
            "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.": 0.5490196078431373,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.5490196078431373,
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.5416666666666666,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5384615384615384,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5333333333333333,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.5217391304347826
        },
        "avg_similarity_score": 0.24893894459760688
    },
    {
        "instruction": "Write a Python program that prompts the user for a dividend and divisor, and prints the quotient and remainder of the division.",
        "output": "dividend = int(input(\"Enter the dividend: \"))\ndivisor = int(input(\"Enter the divisor: \"))\n\nquotient = dividend // divisor\nremainder = dividend % divisor\n\nprint(\"Quotient:\", quotient)\nprint(\"Remainder:\", remainder)",
        "most_similar_instructions": {
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.5853658536585366,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5714285714285713,
            "Write a Python program that prompts the user for a decimal number and converts it to binary.": 0.5641025641025642,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.5365853658536586,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5142857142857142,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.5,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.4897959183673469,
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.4888888888888889,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.4799999999999999,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.47619047619047616
        },
        "avg_similarity_score": 0.2542907948307955
    },
    {
        "instruction": "Implement a Python function named \"get_even_indexed_elements\" that takes a list as input and returns a new list containing only the elements with even indices.",
        "output": "def get_even_indexed_elements(lst):\n    return [element for index, element in enumerate(lst) if index % 2 == 0]",
        "most_similar_instructions": {
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.6,
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.5833333333333334,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5666666666666667,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.5660377358490566,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.553191489361702,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5490196078431373,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.52,
            "Implement a Python function named \"count_vowels\" that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.": 0.5185185185185185,
            "Can you write a Python code that takes a list as input and returns another list without any duplicate elements?": 0.5106382978723405,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5
        },
        "avg_similarity_score": 0.2246417800117766
    },
    {
        "instruction": "Create a dictionary called \"fruits\" with the following key-value pairs: apple - red, banana - yellow, orange - orange.",
        "output": "fruits = {\"apple\": \"red\", \"banana\": \"yellow\", \"orange\": \"orange\"}",
        "most_similar_instructions": {
            "Create a Python list called \"fruits\" with the following items: \"apple\", \"banana\", \"orange\". Print the second item in the list.": 0.5405405405405405,
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.5294117647058824,
            "Create a Python dictionary called \"pets\" with the following key-value pairs: \"dog\"-\"bark\", \"cat\"-\"meow\", \"bird\"-\"chirp\". Print the sound made by the bird.": 0.4761904761904762,
            "Create a Python set called \"colors\" with the following items: \"red\", \"green\", \"blue\". Print the set.": 0.42424242424242425,
            "Create a Python dictionary with 3 key-value pairs representing the name, age, and profession of a person.": 0.39999999999999997,
            "Provide the missing code to iterate over the keys and values of the given dictionary.\nfruits = {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n\nfor key, value in fruits.______():\n    # missing code goes here": 0.3333333333333333,
            "Create a Python dictionary that stores the names of fruits as keys and their corresponding quantities as values. Add the following items to the dictionary: 'apple' with quantity 3, 'banana' with quantity 5, and 'orange' with quantity 2.": 0.3272727272727273,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.3255813953488372,
            "Create a Python dictionary called \"car\" with keys \"brand\", \"model\", and \"year\". Set the values for each key to your favorite car's brand, model, and year.": 0.3181818181818182,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.31578947368421056
        },
        "avg_similarity_score": 0.11505466266414648
    },
    {
        "instruction": "Create a class called \"Circle\" with the following attributes: radius and color.",
        "output": "class Circle:\n  def __init__(self, radius, color):\n    self.radius = radius\n    self.color = color",
        "most_similar_instructions": {
            "Create a Python class named \"Person\" with attributes Name and Age.": 0.5217391304347826,
            "Implement a Python class to represent a circle with attributes for its radius, diameter, area, and circumference.": 0.4827586206896552,
            "Create a class called \"Cat\" with the following attributes: name, age, color. Provide a constructor to initialize these attributes and a method called \"meow\" that prints \"Meow!\".": 0.46153846153846156,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.4516129032258065,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.4444444444444445,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.4444444444444444,
            "Create a Python class named \"Circle\" with attribute radius. Implement methods to compute the area and circumference of the circle.": 0.4375,
            "How would you implement a Python class that represents a circle object with attributes radius and center coordinates (x, y)?": 0.4375,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.42857142857142855,
            "Create a Python set called \"colors\" with the following items: \"red\", \"green\", \"blue\". Print the set.": 0.42857142857142855
        },
        "avg_similarity_score": 0.1474624467397438
    },
    {
        "instruction": "Write a Python script that prompts the user to enter the radius of a circle, then calculates and prints the area of the circle.",
        "output": "import math\n\nradius = float(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius**2\nprint(\"Area of the circle:\", area)",
        "most_similar_instructions": {
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.5909090909090908,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.5882352941176471,
            "Write a Python script that takes user input of a radius and calculates the area of a circle with that radius.": 0.5777777777777778,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.576923076923077,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.5652173913043478,
            "Write a Python program that prompts the user for a dividend and divisor, and prints the quotient and remainder of the division.": 0.5652173913043478,
            "Implement a Python script that prompts the user to input a list of numbers (separated by commas) and then calculates the sum of all the numbers.": 0.5599999999999999,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.5581395348837209,
            "Write a Python script that prompts the user to enter a sentence and counts the number of words in the sentence. The script should print the total number of words.": 0.5555555555555556,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.5454545454545454
        },
        "avg_similarity_score": 0.26240420961633787
    },
    {
        "instruction": "Write a Python function that accepts a number and returns True if the number is even, and False if the number is odd.\n7",
        "output": "def is_even(n):\n    return n % 2 == 0\n\nnumber = 7\nresult = is_even(number)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.5833333333333334,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.5555555555555556,
            "Implement a Python function that checks if a given number is prime (only divisible by 1 and itself) and returns True if it is, and False otherwise.\nExample input: 7": 0.5185185185185186,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.5,
            "Write a Python script that generates a random number between 1 and 10, then checks if the number is divisible by 2. If it is, print \"Even number\", otherwise print \"Odd number\".": 0.5,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4888888888888889,
            "Create a Python function that accepts two strings and returns True if they are anagrams (contain the same characters in a different order), and False otherwise.": 0.48000000000000004,
            "Write a Python function that takes a number as input and prints the multiplication table for that number up to 10.\n7": 0.4782608695652174,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4761904761904762,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.4736842105263159
        },
        "avg_similarity_score": 0.24439830517815278
    },
    {
        "instruction": "Write a Python function that takes two lists of words and returns the common words between them.\n['apple', 'banana', 'cherry'], ['banana', 'kiwi', 'cherry']",
        "output": "def find_common_words(list1, list2):\n    return list(set(list1).intersection(list2))\n\ninput_list1 = ['apple', 'banana', 'cherry']\ninput_list2 = ['banana', 'kiwi', 'cherry']\ncommon_words = find_common_words(input_list1, input_list2)\nprint(common_words)",
        "most_similar_instructions": {
            "Create a Python function that merges two dictionaries and returns the result.\n{'apple': 5, 'banana': 7}, {'cherry': 3, 'dragonfruit': 9}": 0.5116279069767442,
            "Write a Python function that finds the common elements from two given lists.\n['apple', 'banana', 'cherry', 'dragonfruit'], ['cherry', 'dragonfruit', 'guava', 'kiwi']": 0.5,
            "Write a Python program to find the common elements between two lists and return them as a new list.\n['apple', 'banana', 'cherry'], ['banana', 'kiwi', 'grapes']": 0.4999999999999999,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.49056603773584906,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.4897959183673469,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4864864864864865,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4782608695652174,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.4782608695652174,
            "Create a Python function that concatenates two lists into one and returns the concatenated list.": 0.47368421052631576,
            "Develop a Python function that merges two dictionaries.\n{'apple': 2, 'banana': 3}, {'cherry': 1, 'kiwi': 4}": 0.46153846153846156
        },
        "avg_similarity_score": 0.2186149181445426
    },
    {
        "instruction": "How can you generate a list of the first 10 Fibonacci numbers in Python?",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_list = [0, 1]\n        while len(fib_list) < n:\n            next_num = fib_list[-1] + fib_list[-2]\n            fib_list.append(next_num)\n        return fib_list[:n]\n        \nfibonacci_numbers = fibonacci(10)\nprint(fibonacci_numbers)",
        "most_similar_instructions": {
            "How can you sort a list of strings in alphabetical order using Python?": 0.5925925925925927,
            "How can you remove duplicate elements from a list in Python?": 0.56,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.5454545454545454,
            "How can you generate a random integer between a given range in Python?": 0.5185185185185186,
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.5,
            "How can you convert a string to uppercase in Python?": 0.5,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.48484848484848486,
            "How would you sort a list of dictionaries based on a specific key in Python?": 0.4827586206896552,
            "How would you implement the Fibonacci sequence in Python using recursion?": 0.4799999999999999,
            "How can you concatenate two lists in Python?": 0.45454545454545453
        },
        "avg_similarity_score": 0.18257757554430376
    },
    {
        "instruction": "Create a Python script that generates a random password of length n using a combination of uppercase letters, lowercase letters, and digits. The length of the password should be provided as a parameter when calling the function.",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\npassword_length = 10\npassword = generate_password(password_length)\nprint(password)",
        "most_similar_instructions": {
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.588235294117647,
            "Write a Python function that generates a random password consisting of lowercase letters, uppercase letters, and digits. The password should be of length 8.": 0.5245901639344263,
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.5161290322580645,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.5084745762711864,
            "Create a Python program that generates a random password containing a combination of letters (upper and lower case) and special characters. The password should have a length of 10 characters.": 0.5074626865671642,
            "How would you implement a Python script that generates a random password of length 8, using lowercase alphabets and digits?": 0.4912280701754387,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.46875,
            "Write a Python script that generates a random password of a given length containing letters, numbers, and special characters.\nPassword length: 10": 0.4406779661016949,
            "Create a Python program that generates a random password of length n. The program should take an integer n as input and return a random string of alphanumeric characters of length n.": 0.43478260869565216,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.40740740740740744
        },
        "avg_similarity_score": 0.19639139221899474
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport random\n\ndef shuffle_list(lst):\n    '''This function will shuffle the elements of the given list randomly.'''",
        "output": "import random\n\ndef shuffle_list(lst):\n    '''This function will shuffle the elements of the given list randomly.'''\n    random.shuffle(lst)\n    return lst",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.6,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.5777777777777778,
            "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''": 0.5660377358490566,
            "Suggest a completion for the following Python code.\ntext = 'Lorem ipsum dolor sit amet'\n\ndef count_words(text):\n    '''This function counts the number of words in a given text.'''": 0.5185185185185185,
            "Suggest a completion for the following Python code.\nimport os\n\ndef create_new_directory(directory_name):\n    '''This function creates a new directory with the specified name.'''": 0.5098039215686274,
            "Suggest a completion for the following Python code.\nimport requests\n\ndef get_html_content(url):\n    '''This function makes an HTTP GET request to the given url and returns the HTML content of the page.'''": 0.5084745762711865,
            "Suggest a completion for the following python code.": 0.48484848484848486,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.4827586206896552,
            "Suggest a completion for the following python code.\ndef calculate_average(numbers):\n    '''This function takes a list of numbers as input and returns their average.'''": 0.48,
            "Suggest a completion for the following Python code.\nnums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''": 0.4615384615384615
        },
        "avg_similarity_score": 0.1935209131579116
    },
    {
        "instruction": "Suggest a completion for the following Python code.\nimport datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current time: \" + current_time.)",
        "output": "import datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current time: \" + current_time.strftime(\"%H:%M:%S\"))",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.6,
            "Suggest a completion for the following python code.": 0.5714285714285715,
            "Suggest a completion for the following Python code.\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)": 0.5128205128205129,
            "Suggest a completion for the following python code.\nimport requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()": 0.4390243902439024,
            "Suggest a completion for the following python code.\nimport os\n\nfile_path = \"data.txt\"\nfile_size = os.path.getsize(file_path)": 0.4390243902439024,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.4285714285714286,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4186046511627907,
            "Suggest a completion for the following python code.\nimport time\n\ndef delay_execution(seconds):\n    '''This function delays the execution of the program for the specified number of seconds.'''": 0.41666666666666663,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.4000000000000001,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.39999999999999997
        },
        "avg_similarity_score": 0.11692932558121699
    },
    {
        "instruction": "Write a Python function that takes a string as input and returns the string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase.\nHello, World!",
        "output": "def swap_case(string):\n    swapped = \"\"\n    for char in string:\n        if char.isupper():\n            swapped += char.lower()\n        else:\n            swapped += char.upper()\n    return swapped\n\nsentence = \"Hello, World!\"\nswapped_sentence = swap_case(sentence)\nprint(swapped_sentence)",
        "most_similar_instructions": {
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.56,
            "Design a Python function that converts a string to lowercase and removes all punctuation marks.\n\"Hello, World!\"": 0.5106382978723405,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5098039215686274,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.4897959183673469,
            "Create a Python program that takes a string as input and converts it to title case.\nInput: \"hello world\"": 0.4897959183673469,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.48,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.47761194029850745,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.4727272727272728,
            "Implement a Python function named \"capitalize_words\" that takes a sentence as input and returns the sentence with each word capitalized.": 0.47058823529411764,
            "Write a Python function that takes in a list of strings and converts all strings to lowercase.": 0.46808510638297873
        },
        "avg_similarity_score": 0.22486670519558377
    },
    {
        "instruction": "Generate a Python program to search for a specific character in a string and return the index of the first occurrence.",
        "output": "def find_char(string, char):\n    for i in range(len(string)):\n        if string[i] == char:\n            return i\n    return -1",
        "most_similar_instructions": {
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.5128205128205129,
            "Generate a Python script to find and replace a specific word in a given string.": 0.5,
            "Generate a Python program to reverse a given string.": 0.4666666666666666,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.4390243902439024,
            "Write a Python program that prompts the user for a dividend and divisor, and prints the quotient and remainder of the division.": 0.4186046511627907,
            "Create a Python program to convert a string to a list of words.": 0.41176470588235287,
            "Generate a Python program to calculate the power of a number using recursion.": 0.41176470588235287,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.4090909090909091,
            "Generate a correct Python program to sort a list of numbers in ascending order.": 0.4,
            "Please generate a Python program that reads a string from the user and removes all vowels from the string.": 0.4
        },
        "avg_similarity_score": 0.23351248111824144
    },
    {
        "instruction": "Write a Python program that reads a list of integers and returns the largest and smallest number in the list.\nExample input: [5, 10, 3, 8, 2]",
        "output": "def find_largest_smallest(numbers):\n    return max(numbers), min(numbers)\n\ninput_numbers = [5, 10, 3, 8, 2]\nlargest, smallest = find_largest_smallest(input_numbers)\nprint(\"Largest:\", largest)\nprint(\"Smallest:\", smallest)",
        "most_similar_instructions": {
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.6,
            "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.": 0.5925925925925926,
            "Write a Python script that returns the largest and smallest elements from a list.\nnumbers = [5, 8, 3, 2, 10]": 0.553191489361702,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5416666666666666,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.5098039215686274,
            "Write a function in Python that takes a list of strings and returns the longest string from the list.\nInput: ['cat', 'dog', 'elephant', 'lion']": 0.5098039215686274,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.5,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4888888888888889,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.4888888888888889
        },
        "avg_similarity_score": 0.2649496240897376
    },
    {
        "instruction": "Create a Python program that reads a dictionary and prints all the keys in alphabetic order.\nExample input: {'name': 'Alice', 'age': 30, 'score': 85}",
        "output": "def print_sorted_keys(dictionary):\n    for key in sorted(dictionary.keys()):\n        print(key)\n\ninput_dict = {'name': 'Alice', 'age': 30, 'score': 85}\nprint_sorted_keys(input_dict)",
        "most_similar_instructions": {
            "Create a Python program that loops through a list and prints each element in reverse order.": 0.5,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4444444444444445,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.4390243902439025,
            "Create a Python program that reads a CSV file and calculates the average value of each column.": 0.4390243902439025,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.43243243243243246,
            "Write a Python program that reads a list of integers and returns the largest and smallest number in the list.\nExample input: [5, 10, 3, 8, 2]": 0.4313725490196078,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.4186046511627907,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.4186046511627907,
            "Please generate a Python program that reads a string from the user and removes all vowels from the string.": 0.4186046511627907,
            "Create a Python program that prints the current date and time.": 0.4
        },
        "avg_similarity_score": 0.21922997042682688
    },
    {
        "instruction": "Create a Python function that converts a string to title case.\nstring = \"this is an example\"",
        "output": "def convert_to_title_case(string):\n    return ' '.join(word.capitalize() for word in string.split())\n\nstring = \"this is an example\"\ntitle_case_string = convert_to_title_case(string)\nprint(title_case_string)",
        "most_similar_instructions": {
            "Write a Python function that converts a sentence into title case.": 0.5925925925925926,
            "Create a Python function that reverses a string and outputs the reversed string.\n\"This is a test string\"": 0.5882352941176471,
            "Design a Python function to convert a given string to title case.": 0.5714285714285715,
            "Write a Python script that converts a given string to uppercase.": 0.5185185185185185,
            "Create a Python program that takes a string as input and converts it to title case.\nInput: \"hello world\"": 0.5142857142857142,
            "Implement a Python program that converts a string to title case (each word starts with an uppercase letter).\nInput string: 'python code generator'": 0.5128205128205128,
            "Write a Python function that converts a given string to title case (capitalize the first letter of each word).\nwelcome to python programming": 0.5128205128205128,
            "Design a Python function that converts a string to lowercase and removes all punctuation marks.\n\"Hello, World!\"": 0.48484848484848486,
            "Write Python code to convert a regular string to a title case string.\nstring = \"python is amazing\"": 0.48484848484848486,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4666666666666667
        },
        "avg_similarity_score": 0.2307422062907859
    },
    {
        "instruction": "Can you suggest a completion for the following Python code that generates all possible permutations of a given string?\ndef generate_permutations(s):\n    '''This function generates all possible permutations of a given string.'''",
        "output": "from itertools import permutations\n\ndef generate_permutations(s):\n    '''This function generates all possible permutations of a given string.'''\n    return [''.join(p) for p in permutations(s)]",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.5151515151515151,
            "Suggest a completion for the following Python code.\nimport math\n\ndef calculate_area(radius):\n    '''This function calculates the area of a circle given the radius.'''": 0.4827586206896552,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.4590163934426229,
            "Suggest a completion for the following Python code.\ntext = 'Lorem ipsum dolor sit amet'\n\ndef count_words(text):\n    '''This function counts the number of words in a given text.'''": 0.45161290322580644,
            "Suggest a completion for the following Python code.\nimport random\n\ndef shuffle_list(lst):\n    '''This function will shuffle the elements of the given list randomly.'''": 0.44827586206896547,
            "Create a Python program that generates all possible combinations of a given string.": 0.43478260869565216,
            "Suggest a completion for the following Python code.\nnums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''": 0.43333333333333324,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.42857142857142855,
            "Suggest an implementation for the following Python function that reverses a given string.\ndef reverse_string(text):\n    return text[::-1]": 0.4150943396226416,
            "Suggest a completion for the following Python code.\nimport datetime\n\ndef get_current_date():\n    '''This function returns the current date.'''": 0.4150943396226416
        },
        "avg_similarity_score": 0.19981204114330273
    },
    {
        "instruction": "Create a Python script that checks if a given number is a perfect square. Ask the user to enter the number.",
        "output": "def is_perfect_square(n):\n    square_root = n ** 0.5\n    if int(square_root) ** 2 == n:\n        return True\n    else:\n        return False\n\nnumber = int(input(\"Enter a number: \"))\nis_square = is_perfect_square(number)\nprint(is_square)",
        "most_similar_instructions": {
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.6,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5714285714285714,
            "Write Python code that checks if a number is a perfect square.\nInput: 25": 0.5714285714285714,
            "Create a Python program to check if a number is a perfect square or not.": 0.5555555555555556,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.5500000000000002,
            "Create a Python function that checks if a given number is a palindrome or not. The function should return a boolean value.\n121": 0.5454545454545454,
            "Create a Python script that checks whether a given year is a leap year or not and prints the result.": 0.5365853658536585,
            "Design a Python function that checks if a given string is a pangram.\nstring = \"The quick brown fox jumps over the lazy dog\"": 0.5,
            "Can you create a Python function that checks whether a given number is a power of two?\nn = 16": 0.5,
            "Create a Python script that generates a multiplication table for a given number.\nNumber: 5": 0.5
        },
        "avg_similarity_score": 0.24767606815684023
    },
    {
        "instruction": "Generate a Python program where a user can input two numbers and the program will print the larger number.",
        "output": "num1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\nif num1 > num2:\n    print(\"Larger number:\", num1)\nelse:\n    print(\"Larger number:\", num2)",
        "most_similar_instructions": {
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4375,
            "Create a Python program that prompts the user for two numbers, divides the first number by the second number, and prints the result.": 0.42857142857142855,
            "Please generate a Python program that reads a string from the user and removes all vowels from the string.": 0.42105263157894735,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.4186046511627907,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.41025641025641024,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4,
            "Generate a Python program to search for a specific character in a string and return the index of the first occurrence.": 0.4,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.391304347826087,
            "Suggest a Python code snippet that reads a user input integer and checks if it is prime or not. Print the result.": 0.3902439024390244,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.380952380952381
        },
        "avg_similarity_score": 0.21058358377645556
    },
    {
        "instruction": "Generate a Python program where a user can input their age and the program will determine if they are eligible to vote or not (age >= 18).",
        "output": "age = int(input(\"Enter your age: \"))\n\nif age >= 18:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote.\")",
        "most_similar_instructions": {
            "Generate a Python program where a user can input two numbers and the program will print the larger number.": 0.5777777777777778,
            "Create a Python program that prompts the user to enter their age and checks if they are eligible to vote (age >= 18). Then, prints whether they are eligible to vote or not.": 0.5172413793103449,
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.4347826086956522,
            "Suggest a Python code snippet that reads a user input integer and checks if it is prime or not. Print the result.": 0.37500000000000006,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.3636363636363637,
            "Write a Python program that checks if two lists are equal or not.": 0.3589743589743589,
            "Please generate a Python program that reads a string from the user and removes all vowels from the string.": 0.35555555555555557,
            "Create a Python script that prompts the user to enter their age and prints whether they are a minor, an adult, or a senior citizen.": 0.35294117647058826,
            "Generate a Python program that takes two strings as input and checks if they are anagrams. If they are anagrams, print \"The strings are anagrams\", otherwise print \"The strings are not anagrams\".": 0.3448275862068966,
            "Create a Python program that simulates a coin flip. The program should randomly generate \"Heads\" or \"Tails\".": 0.3255813953488372
        },
        "avg_similarity_score": 0.17482025211461813
    },
    {
        "instruction": "How would you implement a Python script that converts a string to uppercase without using built-in functions like upper() or capitalize()?",
        "output": "def convert_to_uppercase(string):\n    uppercase_string = ''\n    for char in string:\n        if 'a' <= char <= 'z':\n            uppercase_char = chr(ord(char) - 32)\n        else:\n            uppercase_char = char\n        uppercase_string += uppercase_char\n    return uppercase_string\n\ntext = 'hello world'\nuppercase_text = convert_to_uppercase(text)\nprint(uppercase_text)",
        "most_similar_instructions": {
            "Implement a Python function that reverses a string without using any built-in functions or slicing.\nInput: \"hello world\"": 0.5853658536585366,
            "Write a Python script that converts a given string to uppercase.": 0.5454545454545455,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5405405405405405,
            "How can you write a Python script that converts a string to lowercase and removes any leading or trailing spaces?\nstring = \"   Hello, World!   \"": 0.4888888888888889,
            "How would you implement a Python script that generates a random password of length 8, using lowercase alphabets and digits?": 0.47619047619047616,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.46511627906976744,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.45,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.43902439024390244,
            "How can you convert a string to uppercase in Python?": 0.4375,
            "How can you implement a Python function to reverse a string?": 0.4242424242424242
        },
        "avg_similarity_score": 0.2025154899060208
    },
    {
        "instruction": "Explain how to use the \"random\" module in Python to generate a random integer between two given endpoints, inclusive.\nlower = 1\nupper = 10",
        "output": "You can use the \"random\" module in Python to generate a random integer between two given endpoints, inclusive, by using the \"randint()\" function. You need to import the module first using \"import random\", and then use the \"randint()\" function with the lower and upper endpoints as arguments. For example, to generate a random integer between 1 and 10, inclusive, you can use \"random.randint(1, 10)\".",
        "most_similar_instructions": {
            "Can you show an example of how to use the Python random module to generate a random number between 1 and 10, inclusive?": 0.5652173913043478,
            "Write Python code to generate a random integer between a given range.\n10, 50": 0.4864864864864865,
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.47619047619047616,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.4390243902439025,
            "Please provide a Python code snippet that demonstrates how to generate a random number between two given values.": 0.3902439024390244,
            "How can you generate a random integer between a given range in Python?": 0.3888888888888889,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.36734693877551017,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.358974358974359,
            "Write a Python program to generate a random number between a given range of numbers using the random module.\nRange: 1-100": 0.3555555555555555,
            "Can you demonstrate how to use the requests library in Python to make an HTTP GET request to a URL and retrieve the response?": 0.3404255319148936
        },
        "avg_similarity_score": 0.15110147105657837
    },
    {
        "instruction": "Explain how to use list comprehensions in Python to generate a list of squares for the numbers 1 to 10.",
        "output": "You can use list comprehensions in Python to generate a list of squares for the numbers 1 to 10 by using the following syntax: \"[x**2 for x in range(1, 11)]\". This expression generates a new list by iterating over the range of numbers from 1 to 10 and squaring each number.",
        "most_similar_instructions": {
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.5789473684210527,
            "Explain how to use the \"random\" module in Python to generate a random integer between two given endpoints, inclusive.\nlower = 1\nupper = 10": 0.5116279069767442,
            "How can you create a Python list that contains the squares of numbers from 1 to 10?": 0.4324324324324324,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.4285714285714286,
            "Can you show an example of how to use the Python random module to generate a random number between 1 and 10, inclusive?": 0.4186046511627907,
            "How can you generate a list of the first 10 Fibonacci numbers in Python?": 0.4117647058823529,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.37499999999999994,
            "Write a Python program to generate a list of prime numbers in a given range using a function.": 0.36842105263157887,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.3636363636363636,
            "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10": 0.3636363636363636
        },
        "avg_similarity_score": 0.18861863466883272
    },
    {
        "instruction": "Explain how to use the \"zip()\" function in Python to iterate over two lists simultaneously.\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']",
        "output": "You can use the \"zip()\" function in Python to iterate over two lists simultaneously by passing the lists as arguments to the \"zip()\" function. It will return an iterator that generates tuples containing the corresponding elements from both lists. For example, using \"list(zip(list1, list2))\" with list1 = [1, 2, 3] and list2 = ['a', 'b', 'c'] will generate [(1, 'a'), (2, 'b'), (3, 'c')].",
        "most_similar_instructions": {
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.45,
            "Explain how to use the \"random\" module in Python to generate a random integer between two given endpoints, inclusive.\nlower = 1\nupper = 10": 0.43478260869565216,
            "Explain how to use list comprehensions in Python to generate a list of squares for the numbers 1 to 10.": 0.37209302325581395,
            "Can you write a Python function that checks if two lists are equal?\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]": 0.3636363636363636,
            "Can you demonstrate how to use the requests library in Python to make an HTTP GET request to a URL and retrieve the response?": 0.3404255319148936,
            "Write a Python function to merge two sorted lists into one sorted list.\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8, 9]": 0.3404255319148936,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.3255813953488372,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.31818181818181823,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.31578947368421056,
            "How can you iterate over the key-value pairs of a dictionary in Python?\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}": 0.31111111111111117
        },
        "avg_similarity_score": 0.13554962991340655
    },
    {
        "instruction": "Explain how to use the \"enumerate()\" function in Python to iterate over a list and obtain both the index and the element in each iteration.\nlist1 = ['a', 'b', 'c']",
        "output": "You can use the \"enumerate()\" function in Python to iterate over a list and obtain both the index and the element in each iteration by passing the list as an argument to the \"enumerate()\" function. It returns an iterator that generates tuples containing the index and corresponding element for each iteration. For example, using \"for index, element in enumerate(list1):\" with list1 = ['a', 'b', 'c'] allows you to access the index and element variables in each iteration.",
        "most_similar_instructions": {
            "Explain how to use the \"zip()\" function in Python to iterate over two lists simultaneously.\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']": 0.576923076923077,
            "Explain how to use list comprehensions in Python to generate a list of squares for the numbers 1 to 10.": 0.40816326530612246,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.39285714285714285,
            "Can you demonstrate how to use the requests library in Python to make an HTTP GET request to a URL and retrieve the response?": 0.37735849056603776,
            "Explain how to use the \"random\" module in Python to generate a random integer between two given endpoints, inclusive.\nlower = 1\nupper = 10": 0.34615384615384615,
            "Can you show an example of how to use the Python re module to find all occurrences of a specific pattern in a string?": 0.339622641509434,
            "What Python code can be used to iterate through a dictionary and print both the key and value on separate lines?": 0.32,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.3181818181818182,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.31578947368421056,
            "Complete the following Python code to calculate the sum of all values in a dictionary.\ndata = {'a': 5, 'b': 3, 'c': 10}": 0.3137254901960784
        },
        "avg_similarity_score": 0.17227168301800672
    },
    {
        "instruction": "Explain how to use the \"filter()\" function in Python to selectively include elements from a list based on a condition.\nlist1 = [1, 2, 3, 4]",
        "output": "You can use the \"filter()\" function in Python to selectively include elements from a list based on a condition by passing the condition and the list as arguments to the \"filter()\" function. It returns an iterator that generates the elements from the list that satisfy the condition. For example, using \"list(filter(condition, list1))\" with condition and list1 = [1, 2, 3, 4] will generate a new list with the elements that satisfy the condition.",
        "most_similar_instructions": {
            "Explain how to use the \"zip()\" function in Python to iterate over two lists simultaneously.\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']": 0.5416666666666667,
            "Explain how to use the \"enumerate()\" function in Python to iterate over a list and obtain both the index and the element in each iteration.\nlist1 = ['a', 'b', 'c']": 0.4444444444444445,
            "Explain how to use list comprehensions in Python to generate a list of squares for the numbers 1 to 10.": 0.4444444444444445,
            "Explain how to use the \"random\" module in Python to generate a random integer between two given endpoints, inclusive.\nlower = 1\nupper = 10": 0.41666666666666663,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.40909090909090906,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.4081632653061225,
            "Write a Python function to check if a list contains a sublist.\nList: [1, 2, 3, 4, 5], Sublist: [2, 3]": 0.391304347826087,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.391304347826087,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.391304347826087,
            "Can you write a Python function that removes duplicate elements from a list and returns a new list without duplicates?\n[1, 2, 3, 3, 4, 5, 5, 6]": 0.3773584905660378
        },
        "avg_similarity_score": 0.16108577241617414
    },
    {
        "instruction": "Explain how to use the \"sorted()\" function in Python to sort a list of strings in descending order.\nlist1 = ['apple', 'banana', 'cherry']",
        "output": "You can use the \"sorted()\" function in Python to sort a list of strings in descending order by passing the list as an argument to the \"sorted()\" function with the \"reverse=True\" parameter. It returns a new list with the elements sorted in descending order. For example, using \"sorted(list1, reverse=True)\" with list1 = ['apple', 'banana', 'cherry'] will generate ['cherry', 'banana', 'apple'].",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5555555555555556,
            "Explain how to use the \"filter()\" function in Python to selectively include elements from a list based on a condition.\nlist1 = [1, 2, 3, 4]": 0.5106382978723404,
            "Explain how to use the \"enumerate()\" function in Python to iterate over a list and obtain both the index and the element in each iteration.\nlist1 = ['a', 'b', 'c']": 0.5098039215686274,
            "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']": 0.4888888888888889,
            "Write Python code to sort a list of strings alphabetically.\nlst = [\"banana\", \"apple\", \"cherry\", \"blueberry\"]": 0.4864864864864865,
            "Complete the following Python code to sort a list of strings in descending order.\ndef sort_strings(strings):\n    strings.sort(reverse=True)\n    return strings": 0.4782608695652174,
            "Implement a Python function to sort a given list of strings in alphabetical order.\nOriginal List: ['banana', 'apple', 'orange', 'grape']": 0.47619047619047616,
            "Explain how to use list comprehensions in Python to generate a list of squares for the numbers 1 to 10.": 0.47619047619047616,
            "Write a Python program to sort a dictionary by values in descending order.\n{'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}": 0.46511627906976744,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.46153846153846156
        },
        "avg_similarity_score": 0.16710074578037024
    },
    {
        "instruction": "Write a Python program that finds and prints the maximum element in a list.\n[12, 45, 23, 76, 87, 34, 65]",
        "output": "def find_max_element(numbers):\n    return max(numbers)\n\nnumbers = [12, 45, 23, 76, 87, 34, 65]\nprint(find_max_element(numbers))",
        "most_similar_instructions": {
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.5789473684210527,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5714285714285714,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5555555555555556,
            "Write a Python program to count the frequency of each element in a given list.": 0.5,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.5,
            "Write a Python program that finds the length of the longest word in a given string.": 0.4864864864864864,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.4736842105263158,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.47058823529411764,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4615384615384615,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4571428571428571
        },
        "avg_similarity_score": 0.24302721119556606
    },
    {
        "instruction": "Write a Python script to find the minimum of three numbers.\nnumbers = [12, 25, 8]",
        "output": "numbers = [12, 25, 8]\nminimum = min(numbers)\nprint(minimum)",
        "most_similar_instructions": {
            "Can you write a Python program to find the maximum of three numbers using a lambda function?": 0.5625,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.5142857142857143,
            "Write Python code to find the greatest common divisor (GCD) of two numbers.": 0.5,
            "Create a Python function to find the maximum value in a list of numbers.": 0.4827586206896552,
            "Create a Python program to find the first n Fibonacci numbers.": 0.4615384615384615,
            "Write a Python program to find the maximum product of two integers in a list.\n[2, 4, 6, 8, 10]": 0.4571428571428572,
            "Please create a Python function to find the average of numbers in a given list.\n[5, 2, 9, 12, 7]": 0.4571428571428572,
            "Generate a Python function to find the number of prime numbers less than a given number.": 0.45161290322580644,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4444444444444444,
            "Write a Python function to find the largest common prefix of two strings.\nstring1 = \"preheat\"\nstring2 = \"prefix\"": 0.43749999999999994
        },
        "avg_similarity_score": 0.22381441064862792
    },
    {
        "instruction": "Implement a Python script that converts a list of strings to uppercase.\nStrings: ['apple', 'banana', 'cherry']",
        "output": "strings = ['apple', 'banana', 'cherry']\nuppercase_strings = [string.upper() for string in strings]\nprint(uppercase_strings)",
        "most_similar_instructions": {
            "Write a Python script that converts a given string to uppercase.": 0.5925925925925926,
            "Write a Python program that converts a list of strings to a single string by concatenating them with a specified delimiter.\nlist_of_strings = ['apple', 'banana', 'cherry']\ndelimiter = ', '": 0.5909090909090908,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5806451612903225,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5641025641025642,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.5555555555555556,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.5454545454545455,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.5116279069767441,
            "Implement a Python function that sorts a list of strings based on the length of each string in descending order.\nInput: ['apple', 'banana', 'kiwi', 'grapes']": 0.48780487804878053,
            "Please provide a Python function that finds the longest word in a given list of words.\nwords = ['apple', 'banana', 'cherry', 'date']": 0.4864864864864864,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.48484848484848486
        },
        "avg_similarity_score": 0.23276279464551247
    },
    {
        "instruction": "How would you write a Python program to check if a given number is positive, negative, or zero?\nnumber = -7",
        "output": "number = -7\n\nif number > 0:\n    print(\"Positive\")\nelif number < 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")",
        "most_similar_instructions": {
            "How would you implement a function in Python to check if a given word is a palindrome or not?\nracecar": 0.6,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.6,
            "Create a Python program to check if a number is a perfect square or not.": 0.5714285714285715,
            "What code would you write to check if a given number is a perfect square in Python?\nnumber = 16": 0.5641025641025641,
            "Write Python code to check if a given list is empty or not.": 0.5454545454545455,
            "Write a Python function that checks if a given number is prime.\nNumber: 17": 0.5294117647058824,
            "Write a Python function to check if a given year is a leap year.": 0.5294117647058824,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.5263157894736842,
            "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.": 0.5106382978723405,
            "How can you write a Python program to convert a binary number to decimal?\nbinary = '1010'": 0.5
        },
        "avg_similarity_score": 0.23011071019490273
    },
    {
        "instruction": "Write a Python program that counts the frequency of each word in a given list of sentences and prints the result.\nsentences = ['The cat ate the mouse', 'The dog chased the cat', 'The mouse ran away']",
        "output": "def count_word_frequency(sentences):\n    word_frequency = {}\n    for sentence in sentences:\n        words = sentence.split()\n        for word in words:\n            if word in word_frequency:\n                word_frequency[word] += 1\n            else:\n                word_frequency[word] = 1\n    return word_frequency\n\nsentence_list = ['The cat ate the mouse', 'The dog chased the cat', 'The mouse ran away']\nfrequency = count_word_frequency(sentence_list)\nprint(\"Word frequency:\", frequency)",
        "most_similar_instructions": {
            "Write a Python script that counts the frequency of each word in a given text and prints the result.\n\"You are the creator of your own destiny\"": 0.5714285714285715,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5333333333333333,
            "Write a Python program to count the frequency of each element in a given list.": 0.47058823529411764,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.4642857142857143,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.45614035087719296,
            "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.": 0.4482758620689656,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.43333333333333335,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.43076923076923074,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.42857142857142855,
            "Write a Python program that finds the length of the longest word in a given string.": 0.42307692307692313
        },
        "avg_similarity_score": 0.22381575401645973
    },
    {
        "instruction": "Suggest a completion for the following Python code to find the maximum of a list of numbers.\nnumbers = [12, 45, 67, 89, 34]\nmax_number =",
        "output": "numbers = [12, 45, 67, 89, 34]\nmax_number = max(numbers)\nprint(max_number)",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.5333333333333333,
            "Create a Python function to find the maximum value in a list of numbers.": 0.5128205128205129,
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.5,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.4999999999999999,
            "Suggest a completion for the following python code that finds the maximum value in a list of integers.\ndef find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value": 0.4923076923076923,
            "Suggest a completion for the following python code.": 0.48484848484848486,
            "Suggest a completion for the following python code.\ndef calculate_average(numbers):\n    '''This function takes a list of numbers as input and returns their average.'''": 0.48,
            "Generate a valid Python code snippet to find the largest number in a given list.\n[18, 32, 12, 45, 67, 23]": 0.4782608695652174,
            "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]": 0.4782608695652174,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.4761904761904762
        },
        "avg_similarity_score": 0.2169015101451577
    },
    {
        "instruction": "Suggest a completion for the following Python code to check if all the elements of a list are even.\nnumbers = [2, 4, 6, 8, 7]\nall_even =",
        "output": "numbers = [2, 4, 6, 8, 7]\nall_even = all(num % 2 == 0 for num in numbers)\nprint(all_even)",
        "most_similar_instructions": {
            "Write a Python function to check if all elements in a list are unique.\nnumbers = [5, 3, 8, 2, 1, 7]": 0.5416666666666666,
            "Write a Python function that checks whether all elements in a list are even numbers.\nlist = [2, 4, 6, 8, 10]": 0.5416666666666666,
            "Suggest a completion for the following Python code to find the maximum of a list of numbers.\nnumbers = [12, 45, 67, 89, 34]\nmax_number =": 0.5384615384615384,
            "Suggest a Python code to remove all the duplicate elements from a list.": 0.5,
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.48387096774193544,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.48,
            "Generate a Python code snippet to calculate the average of a list of numbers.\n[4, 8, 12, 16, 20]": 0.47826086956521735,
            "Write a Python program to find the maximum product of two integers in a list.\n[2, 4, 6, 8, 10]": 0.46808510638297873,
            "Suggest a completion for the following Python code.\nimport random\n\ndef shuffle_list(lst):\n    '''This function will shuffle the elements of the given list randomly.'''": 0.4615384615384615,
            "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]": 0.4583333333333333
        },
        "avg_similarity_score": 0.21792981770547012
    },
    {
        "instruction": "Create a Python class called \"Circle\" with an attribute \"radius\". Write a method to calculate the circumference of the circle. Instantiate the class and calculate the circumference of a circle with radius 5.",
        "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_circumference(self):\n        return 2 * 3.14 * self.radius\n\ncircle = Circle(5)\ncircumference = circle.calculate_circumference()\nprint(circumference)",
        "most_similar_instructions": {
            "Write a Python class called \"Circle\" with an attribute called \"radius\". The class should have a method called \"calculate_area\" that returns the area of the circle.": 0.5333333333333333,
            "Create a Python class named \"Circle\" with attribute radius. Implement methods to compute the area and circumference of the circle.": 0.5283018867924527,
            "Create a Python class called Circle that takes the radius as a parameter and has a method to calculate the area of the circle.": 0.5263157894736842,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.5161290322580646,
            "Create a Python class called \"Circle\" that has one attribute: radius. Implement methods called \"area\" that calculates and returns the area of the circle, and \"circumference\" that calculates and returns the circumference of the circle.": 0.5,
            "Create a Python class called `Circle` that has a radius attribute and a method called `calculate_area` that returns the area of the circle (pi * radius^2). Use the math module to access the constant pi.": 0.463768115942029,
            "Design a Python class to represent a circle with attributes like radius. Include methods to calculate and return the circumference and area of the circle.": 0.44827586206896547,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.4230769230769231,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4210526315789474,
            "Write a Python class called Rectangle with a constructor that takes the length and width as parameters. Add a method to the class to calculate and return the area of the rectangle.\n4, 5": 0.41791044776119407
        },
        "avg_similarity_score": 0.2016667613184093
    },
    {
        "instruction": "Implement a Python class that represents a stack data structure using a list. The stack should have push, pop, and peek methods.",
        "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.stack.pop()\n        else:\n            return 'Stack is empty'\n\n    def peek(self):\n        if not self.is_empty():\n            return self.stack[-1]\n        else:\n            return 'Stack is empty'\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\nstack = Stack()\nstack.push(5)\nstack.push(10)\nprint(stack.peek())\nprint(stack.pop())\nprint(stack.is_empty())",
        "most_similar_instructions": {
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.5555555555555556,
            "Create a Python module to implement a stack data structure using a list.": 0.5142857142857142,
            "Implement a Python class that represents a deck of playing cards. The class should have methods for shuffling and dealing cards.": 0.5116279069767442,
            "Implement a Python class that represents a stack. The class should have methods to push an element onto the stack, pop an element from the stack, and check if the stack is empty.": 0.5090909090909091,
            "How can you implement a stack using a Python list? Write the code for push, pop, and peek operations of a stack.": 0.5,
            "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?": 0.46153846153846156,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.4583333333333333,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.45454545454545453,
            "Design a Python class that represents a student. The class should have attributes to store the student's name, age, and grades.": 0.45454545454545453,
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.44897959183673464
        },
        "avg_similarity_score": 0.21249000282169236
    },
    {
        "instruction": "In Python, how can you randomly select an element from a given list?\nmy_list = ['apple', 'banana', 'orange', 'mango']",
        "output": "import random\n\nmy_list = ['apple', 'banana', 'orange', 'mango']\nrandom_element = random.choice(my_list)\nprint(random_element)",
        "most_similar_instructions": {
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.4864864864864865,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.42857142857142855,
            "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"": 0.39999999999999997,
            "How can you remove duplicate elements from a list in Python?": 0.39999999999999997,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.391304347826087,
            "Write a Python function that removes the first occurrence of a specified element from a given list.\n['apple', 'banana', 'cherry', 'dragonfruit'], 'banana'": 0.3902439024390244,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.380952380952381,
            "How would you remove an item from a Python list by its index?": 0.37499999999999994,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.358974358974359,
            "Implement a Python function to sort a given list of strings in alphabetical order.\nOriginal List: ['banana', 'apple', 'orange', 'grape']": 0.358974358974359
        },
        "avg_similarity_score": 0.14997352952604556
    },
    {
        "instruction": "How can you sort the elements of a list in descending order using Python?\nmy_list = [4, 1, 6, 3, 8]",
        "output": "my_list = [4, 1, 6, 3, 8]\nmy_list.sort(reverse=True)\nprint(my_list)",
        "most_similar_instructions": {
            "How can you sort a list of strings in alphabetical order using Python?": 0.588235294117647,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.5365853658536585,
            "How can you iterate over the key-value pairs of a dictionary in Python?\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}": 0.5116279069767442,
            "How can you find the length of a string using Python?": 0.5,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.5,
            "How can you remove duplicate elements from a list in Python?": 0.5,
            "How can you sort a dictionary by its values in descending order?": 0.4848484848484849,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.46511627906976744,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.45,
            "How can you extract all the odd numbers from a given list and store them in a new list?\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]": 0.44
        },
        "avg_similarity_score": 0.1688311873970823
    },
    {
        "instruction": "In Python, how can you remove all the elements in a list at once?\nmy_list = [1, 2, 3, 4, 5]",
        "output": "my_list = [1, 2, 3, 4, 5]\nmy_list.clear()\nprint(my_list)",
        "most_similar_instructions": {
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.6,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.5853658536585366,
            "How can you extract all the odd numbers from a given list and store them in a new list?\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]": 0.56,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.5454545454545454,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.5238095238095238,
            "How can you sort the elements of a list in descending order using Python?\nmy_list = [4, 1, 6, 3, 8]": 0.5238095238095238,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.5238095238095238,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.5,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.5,
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.5
        },
        "avg_similarity_score": 0.18047273392051694
    },
    {
        "instruction": "Write a Python function that takes a string as input and counts the number of occurrences of a specific substring within the string.\nstring = \"hello hello world\"\nsubstring = \"hello\"",
        "output": "def count_occurrences(string, substring):\n    count = string.count(substring)\n    return count\n\nstring = \"hello hello world\"\nsubstring = \"hello\"\noccurrences = count_occurrences(string, substring)\nprint(occurrences)",
        "most_similar_instructions": {
            "Implement a Python function named \"count_vowels\" that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.": 0.5714285714285714,
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.5660377358490567,
            "Write a Python program that takes a string as input and reverses the order of the words in the string.\nInput: \"Hello World! Python is amazing\"\nOutput: \"amazing is Python World! Hello\"": 0.5573770491803278,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.5454545454545455,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5416666666666666,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.5306122448979592,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5217391304347826,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.52,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.5185185185185185,
            "Write a Python function that takes a string as input and removes all the punctuation characters from the string.\n\"This is a sentence! How are you?\"": 0.509090909090909
        },
        "avg_similarity_score": 0.2478551091326743
    },
    {
        "instruction": "How can you write a Python function that generates a random number between two given integers?\nmin_num = 1\nmax_num = 10",
        "output": "import random\n\ndef generate_random_number(min_num, max_num):\n    return random.randint(min_num, max_num)\nmin_num = 1\nmax_num = 10\nprint(generate_random_number(min_num, max_num))",
        "most_similar_instructions": {
            "Create a Python program that generates a random number between two given numbers.\nlower_limit = 1\nupper_limit = 10": 0.5853658536585366,
            "Can you provide a Python code snippet that generates a random integer between a given minimum and maximum value (inclusive)?\nmin_value = 1\nmax_value = 10": 0.5833333333333334,
            "Can you write a Python code that generates a random number between a given range? For example, generate a random number between 1 and 100.": 0.5531914893617023,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.55,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.55,
            "How can you create a Python function that generates a random list of numbers within a specified range?\nrange_start = 1\nrange_end = 10": 0.5217391304347826,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.5000000000000001,
            "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?": 0.4878048780487805,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.4782608695652174,
            "How can you write a Python function that checks if all elements in a given list are equal?\nlst = [1, 1, 1, 1, 1]": 0.4782608695652174
        },
        "avg_similarity_score": 0.2372877823991564
    },
    {
        "instruction": "Create a Python function that takes a list of names and returns the number of names that start with the letter \"A\".\n[\"Anna\", \"John\", \"Alice\", \"Adam\"]",
        "output": "def count_names_starting_with_A(names):\n    count = 0\n    for name in names:\n        if name[0].lower() == 'a':\n            count += 1\n    return count\n\nnames = [\"Anna\", \"John\", \"Alice\", \"Adam\"]\nprint(count_names_starting_with_A(names))",
        "most_similar_instructions": {
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5306122448979592,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5106382978723405,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5084745762711863,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.5,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.4999999999999999,
            "Create a Python program that takes a list of strings as input and returns the number of occurrences of a given word in the list.\n['apple', 'banana', 'cherry', 'banana', 'banana']\n'banana'": 0.4912280701754386,
            "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.": 0.49056603773584906,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4897959183673469,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.47826086956521735,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.47058823529411764
        },
        "avg_similarity_score": 0.24993439228564943
    },
    {
        "instruction": "How would you create a Python dictionary from two lists, one containing the keys and the other containing the values?\nkeys = ['name', 'age', 'country']\nvalues = ['John', 25, 'USA']",
        "output": "keys = ['name', 'age', 'country']\nvalues = ['John', 25, 'USA']\ndictionary = dict(zip(keys, values))\nprint(dictionary)",
        "most_similar_instructions": {
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.5925925925925927,
            "Write a Python script that creates a dictionary from two lists, where one list contains the keys and the other list contains the values.\nkeys = [\"apple\", \"banana\", \"cherry\"]\nvalues = [3, 6, 9]": 0.5333333333333333,
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.41860465116279066,
            "Write a Python program to create a dictionary from two lists, where the keys come from one list and the values come from the other list.": 0.4074074074074074,
            "Create a Python dictionary with keys \"name\", \"age\", and \"location\" and values \"John\", 30, and \"New York\" respectively.": 0.391304347826087,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.375,
            "Create a Python function that concatenates two lists into one and returns the concatenated list.": 0.37209302325581395,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.3673469387755102,
            "How would you implement a Python function that checks if two lists are equal (have the same elements in the same order)?": 0.36000000000000004,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.35714285714285715
        },
        "avg_similarity_score": 0.16684504875409464
    },
    {
        "instruction": "How would you create a Python tuple with elements of different data types?\nExample: 1, 'apple', True",
        "output": "my_tuple = (1, 'apple', True)\nprint(my_tuple)",
        "most_similar_instructions": {
            "How would you create a tuple in Python containing the numbers 1, 2, and 3?": 0.43749999999999994,
            "How would you create a dictionary in Python with keys as numbers from 1 to 5 and values as their squares?": 0.42105263157894735,
            "How can you create a Python list that contains the squares of numbers from 1 to 10?": 0.4117647058823529,
            "How would you create an empty list in Python?": 0.3846153846153846,
            "How would you create a dictionary that represents a person with attributes like name, age, and occupation? Provide an example.": 0.37837837837837834,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.36842105263157887,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.358974358974359,
            "How would you write a Python program to convert a list of strings to a single string with all the elements joined?": 0.358974358974359,
            "How would you implement a Python script that parses XML data and extracts specific elements from it?": 0.35294117647058826,
            "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?": 0.35294117647058826
        },
        "avg_similarity_score": 0.16882969544029497
    },
    {
        "instruction": "Design a Python function that takes a list of numbers and returns the largest number in the list.\n[10, 2, 33, 4, 55, 6, 77, 8, 99]",
        "output": "def get_largest_number(lst):\n    return max(lst)\n\nnumbers = [10, 2, 33, 4, 55, 6, 77, 8, 99]\nlargest_number = get_largest_number(numbers)\nprint(largest_number)",
        "most_similar_instructions": {
            "Write a Python program that reads a list of integers and returns the largest and smallest number in the list.\nExample input: [5, 10, 3, 8, 2]": 0.5925925925925926,
            "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.": 0.5925925925925926,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5833333333333334,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.5384615384615384,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.5384615384615384,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5333333333333333,
            "Write a Python function that checks whether all elements in a list are even numbers.\nlist = [2, 4, 6, 8, 10]": 0.5,
            "Create a Python function that takes a list of names and returns the number of names that start with the letter \"A\".\n[\"Anna\", \"John\", \"Alice\", \"Adam\"]": 0.49056603773584906,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.4897959183673469,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.4888888888888889
        },
        "avg_similarity_score": 0.2508204284605687
    },
    {
        "instruction": "Can you suggest a way to convert a string to title case using built-in Python functions?",
        "output": "You can use the built-in function \"title()\" to convert a string to title case in Python. For example: str.title()",
        "most_similar_instructions": {
            "How can you convert a string to uppercase in Python?": 0.5925925925925927,
            "Design a Python function to convert a given string to title case.": 0.5517241379310345,
            "Can you generate Python code to convert a string to lowercase?": 0.5,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.48780487804878053,
            "Write Python code to convert a regular string to a title case string.\nstring = \"python is amazing\"": 0.47058823529411764,
            "How would you implement a Python script that converts a string to uppercase without using built-in functions like upper() or capitalize()?": 0.46153846153846156,
            "Write a Python program to convert a string of lowercase characters to uppercase characters using the built-in string method.\nstring = 'hello world!'": 0.45,
            "Provide a code snippet to reverse a string in Python.": 0.4444444444444445,
            "Suggest a Python code snippet to convert a given string to uppercase.\nString: \"hello world\"": 0.43749999999999994,
            "Suggest a way to format a floating-point number in a string representation with exactly 2 decimal places in Python.": 0.4324324324324324
        },
        "avg_similarity_score": 0.16169952667812915
    },
    {
        "instruction": "If you want to find and replace a specific word in a string, how would you do it in Python?",
        "output": "You can use the replace() function in Python to find and replace a specific word in a string. For example: str.replace(\"old_word\", \"new_word\")",
        "most_similar_instructions": {
            "Generate a Python script to find and replace a specific word in a given string.": 0.5714285714285715,
            "You want to generate a random password of length \"n\" using Python. How would you do it?": 0.48648648648648646,
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.36842105263157887,
            "Can you show an example of how to use the Python re module to find all occurrences of a specific pattern in a string?": 0.3636363636363636,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.358974358974359,
            "Suggest a way to format a floating-point number in a string representation with exactly 2 decimal places in Python.": 0.35,
            "How would you create an empty list in Python?": 0.3448275862068966,
            "How can you write a Python program to find and replace a specific element with a new element in a given list?\nnumbers = [5, 3, 8, 2, 1, 7]\nreplace = 3\nnew_element = 10": 0.33333333333333337,
            "How can you convert a string to uppercase in Python?": 0.3333333333333333,
            "Provide a code snippet to reverse a string in Python.": 0.3333333333333333
        },
        "avg_similarity_score": 0.1443797912380369
    },
    {
        "instruction": "Create a Python program that checks if a given list of strings contains any duplicates.\nList: ['apple', 'banana', 'cherry', 'apple']",
        "output": "def has_duplicates(strings):\n    unique_strings = set(strings)\n    return len(unique_strings) < len(strings)\n\ninput_list = ['apple', 'banana', 'cherry', 'apple']\nresult = has_duplicates(input_list)\nprint(result)",
        "most_similar_instructions": {
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.6,
            "Create a Python program that sorts a list of strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana']": 0.5945945945945946,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.5714285714285715,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5581395348837209,
            "Implement a Python script that converts a list of strings to uppercase.\nStrings: ['apple', 'banana', 'cherry']": 0.5555555555555556,
            "Create a Python function that checks if a list is empty. Print the result.\nlist = []": 0.5142857142857143,
            "Create a Python program that finds the longest common prefix among a list of strings.": 0.5142857142857143,
            "Write a Python program that checks if a given string contains only numeric characters.\n\"12345\"": 0.5142857142857143,
            "Write a Python program to remove duplicates from a list.\n['apple', 'banana', 'cherry', 'banana', 'apple']": 0.5142857142857143,
            "Create a Python program that takes a list of integers as input and removes all duplicates from the list.": 0.5128205128205129
        },
        "avg_similarity_score": 0.239287378105278
    },
    {
        "instruction": "Complete the following Python script to remove all duplicates from a list while preserving the order.\ndef remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\ninput_list = [1, 2, 3, 3, 4, 2, 5, 6, 5]",
        "output": "def remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\ninput_list = [1, 2, 3, 3, 4, 2, 5, 6, 5]\nunique_list = remove_duplicates(input_list)\nprint(unique_list)",
        "most_similar_instructions": {
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.39506172839506176,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.38356164383561636,
            "Write a Python script that creates a new list by removing all the duplicates from a given list.\nList: [1, 2, 3, 3, 4, 4, 5]": 0.3589743589743589,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.3466666666666667,
            "Write a program to remove all occurrences of a given element from a list in Python.\n[1, 2, 3, 2, 4, 1, 5, 6, 5, 7, 7], element: 2": 0.345679012345679,
            "Write a Python function to remove all duplicates from a list while preserving the original order of elements.": 0.3428571428571429,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.34210526315789475,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.33707865168539325,
            "Complete the function below to remove all duplicate elements from a given list.\ndef remove_duplicates(lst):\n    '''This function should remove all duplicate elements from the list and return the updated list.'''": 0.33333333333333337,
            "In Python, how can you remove all the elements in a list at once?\nmy_list = [1, 2, 3, 4, 5]": 0.3287671232876712
        },
        "avg_similarity_score": 0.12871873282091792
    },
    {
        "instruction": "Fill in the missing parts of the following Python code snippet to sort a list in descending order.\ninput_list = [5, 2, 8, 1]",
        "output": "input_list = [5, 2, 8, 1]\nsorted_list = sorted(input_list, reverse=True)\nprint(sorted_list)",
        "most_similar_instructions": {
            "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]": 0.5581395348837209,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.5454545454545454,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.5365853658536585,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.4888888888888889,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.4736842105263159,
            "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']": 0.4680851063829787,
            "Complete the following Python code to sort a list of strings in descending order.\ndef sort_strings(strings):\n    strings.sort(reverse=True)\n    return strings": 0.4583333333333333,
            "Can you create a Python script that sorts a list of integers in descending order?\n[5, 2, 8, 1, 9]": 0.45454545454545453,
            "Complete the following Python code to sort a list of names in ascending order.\nnames = [\"Emma\", \"Olivia\", \"Liam\", \"Noah\", \"Isabella\", \"Sophia\", \"Mason\"]\nnames_sorted = sorted(names)": 0.4,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.39999999999999997
        },
        "avg_similarity_score": 0.1742021593921676
    },
    {
        "instruction": "Design a Python function that finds the mode (most frequent element) in a list of integers.\ninput_list = [1, 3, 2, 3, 4, 2, 5, 5, 3]",
        "output": "from collections import Counter\n\ndef find_mode(input_list):\n    count = Counter(input_list)\n    mode, frequency = count.most_common(1)[0]\n    return mode\n\ninput_list = [1, 3, 2, 3, 4, 2, 5, 5, 3]\nmode_value = find_mode(input_list)\nprint(mode_value)",
        "most_similar_instructions": {
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5652173913043478,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.5652173913043478,
            "Write a Python function that finds and returns the mode(s) of a given list of integers. If there are multiple modes, return them in ascending order.\nInput: [1, 2, 3, 2, 4, 2]": 0.5573770491803278,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5416666666666666,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.5384615384615384,
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5283018867924528,
            "Write a Python function that finds the sum of all even numbers in a given list of integers.\n[2, 7, 4, 9, 6]": 0.52,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.52,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5106382978723405,
            "Implement a Python function that finds the index of the first occurrence of an element in a list.\n[5, 2, 8, 3, 1, 2, 5, 8, 2]\n2": 0.509090909090909
        },
        "avg_similarity_score": 0.2337660487837288
    },
    {
        "instruction": "Create a Python program that finds the maximum and minimum values from a list of numbers and returns them as a tuple.\nNumbers: [4, 7, 2, 9, 1, 5]",
        "output": "def find_min_max(numbers):\n    minimum = min(numbers)\n    maximum = max(numbers)\n    return (minimum, maximum)\n\nnumbers = [4, 7, 2, 9, 1, 5]\nmin_max = find_min_max(numbers)\nprint(min_max)",
        "most_similar_instructions": {
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.5882352941176471,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5454545454545454,
            "Write a Python function that finds the second smallest and second largest values in a given list and returns them as a tuple (second_smallest, second_largest).": 0.5357142857142857,
            "Create a Python program that calculates and prints the sum of all elements in a given list of numbers.\nnumbers = [5, 2, 9, 1, 3]": 0.5185185185185185,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5098039215686274,
            "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]": 0.49122807017543857,
            "Can you write a Python program that finds the largest and smallest numbers in a list and prints them?\n[10, -5, 8, 4, 9]": 0.49056603773584906,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.48148148148148145,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.4782608695652174,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.45833333333333337
        },
        "avg_similarity_score": 0.24253431009883752
    },
    {
        "instruction": "Create a Python program that converts a list of integers into a single integer by concatenating the digits (without using any external library or functions).\nNumbers: [1, 2, 3, 4, 5]",
        "output": "def convert_to_integer(numbers):\n    result = ''\n    for num in numbers:\n        result += str(num)\n    return int(result)\n\nnumbers = [1, 2, 3, 4, 5]\nconverted_integer = convert_to_integer(numbers)\nprint(converted_integer)",
        "most_similar_instructions": {
            "Write Python code that converts a list of integers into a comma-separated string.\nnumbers = [1, 2, 3, 4, 5]": 0.5882352941176471,
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.5200000000000001,
            "Create a Python function that takes a list of integers as input and returns a new list containing only the even numbers from the original list.\nList: [1, 2, 3, 4, 5, 6]": 0.5,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.48000000000000004,
            "Write a Python function that accepts two lists of integers and merges them into a single list, removing any duplicates.\n[1, 2, 3, 4], [3, 4, 5, 6]": 0.47457627118644063,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.47058823529411764,
            "Create a Python program that accepts a list of numbers and removes all duplicate numbers, keeping only the unique ones.\n[1, 2, 2, 3, 4, 4, 5, 5, 6]": 0.4666666666666667,
            "Create a Python program that appends a new element to the end of a list.\nSample list: [1, 2, 3, 4]\nElement to append: 5": 0.46428571428571425,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.46428571428571425,
            "Write a Python script that takes a list of integers as input and prints each number multiplied by 2.\nInput: [1, 2, 3, 4, 5]": 0.46428571428571425
        },
        "avg_similarity_score": 0.2222626885296759
    },
    {
        "instruction": "Please write a Python script that creates a simple calculator program. The program should ask the user to enter two numbers, and then offer a menu with options to add, subtract, multiply, or divide the numbers.",
        "output": "def add_numbers(a, b):\n    return a + b\n\ndef subtract_numbers(a, b):\n    return a - b\n\ndef multiply_numbers(a, b):\n    return a * b\n\ndef divide_numbers(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return \"Cannot divide by zero\"\n\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nchoice = int(input(\"Enter your choice: \"))\n\nif choice == 1:\n    result = add_numbers(num1, num2)\nelif choice == 2:\n    result = subtract_numbers(num1, num2)\nelif choice == 3:\n    result = multiply_numbers(num1, num2)\nelif choice == 4:\n    result = divide_numbers(num1, num2)\nelse:\n    result = \"Invalid choice\"\n\nprint(\"Result: \", result)",
        "most_similar_instructions": {
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.4827586206896552,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.4444444444444444,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.411764705882353,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.40625000000000006,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.4,
            "Write a Python script that prompts the user to enter an integer and checks whether it is positive, negative, or zero. Print the corresponding message.": 0.39344262295081966,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.39285714285714285,
            "Implement a Python script that prompts the user to input a list of numbers (separated by commas) and then calculates the sum of all the numbers.": 0.3870967741935484,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.3859649122807018,
            "Create a Python script that checks if a given number is a perfect square. Ask the user to enter the number.": 0.3859649122807018
        },
        "avg_similarity_score": 0.20570803394527773
    },
    {
        "instruction": "Complete the following Python code to swap the values of two variables, a and b.\na = 5\nb = 10\n# Swap the values of a and b\n\nprint(\"After swapping:\")\nprint(\"a =\", a)\nprint(\"b =\", b)",
        "output": "a = 5\nb = 10\n# Swap the values of a and b\ntemp = a\na = b\nb = temp\n\nprint(\"After swapping:\")\nprint(\"a =\", a)\nprint(\"b =\", b)",
        "most_similar_instructions": {
            "Complete the following Python code to calculate the sum of all values in a dictionary.\ndata = {'a': 5, 'b': 3, 'c': 10}": 0.456140350877193,
            "Write a Python program to swap the values of two variables.\nx = 5\ny = 10": 0.4,
            "What is the Python code to find the index of the first occurrence of a given element in a list?\nlist = ['a', 'b', 'c', 'd']\nelement = 'c'": 0.3870967741935484,
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.36923076923076925,
            "Complete the following Python code to find the index of the first occurrence of a given value in a list.\nnumbers = [1, 3, 5, 7, 9, 3, 4, 5]\nvalue = 3": 0.3636363636363636,
            "Complete the following Python code to find the minimum and maximum values from a list.\nnumbers = [4, 2, 7, 5, 1]": 0.3571428571428571,
            "Add error handling to the following Python code to catch any ZeroDivisionError and print \"Cannot divide by zero!\" instead of crashing the program.\ndef divide_numbers(a, b):\n    result = a / b\n    print(result)": 0.3235294117647059,
            "Write Python code to calculate and print the area of a rectangle given its width and height.\nwidth: 5, height: 10": 0.3214285714285714,
            "Complete the following Python code to find the maximum number in a list.\nnums = [10, 25, 6, 32, 18, 14]\nmax_num = ?": 0.31578947368421045,
            "Please complete the following Python function to count the occurrence of each element in a list.\ndef count_occurrences(numbers):\n    # TODO: Implement the function": 0.30508474576271183
        },
        "avg_similarity_score": 0.16733470093206526
    },
    {
        "instruction": "Write a Python script that creates a dictionary called \"student\" with the following key-value pairs:\n- Name: 'John Smith'\n- Age: 21\n- Major: 'Computer Science'",
        "output": "student = {\n    'Name': 'John Smith',\n    'Age': 21,\n    'Major': 'Computer Science'\n}\n\nprint(student)",
        "most_similar_instructions": {
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.5853658536585366,
            "Write a Python script that creates a new directory with the given name.": 0.5405405405405406,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.5333333333333333,
            "Write a Python script that creates a dictionary named 'my_dict' with the keys 'name', 'age', and 'city' and their corresponding values.": 0.5217391304347826,
            "Create a dictionary called \"fruits\" with the following key-value pairs: apple - red, banana - yellow, orange - orange.": 0.4390243902439025,
            "Create a Python dictionary with 3 key-value pairs representing the name, age, and profession of a person.": 0.42857142857142855,
            "Create a Python dictionary called \"pets\" with the following key-value pairs: \"dog\"-\"bark\", \"cat\"-\"meow\", \"bird\"-\"chirp\". Print the sound made by the bird.": 0.4081632653061225,
            "Write a Python function that finds the maximum value in a given dictionary and returns the key corresponding to that value.": 0.39999999999999997,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.35999999999999993,
            "Write a Python script that randomly selects a name from a list and prints it.": 0.35897435897435903
        },
        "avg_similarity_score": 0.19434655687617775
    },
    {
        "instruction": "Write a Python program that generates a random number between 1 and 100 and asks the user to guess the number. The program should display \"Too high\" if the user's guess is higher than the random number, \"Too low\" if the user's guess is lower than the random number, and \"Correct\" if the user's guess is equal to the random number.",
        "output": "import random\n\nrandom_number = random.randint(1, 100)\nuser_guess = int(input('Guess a number between 1 and 100: '))\n\nif user_guess > random_number:\n    print('Too high')\nelif user_guess < random_number:\n    print('Too low')\nelse:\n    print('Correct')",
        "most_similar_instructions": {
            "Write a Python script that generates a random integer between 1 and 100 and asks the user to guess the number. The script should keep asking for guesses until the user correctly guesses the number. It should then print the number of guesses it took the user to find the correct answer.": 0.5344827586206896,
            "Create a Python program that generates a random number between 1 and 100, then prompts the user to guess the number. Provide appropriate feedback if the guess is too high or too low, and continue prompting until the correct number is guessed.": 0.5094339622641509,
            "Create a Python program that generates a random number between 1 and 10 inclusive and asks the user to guess the number. Print \"Correct!\" if the user guesses correctly, and \"Wrong!\" otherwise.": 0.4791666666666667,
            "Write a Python script that generates a random number between 1 and 10 (inclusive) and asks the user to guess the number. Keep track of the number of attempts and provide feedback on whether the guess is too low or too high.": 0.4716981132075472,
            "Write a Python script that generates a random number between 1 and 10, then checks if the number is divisible by 2. If it is, print \"Even number\", otherwise print \"Odd number\".": 0.375,
            "Write a Python function that accepts a number and returns True if the number is even, and False if the number is odd.\n7": 0.3409090909090909,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.3333333333333333,
            "Build a Python program that checks whether a given number is Armstrong or not. A number is Armstrong if the sum of its own digits raised to the power of the number of digits is equal to the original number.": 0.32692307692307687,
            "Create a Python program that prompts the user to enter a number and checks if the number is even or odd. Then, prints whether the number is even or odd.": 0.3191489361702128,
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.3157894736842105
        },
        "avg_similarity_score": 0.146984247231979
    },
    {
        "instruction": "Write a Python script that generates a list of 10 random numbers between 1 and 100, and then sorts the list in descending order.",
        "output": "import random\n\nnumbers = [random.randint(1, 100) for _ in range(10)]\nnumbers.sort(reverse=True)\nprint(numbers)",
        "most_similar_instructions": {
            "Write a Python script that generates a list of random numbers between a given range (inclusive) and prints the list.\nminimum = 1\nmaximum = 100\nlength = 10": 0.6,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5833333333333334,
            "Write a Python script that generates a random integer between 1 and 10 (inclusive), then prints the square of the number.": 0.5777777777777778,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.5454545454545454,
            "Write a Python script that sorts a list of strings in descending order based on their lengths.": 0.5365853658536585,
            "Provide a Python code snippet that generates a random integer between 1 and 100.": 0.5263157894736842,
            "Write a Python script that generates a list of all Fibonacci numbers less than or equal to 100.": 0.5238095238095238,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.5106382978723404,
            "Create a Python script that takes a list of strings as input and sorts the strings in descending order of their length.\nStrings: [\"apple\", \"banana\", \"cat\", \"dog\"]": 0.5098039215686274,
            "Write a Python script that sorts a list of numbers in ascending order.\n[3, 1, 4, 1, 5, 9, 2]": 0.5
        },
        "avg_similarity_score": 0.25249058974733657
    },
    {
        "instruction": "Write a Python script that converts a temperature from Celsius to Fahrenheit. The script should ask the user to enter the temperature in Celsius and then display the equivalent temperature in Fahrenheit.",
        "output": "celsius = float(input('Enter temperature in Celsius: '))\nfahrenheit = (celsius * 9/5) + 32\nprint(f'Temperature in Fahrenheit: {fahrenheit}')",
        "most_similar_instructions": {
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.5,
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.4782608695652174,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.47457627118644063,
            "Please write a Python script that creates a simple calculator program. The program should ask the user to enter two numbers, and then offer a menu with options to add, subtract, multiply, or divide the numbers.": 0.47058823529411764,
            "Write a Python script that reads a string from the user, converts all the characters to lowercase, and prints the updated string.": 0.4444444444444444,
            "Write a Python program that converts a temperature from Fahrenheit to Celsius.\nInput: 98.6\nOutput: 37.0": 0.44000000000000006,
            "Write a Python script that prompts the user to enter the radius of a circle, then calculates and prints the area of the circle.": 0.42857142857142855,
            "Create a Python script that prompts the user to enter a sentence and then removes all punctuation marks from the sentence.": 0.4150943396226415,
            "Create a Python script that checks if a given number is a perfect square. Ask the user to enter the number.": 0.4150943396226415,
            "Write a Python script that prompts the user to enter two numbers, and then checks and prints whether the first number is divisible by the second number.": 0.4067796610169491
        },
        "avg_similarity_score": 0.2079769649961581
    },
    {
        "instruction": "Create a Python class that represents a car. The class should have attributes such as make, model, year, and color.",
        "output": "class Car:\n    def __init__(self, make, model, year, color):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n      \n# Create an instance of the Car class\nmy_car = Car(\"Toyota\", \"Camry\", 2022, \"Blue\")\nprint(my_car.make) # Output: Toyota\nprint(my_car.model) # Output: Camry\nprint(my_car.year) # Output: 2022\nprint(my_car.color) # Output: Blue",
        "most_similar_instructions": {
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.5957446808510639,
            "Design a Python class that represents a student. The class should have attributes to store the student's name, age, and grades.": 0.5714285714285713,
            "Create a Python class that represents a car. The class should have attributes for the car's make, model, color, and current speed. It should also have methods to accelerate, decelerate, and print the car's information.": 0.5614035087719298,
            "Implement a Python class that represents a deck of playing cards. The class should have methods for shuffling and dealing cards.": 0.5365853658536585,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.5238095238095238,
            "Create a Python class that represents a linked list. The class should have methods for adding a new node, deleting a node, and displaying the list.": 0.5217391304347826,
            "Create a Python class that represents a book with attributes like title, author, and year of publication. The class should have methods for getting and setting the attributes.": 0.5,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.5,
            "Create a Python class to represent a student, with attributes such as name, age, and grade.": 0.5,
            "Create a Python class that represents a point in 2D space. The class should have methods to calculate the distance between two points and the midpoint between two points.": 0.4897959183673469
        },
        "avg_similarity_score": 0.21210434655022964
    },
    {
        "instruction": "Suggest an improvement for the following Python code.\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [4, 6, 2, 8, 9, 1]\ntarget = 9",
        "output": "def linear_search(arr, target):\n    for i, value in enumerate(arr):\n        if value == target:\n            return i\n    return -1\n\narr = [4, 6, 2, 8, 9, 1]\ntarget = 9\nprint(linear_search(arr, target))  # Output: 4\n# Improvement: Use 'enumerate' instead of 'range(len())' to simplify the loop and access both index and value simultaneously.",
        "most_similar_instructions": {
            "Suggest an implementation for the following Python function that reverses a given string.\ndef reverse_string(text):\n    return text[::-1]": 0.32142857142857145,
            "Suggest a completion for the following Python code to check if all the elements of a list are even.\nnumbers = [2, 4, 6, 8, 7]\nall_even =": 0.3174603174603175,
            "Complete the Python code to check if a given number is prime or not.\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number/2) + 1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False": 0.3116883116883117,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.3098591549295775,
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.3098591549295775,
            "Complete the following Python function to sort a list of integers in ascending order using the bubble sort algorithm.\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n      for j in range(0, n-i-1):\n        if arr[j] > arr[j+1]:\n          arr[j], arr[j+1] = arr[j+1], arr[j]": 0.30769230769230765,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.3050847457627119,
            "Suggest a completion for the following python code that finds the maximum value in a list of integers.\ndef find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value": 0.2894736842105263,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.28571428571428575,
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.2857142857142857
        },
        "avg_similarity_score": 0.08951455761631288
    },
    {
        "instruction": "Rewrite the following Python code using a list comprehension.\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = []\n\nfor num in numbers:\n    squared_numbers.append(num**2)\n\nprint(squared_numbers)",
        "output": "numbers = [1, 2, 3, 4, 5]\nsquared_numbers = [num**2 for num in numbers]\nprint(squared_numbers)\n# Output: [1, 4, 9, 16, 25]",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.43750000000000006,
            "Complete the following Python code to find the second largest number in a given list.\nnumbers = [5, 9, 2, 7, 3, 6]\nsorted_numbers = sorted(numbers)\nsecond_largest = sorted_numbers[-2]": 0.4333333333333333,
            "Suggest a completion for the following Python code.\ndef remove_duplicates(numbers):\n    '''This function removes duplicate numbers from a given list.'''\n    return list(set(numbers))\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nprint(remove_duplicates(numbers))": 0.42424242424242425,
            "Write Python code that converts a list of integers into a comma-separated string.\nnumbers = [1, 2, 3, 4, 5]": 0.40816326530612246,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.39999999999999997,
            "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))": 0.39436619718309857,
            "Suggest a completion for the following python code.\nimport random\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Write code to randomly select an element from the 'numbers' list.": 0.39285714285714285,
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.39215686274509803,
            "Suggest a completion for the following python code that finds the maximum value in a list of integers.\ndef find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value": 0.3768115942028986,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.375
        },
        "avg_similarity_score": 0.1402880363442426
    },
    {
        "instruction": "Suggest an alternative approach to solve the following Python problem.\nProblem: Write a program that prints the Fibonacci series using recursion.\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
        "output": "# Alternative approach without recursion:\ndef fibonacci(n):\n    fib_list = [0, 1]\n    if n <= 1:\n        return fib_list[:n+1]\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return fib_list\n\nprint(fibonacci(10))\n# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n# This approach avoids the recursive function calls, which can be slow for large values of n.",
        "most_similar_instructions": {
            "Complete the implementation of the Python code which calculates the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nInput: 5": 0.3529411764705882,
            "Suggest an implementation for the following Python function that reverses a given string.\ndef reverse_string(text):\n    return text[::-1]": 0.3157894736842105,
            "Suggest an improvement for the following Python code.\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [4, 6, 2, 8, 9, 1]\ntarget = 9": 0.3013698630136986,
            "How would you write a Python program to generate Fibonacci series up to n terms using recursion?\nn = 10": 0.28571428571428575,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.28169014084507044,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.25806451612903225,
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.25806451612903225,
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.25,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.25,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.25
        },
        "avg_similarity_score": 0.13253677830087884
    },
    {
        "instruction": "Write Python code to find and print the minimum value in the following list.\nnumbers = [9, 3, 6, 1, 7, 2]",
        "output": "numbers = [9, 3, 6, 1, 7, 2]\nmin_value = min(numbers)\nprint(min_value)  # Output: 1",
        "most_similar_instructions": {
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.5365853658536585,
            "You are given a list of numbers. Write a Python function to find and return the largest number in the list.\nnumbers = [10, 5, 8, 3, 6]": 0.5,
            "Write Python code to find the largest element in a given list of numbers.\nnumbers = [2, 6, 8, 4, 10]": 0.4878048780487805,
            "Write Python code to find the largest and smallest elements in a given list.\n[10, 4, 23, 6, 1, 12]": 0.4878048780487805,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.47619047619047616,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.4736842105263158,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.4736842105263158,
            "Write Python code to find the index of a specific element in a list.\nInput: [5, 3, 9, 2, 7], element = 9": 0.46511627906976744,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.46511627906976744,
            "Complete the following Python code to find the second largest number in a given list.\nnumbers = [5, 9, 2, 7, 3, 6]\nsorted_numbers = sorted(numbers)\nsecond_largest = sorted_numbers[-2]": 0.4615384615384615
        },
        "avg_similarity_score": 0.20142223545916124
    },
    {
        "instruction": "Suggest a more efficient approach to reverse the following list using Python.\nnumbers = [1, 2, 3, 4, 5]",
        "output": "numbers = [1, 2, 3, 4, 5]\nreversed_numbers = numbers[::-1]\nprint(reversed_numbers)  # Output: [5, 4, 3, 2, 1]\n# This approach uses slicing to reverse the list in one line.",
        "most_similar_instructions": {
            "Suggest a completion for the following python code.\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5])\n\nresult = np.": 0.5,
            "Suggest a completion for the following python code.\nimport random\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Write code to randomly select an element from the 'numbers' list.": 0.4888888888888889,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.4864864864864865,
            "What code would you write to extract all the unique elements from a list in Python?\nnumbers = [1, 2, 3, 3, 4, 5, 5]": 0.4761904761904762,
            "Suggest a Python code snippet to remove all duplicates from a given list.\nList: [1, 2, 3, 2, 4, 1, 5]": 0.4615384615384615,
            "Suggest a Python code snippet to concatenate two lists.\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]": 0.45714285714285713,
            "Suggest a completion for the following Python code.\nnums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''": 0.4444444444444445,
            "Design a Python program that reverses a given list without using the reverse() function.\n[1, 2, 3, 4, 5]": 0.43243243243243246,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.43243243243243246,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.4210526315789474
        },
        "avg_similarity_score": 0.1695512676617858
    },
    {
        "instruction": "Evaluate and print the result of the following Python expression.\n3 + 7 * 2 - 4",
        "output": "result = 3 + 7 * 2 - 4\nprint(result)  # Output: 16\n# The expression is evaluated using the order of operations (PEMDAS) - multiplication before addition/subtraction.",
        "most_similar_instructions": {
            "Write Python code to find and print the minimum value in the following list.\nnumbers = [9, 3, 6, 1, 7, 2]": 0.4571428571428571,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.33333333333333326,
            "Fill in the missing parts of the following Python code snippet to sort a list in descending order.\ninput_list = [5, 2, 8, 1]": 0.3157894736842105,
            "Suggest a more efficient approach to reverse the following list using Python.\nnumbers = [1, 2, 3, 4, 5]": 0.31250000000000006,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.30769230769230765,
            "Write Python code to find the maximum number from a given list of numbers.\nInput: [5, 3, 7, 1, 2]": 0.2941176470588235,
            "Write a Python function to calculate the hypotenuse of a right-angled triangle given the lengths of the other two sides.\nSide 1: 3\nSide 2: 4": 0.29268292682926833,
            "Write a Python script that multiplies all the numbers in a given list and prints the result.\n[2, 4, 6, 8]": 0.2857142857142857,
            "Can you write a Python script to concatenate two strings and print the result?": 0.2857142857142857,
            "Write a Python program that removes all duplicates from a list while preserving the order of the remaining elements.\nlist_with_duplicates = [1, 2, 3, 2, 4, 3, 5]": 0.2790697674418604
        },
        "avg_similarity_score": 0.1296120223022199
    },
    {
        "instruction": "Suggest an improvement for the following Python code.\ndef capitalize_first_letter(string):\n    words = string.split()\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word[0].upper() + word[1:])\n    return ' '.join(capitalized_words)\n\nstring = \"this is a sentence.\"",
        "output": "def capitalize_first_letter(string):\n    words = string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nstring = \"this is a sentence.\"\nprint(capitalize_first_letter(string))  # Output: This Is A Sentence.\n# Improvement: Use str.capitalize() method to capitalize the first letter of each word in a more concise way.",
        "most_similar_instructions": {
            "Complete the following Python code to reverse a string.\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string": 0.33333333333333337,
            "Suggest a completion for the following Python code.\ndef count_vowels(string):\n    '''This function counts the number of vowels in a given string.'''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = 'Hello world!'\nprint(count_vowels(string))": 0.32941176470588235,
            "Suggest a completion for the following Python code.\ndef reverse_string(string):\n    '''This function reverses a given string.'''\n    return string[::-1]\nstring = 'Hello, world!'\nprint(reverse_string(string))": 0.32835820895522383,
            "Suggest a completion for the following Python code.\ntext = 'Lorem ipsum dolor sit amet'\n\ndef count_words(text):\n    '''This function counts the number of words in a given text.'''": 0.3235294117647059,
            "Suggest an improvement for the following Python code.\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [4, 6, 2, 8, 9, 1]\ntarget = 9": 0.32,
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.31884057971014496,
            "Suggest an implementation for the following Python function that reverses a given string.\ndef reverse_string(text):\n    return text[::-1]": 0.3050847457627119,
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.3013698630136986,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.2903225806451613,
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.2857142857142857
        },
        "avg_similarity_score": 0.0982427594638827
    },
    {
        "instruction": "Write Python code to sort the following list of dictionaries by the \"age\" key in descending order.\npeople = [{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}, {\"name\": \"Charlie\", \"age\": 20}]",
        "output": "people = [{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}, {\"name\": \"Charlie\", \"age\": 20}]\nsorted_people = sorted(people, key=lambda x: x[\"age\"], reverse=True)\nprint(sorted_people)\n# Output: [{'name': 'Bob', 'age': 30}, {'name': 'Alice', 'age': 25}, {'name': 'Charlie', 'age': 20}]\n# Sorting is done based on the \"age\" key in descending order using the 'sorted' function and a lambda function as the key argument.",
        "most_similar_instructions": {
            "Write Python code to sort a list of dictionaries based on a key in each dictionary.\nstudents = [{'name': 'Alice', 'age': 20}, {'name': 'Bob', 'age': 18}, {'name': 'Charlie', 'age': 22}]\nSort by 'age' key in ascending order.": 0.5757575757575758,
            "Create a Python script that sorts a list of dictionaries based on a given key in ascending order.\nkey = \"name\"\npeople = [\n    {\"name\": \"John\", \"age\": 25},\n    {\"name\": \"Alice\", \"age\": 30},\n    {\"name\": \"Bob\", \"age\": 20}\n]": 0.5396825396825397,
            "Suggest a Python code snippet to sort a list of dictionaries based on a specific key.\nList of Dictionaries: [{'name': 'John', 'age': 25}, {'name': 'Emma', 'age': 30}, {'name': 'Adam', 'age': 18}]\nKey: 'age'": 0.507936507936508,
            "Write a Python function that sorts a list of dictionaries by a specified key. The list and the key should be provided as input to the function.\nInput: [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}]\nKey: \"age\"": 0.4722222222222222,
            "Can you write a Python program that sorts a list of dictionaries based on a specific key in each dictionary? The program should ask the user for the key to sort by.\n[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 22}, {'name': 'Charlie', 'age': 25}]": 0.43243243243243246,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.36363636363636365,
            "Provide a modification to the following code that sorts a given list of strings in descending order.\nnames = [\"John\", \"Alice\", \"Bob\", \"David\"]\n\ndef sort_names(name_list):\n    return sorted(name_list)": 0.36065573770491804,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.36000000000000004,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.3404255319148936,
            "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']": 0.33962264150943394
        },
        "avg_similarity_score": 0.15520585821834215
    },
    {
        "instruction": "Write a Python function that takes a year as input and returns True if it is a leap year, or False if it is not a leap year.",
        "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "most_similar_instructions": {
            "Generate a python program that takes a string as input and checks if it is a palindrome or not.\n\"radar\"": 0.5833333333333334,
            "Implement a Python function that takes a number as input and checks if it is a prime number. Return True if it is prime, and False otherwise.\n17": 0.5714285714285714,
            "Implement a Python script that prompts the user to enter a year and checks if it is a leap year or not.": 0.56,
            "Write a Python function that accepts a number and returns True if the number is even, and False if the number is odd.\n7": 0.5384615384615384,
            "Write a Python function called \"is_prime\" that takes an integer as input and returns True if the number is prime, and False otherwise.": 0.5384615384615384,
            "Write a Python function to check if a given year is a leap year.": 0.5238095238095237,
            "Write a Python function that takes a string as input and checks if it is a valid email address. Valid email addresses should contain an '@' symbol and a domain name.": 0.5172413793103449,
            "Write a Python function that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\n\"listen\", \"silent\"": 0.5,
            "Write a Python script that checks if a given string is a palindrome and prints \"Yes\" if it is, and \"No\" if it is not.": 0.49056603773584906,
            "Given a string, write a Python function to check if it is a palindrome or not. Print True if it is a palindrome, False otherwise.": 0.49056603773584906
        },
        "avg_similarity_score": 0.21594999377058946
    },
    {
        "instruction": "How would you write a Python script that calculates the factorial of a given integer? Provide the input and output for the input integer 5.",
        "output": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\ninput_num = 5\nfactorial_value = factorial(input_num)\nprint(\"Factorial of\", input_num, \":\", factorial_value)",
        "most_similar_instructions": {
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.5777777777777778,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5641025641025641,
            "Can you write a Python function that calculates the power of a number given the base and exponent?\nbase = 2\nexponent = 3": 0.5106382978723404,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.48780487804878053,
            "Write a Python script that calculates the area of a rectangle with given length and width, then stores the result in a variable named 'area'.": 0.48,
            "Generate a Python program that computes the factorial of a given positive integer.": 0.47368421052631576,
            "Create a Python function that calculates the area of a rectangle. The function should take the length and width as input and return the area.\nInput: length=5, width=3": 0.4727272727272728,
            "Write a Python function that calculates the area of a triangle given its base and height.\nFunction name: calculate_triangle_area\nInput: base = 5, height = 8": 0.47058823529411764,
            "Write a Python function that calculates the exponentiation of a given base to a given power.\n2, 5": 0.46511627906976744,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.46511627906976744
        },
        "avg_similarity_score": 0.26200721006489275
    },
    {
        "instruction": "Write Python code to calculate the Fibonacci sequence up to the nth term.\nn = 8",
        "output": "def fibonacci_sequence(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        sequence = [0, 1]\n        while len(sequence) < n:\n            next_number = sequence[-1] + sequence[-2]\n            sequence.append(next_number)\n        return sequence\n\nn = 8\nfibonacci = fibonacci_sequence(n)\nprint(fibonacci)",
        "most_similar_instructions": {
            "Create a Python function that prints the Fibonacci sequence up to the n-th term.\n8": 0.5806451612903225,
            "Write a Python program to print the Fibonacci series up to a given number of terms.\n8": 0.5,
            "Write a Python function that generates a Fibonacci sequence up to a given number N.": 0.4666666666666667,
            "Write a Python function to find all prime numbers up to the given number n.": 0.4666666666666667,
            "How would you write a Python program to generate Fibonacci series up to n terms using recursion?\nn = 10": 0.4117647058823529,
            "Write Python code to capitalize the first letter of each word in a string.\nInput: \"welcome to the world of programming\"": 0.3888888888888889,
            "Write Python code to rotate a list to the right by a specified number of steps.": 0.38709677419354843,
            "Write Python code to calculate the Euclidean distance between two points in a two-dimensional space.": 0.38709677419354843,
            "Write a Python function that returns the nth Fibonacci number.\n8": 0.3846153846153846,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.3829787234042553
        },
        "avg_similarity_score": 0.1687458519303246
    },
    {
        "instruction": "Write a Python function that converts a list of Fahrenheit temperatures to Celsius. The conversion formula is: C = (F - 32) * 5/9.\n[32, 68, 104]",
        "output": "def convert_fahrenheit_to_celsius(temperatures):\n    return [(temp - 32) * 5/9 for temp in temperatures]",
        "most_similar_instructions": {
            "Write a Python function that converts a temperature in Celsius to Fahrenheit.\ncelsius = 25": 0.4615384615384615,
            "Complete the following Python function that converts Fahrenheit temperature to Celsius.\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5/9)": 0.43478260869565216,
            "Write a Python function that takes in a list of strings and converts all strings to lowercase.": 0.42857142857142855,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.42857142857142855,
            "Write a Python script that prompts the user to enter a temperature in Celsius and converts it to Fahrenheit using the formula: F = (C * 9/5) + 32.": 0.4230769230769231,
            "Write a Python program that converts a temperature from Fahrenheit to Celsius.\nInput: 98.6\nOutput: 37.0": 0.41860465116279066,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.41860465116279066,
            "Write a Python function that converts a string representation of a number to its corresponding integer value.\nInput: '12345'": 0.40909090909090906,
            "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']": 0.4081632653061225,
            "Create a Python function that rotates a given list by a specified number of positions to the right.\n[1, 2, 3, 4, 5], positions = 2": 0.4000000000000001
        },
        "avg_similarity_score": 0.2299417348935316
    },
    {
        "instruction": "Create a Python program that generates random numbers between a given range and stores them in a list. The program should prompt the user to enter the range of numbers they want to generate.",
        "output": "import random\nrange_start = int(input('Enter the start of the range: '))\nrange_end = int(input('Enter the end of the range: '))\n\nrandom_numbers = []\nfor _ in range(10):\n    random_numbers.append(random.randint(range_start, range_end))\n\nprint('Random numbers:', random_numbers)",
        "most_similar_instructions": {
            "Write a Python program to generate a list of n random numbers between a given range. Prompt the user to enter the range and the number of elements in the list.": 0.5230769230769231,
            "Can you create a Python program that generates a random password consisting of uppercase letters, lowercase letters, and digits? The program should ask the user for the length of the password.": 0.4615384615384615,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.45614035087719296,
            "Create a Python program that prompts the user to enter three numbers and prints the maximum of the three numbers.": 0.4444444444444445,
            "Create a Python script that checks if a given number is a perfect square. Ask the user to enter the number.": 0.43636363636363634,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4347826086956522,
            "Write a Python script that calculates the Fibonacci sequence up to a given number n. The script should prompt the user to enter the value of n and print the Fibonacci sequence.": 0.42424242424242425,
            "Implement a Python function that generates a random integer between a given range (inclusive).\nRange: 1 to 10": 0.42307692307692313,
            "Create a Python program that calculates the area of a circle. The program should ask the user for the radius of the circle and print the calculated area.": 0.41935483870967744,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.4150943396226416
        },
        "avg_similarity_score": 0.22467081314175785
    },
    {
        "instruction": "Create a Python program that swaps the values of two variables without using a temporary variable.\na = 5, b = 10",
        "output": "a = 5\nb = 10\n\na, b = b, a",
        "most_similar_instructions": {
            "Create a Python program that reads two integers from the user and swaps their values without using a temporary variable.": 0.6,
            "Generate a Python script that swaps the values of two variables.": 0.5806451612903226,
            "Write a Python program to swap the values of two variables.\nx = 5\ny = 10": 0.5714285714285715,
            "Write Python code to swap two variables without using a temporary variable.": 0.5,
            "Create a Python function that calculates the sum of two given numbers.\nnum1 = 5\nnum2 = 10": 0.5,
            "Create a Python program that calculates the area of a circle given its radius.\nInput: 5": 0.5,
            "Write a Python function that sums all the values in a dictionary.\n{'a': 5, 'b': 3, 'c': 7}": 0.4736842105263158,
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.46153846153846156,
            "Create a Python program that finds the maximum common divisor (GCD) of two given numbers using the Euclidean algorithm.": 0.46153846153846156,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4375
        },
        "avg_similarity_score": 0.23408400996646467
    },
    {
        "instruction": "Write a Python script that calculates the sum of all numbers from 1 to 100 (inclusive) using a while loop.",
        "output": "total = 0\ni = 1\n\nwhile i <= 100:\n    total += i\n    i += 1\n\nprint(total)",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.5833333333333334,
            "Write a Python code snippet to calculate the sum of all even numbers between 1 and 100 (inclusive).": 0.5789473684210527,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.5789473684210527,
            "Write a Python function that calculates the sum of all prime numbers within a given range (inclusive).\n5, 20": 0.5641025641025641,
            "Implement a Python program to calculate the sum of all odd numbers from 1 to a given number n.": 0.5641025641025641,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.5294117647058824,
            "Write a Python script that generates a list of all Fibonacci numbers less than or equal to 100.": 0.5263157894736842,
            "Generate a Python code snippet to find the sum of all natural numbers up to a given number using a for loop.": 0.5238095238095238,
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.5128205128205129,
            "Write a Python script that calculates the sum of the digits of a given positive integer and prints the result.": 0.5
        },
        "avg_similarity_score": 0.2448647386344298
    },
    {
        "instruction": "Explain how to create a Python dictionary and add key-value pairs to it.",
        "output": "To create a dictionary in Python, you can use the curly braces {}. To add key-value pairs, you can use the assignment operator (=). For example, to create an empty dictionary, you can write:\nmy_dict = {}\nTo add key-value pairs, you can use the following syntax:\nmy_dict[key] = value\nFor instance, if you want to add the key \"name\" with the value \"John\" to the dictionary, you would write:\nmy_dict[\"name\"] = \"John\"",
        "most_similar_instructions": {
            "Create a Python dictionary with the following key-value pairs: \"name\": \"John\", \"age\": 25, \"city\": \"New York\"": 0.45161290322580644,
            "Create a Python dictionary with 3 key-value pairs representing the name, age, and profession of a person.": 0.43750000000000006,
            "How can you iterate over a dictionary in Python and print both key and value?": 0.4137931034482759,
            "Explain how to create a Python class that represents a rectangle with attributes for its width and height, and a method to calculate its area.": 0.41025641025641024,
            "Write a Python script that creates a dictionary with key-value pairs representing the numbers 1 to 5 and their squares.": 0.4,
            "How can you create a Python dictionary comprehension to square each element of a list and store it as key-value pairs in a dictionary?\ninput_list = [1, 2, 3, 4, 5]": 0.391304347826087,
            "Create a dictionary called \"fruits\" with the following key-value pairs: apple - red, banana - yellow, orange - orange.": 0.3870967741935484,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.3870967741935484,
            "Create a Python program that creates a dictionary with keys from a given list and values initialized to None.": 0.36363636363636365,
            "Create a Python dictionary called \"pets\" with the following key-value pairs: \"dog\"-\"bark\", \"cat\"-\"meow\", \"bird\"-\"chirp\". Print the sound made by the bird.": 0.358974358974359
        },
        "avg_similarity_score": 0.1795390655477001
    },
    {
        "instruction": "How would you implement a Python program that removes duplicate elements from a given list?",
        "output": "def remove_duplicates(numbers):\n   return list(set(numbers))",
        "most_similar_instructions": {
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.5945945945945945,
            "Design a Python function that removes all duplicates from a given list.": 0.5925925925925926,
            "How would you implement a Python script that parses XML data and extracts specific elements from it?": 0.5625,
            "How would you write a Python code that removes all duplicates from a list?\nnumbers = [1, 2, 1, 3, 4, 2]": 0.5555555555555556,
            "How would you write a Python function that checks whether a given list is empty or not?\nlst = []": 0.5454545454545454,
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.5454545454545454,
            "How can you remove duplicate elements from a list in Python?": 0.5384615384615385,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5333333333333333,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.5294117647058824,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.5
        },
        "avg_similarity_score": 0.2471162294076059
    },
    {
        "instruction": "Complete the following Python code to sort a list of integers in ascending order.\ndef sort_list(numbers):\n    '''This function sorts a list of integers in ascending order.'''\n    sorted_nums = []\n    for num in numbers:\n        # Add the number to the correct position in the sorted list\n        for i in range(len(sorted_nums)):\n            if num < sorted_nums[i]:\n                sorted_nums.insert(i, num)\n                break\n        else:\n            sorted_nums.append(num)\n    return sorted_nums",
        "output": "def sort_list(numbers):\n    '''This function sorts a list of integers in ascending order.'''\n    sorted_nums = []\n    for num in numbers:\n        # Add the number to the correct position in the sorted list\n        for i in range(len(sorted_nums)):\n            if num < sorted_nums[i]:\n                sorted_nums.insert(i, num)\n                break\n        else:\n            sorted_nums.append(num)\n    return sorted_nums",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to sort a list of strings in alphabetical order.\ndef sort_strings_alphabetically(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list": 0.3725490196078431,
            "Complete the following Python function to sort a list of integers in ascending order using the bubble sort algorithm.\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n      for j in range(0, n-i-1):\n        if arr[j] > arr[j+1]:\n          arr[j], arr[j+1] = arr[j+1], arr[j]": 0.3333333333333333,
            "Suggest a completion for the following Python code to check if a list is sorted in ascending order.\ndef is_ascending(numbers):\n    '''This function should return True if the list ``numbers`` is sorted in ascending order and False otherwise.'''": 0.32727272727272727,
            "Suggest a completion for the following python code that finds the maximum value in a list of integers.\ndef find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value": 0.3243243243243243,
            "Create a Python program to sort a list of integers in ascending order. Prompt the user to enter the elements of the list.": 0.3191489361702128,
            "Complete the following Python code to sort a list of strings in descending order.\ndef sort_strings(strings):\n    strings.sort(reverse=True)\n    return strings": 0.3157894736842105,
            "Complete the following Python code to sort a list of names in ascending order.\nnames = [\"Emma\", \"Olivia\", \"Liam\", \"Noah\", \"Isabella\", \"Sophia\", \"Mason\"]\nnames_sorted = sorted(names)": 0.30927835051546393,
            "Create a Python function that sorts a list of integers in ascending order. The function should take a list as input and return the sorted list.": 0.28865979381443296,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.28571428571428575,
            "Complete the Python code to check if a given number is prime or not.\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number/2) + 1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False": 0.2857142857142857
        },
        "avg_similarity_score": 0.11889129386512823
    },
    {
        "instruction": "Complete the Python code to calculate the sum of all elements in a list.\ndef calculate_sum(lst):\n    '''This function calculates the sum of all elements in a list.'''\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum",
        "output": "def calculate_sum(lst):\n    '''This function calculates the sum of all elements in a list.'''\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum",
        "most_similar_instructions": {
            "Write the Python program to calculate the sum of all elements in a list using a for loop.": 0.49122807017543857,
            "Suggest a completion for the following Python code to calculate the mean of a list of numbers.\ndef calculate_mean(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    mean = sum / len(numbers)\n    return mean": 0.45945945945945943,
            "Suggest a completion for the following Python code snippet that calculates the sum of even numbers in a list.\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)": 0.4324324324324324,
            "Complete the following Python code to calculate the sum of all values in a dictionary.\ndata = {'a': 5, 'b': 3, 'c': 10}": 0.4262295081967213,
            "Complete the function below to remove all duplicate elements from a given list.\ndef remove_duplicates(lst):\n    '''This function should remove all duplicate elements from the list and return the updated list.'''": 0.4225352112676056,
            "Complete the following Python code to find the maximum element in a given list.\n\n```\ndef find_max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element\n```": 0.42105263157894735,
            "Suggest a completion for the following code.\ndef add_numbers(numbers):\n    '''This function takes a list of numbers and returns their sum.'''\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5]\nprint(add_numbers(numbers))": 0.39506172839506165,
            "Suggest a function definition to calculate the sum of all the elements in a matrix (2D list).": 0.3928571428571429,
            "Suggest a completion for the following Python code to count the number of vowels in a string.\ndef count_vowels(s):\n    '''This function should return the number of vowels in the string ``s``.'''": 0.3888888888888889,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.37931034482758624
        },
        "avg_similarity_score": 0.1660928976685833
    },
    {
        "instruction": "Write Python code to implement a linear search algorithm that searches for a given element in a list. Return the index if found, else return -1.\nList: [4, 7, 2, 5, 9, 1]\nElement: 5",
        "output": "def linear_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\narr = [4, 7, 2, 5, 9, 1]\nelement = 5\nresult = linear_search(arr, element)\nprint(result)",
        "most_similar_instructions": {
            "Write Python code to search for a specific element in a given list.\nList: [1, 3, 5, 7, 9]\nElement to search: 5": 0.5517241379310345,
            "Write a Python script that finds the index of the first occurrence of a given element in a list. Print the index.\nList: [4, 2, 7, 9, 4]\nElement: 7": 0.4923076923076923,
            "Write a Python script that performs a linear search on a given list and returns the index of a given element if found, or -1 if not found.\nList: [2, 5, 7, 9, 12, 15]\nElement to search: 9": 0.48648648648648646,
            "Write Python code to find the index of a specific element in a list.\nInput: [5, 3, 9, 2, 7], element = 9": 0.42105263157894735,
            "Write a Python function that adds a given element at the end of a given list and returns the updated list.\nList: [5, 2, 9]\nElement: 7": 0.41935483870967744,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.41509433962264153,
            "Can you write a Python function that finds and returns the first occurrence of a given element in a list?\nelement = 5\nlst = [1, 3, 5, 7, 5, 9, 11]": 0.4,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.39999999999999997,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.3888888888888889,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.38596491228070173
        },
        "avg_similarity_score": 0.1947019396032716
    },
    {
        "instruction": "How would you write a Python script to extract all email addresses from a given text using regular expressions?",
        "output": "import re\n\ndef extract_email_addresses(text):\n    pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    emails = re.findall(pattern, text)\n    return emails\n    \ntext = \"Contact us at john.doe@example.com or jane.smith@example.com\"\nemail_addresses = extract_email_addresses(text)\nprint(email_addresses)",
        "most_similar_instructions": {
            "How can you write a Python function to remove all punctuation from a given sentence?\nsentence = \"Hello! How are you?\"": 0.5128205128205129,
            "How would you write a Python function to remove duplicate elements from a given list?\n[10, 20, 30, 20, 40, 10, 50]": 0.4878048780487805,
            "How would you implement a Python script that finds all the prime numbers within a given range of numbers?": 0.47368421052631576,
            "How would you implement a Python program that removes duplicate elements from a given list?": 0.47058823529411764,
            "How can you write a Python function to remove all even numbers from a given list of integers?\nnumbers = [5, 2, 9, 1, 7]": 0.46511627906976744,
            "How can you write a Python program to find all prime numbers between 1 and a given number using a while loop?\nn = 20": 0.46511627906976744,
            "How would you write a Python program to check if a given number is positive, negative, or zero?\nnumber = -7": 0.46153846153846156,
            "How would you write a Python function to check if a given list of numbers is in strictly increasing order?": 0.46153846153846156,
            "How can you write Python code to extract the extension from a filename?\nfilename = \"example.py\"": 0.45714285714285713,
            "How would you truncate a string in Python to a specific length?": 0.4516129032258065
        },
        "avg_similarity_score": 0.2149256556941096
    },
    {
        "instruction": "How would you implement a Python class for a car, with attributes like color and mileage, and methods like start and stop the engine?",
        "output": "class Car:\n    def __init__(self, color, mileage):\n        self.color = color\n        self.mileage = mileage\n        \n    def start_engine(self):\n        print(\"Engine started.\")\n        \n    def stop_engine(self):\n        print(\"Engine stopped.\")\n        \nmy_car = Car(\"Red\", 10000)\nmy_car.start_engine()\nmy_car.stop_engine()",
        "most_similar_instructions": {
            "Design a Python class that represents a car. The class should have attributes like brand, model, color and methods like start_engine(), stop_engine(), and accelerate(speed).": 0.5490196078431373,
            "How would you implement a Python class that represents a circle object with attributes radius and center coordinates (x, y)?": 0.5,
            "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?": 0.48780487804878053,
            "In Python, how would you define a class called \"Car\" with attributes \"brand\" and \"model\"?": 0.4615384615384615,
            "Design a Python class that represents a car, with properties like color, brand, and fuel efficiency.": 0.45,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.4444444444444445,
            "Create a Python class called \"Car\" with attributes \"make\" and \"model\" and a method called \"start_engine\" that prints \"Engine started\".": 0.4444444444444445,
            "Design a Python class for a car, which has attributes like color, brand, and max_speed. Implement a method to accelerate the car by a given speed.": 0.4313725490196078,
            "Create a Python class that represents a book with attributes like title, author, and year of publication. The class should have methods for getting and setting the attributes.": 0.4230769230769231,
            "Design a Python class to represent a student with attributes like name, age, and grade. Include methods to update the student's grade and display the student's information.": 0.4150943396226415
        },
        "avg_similarity_score": 0.18293279749253302
    },
    {
        "instruction": "How can you reverse the order of elements in a given list using Python? Write a Python script to demonstrate.",
        "output": "numbers = [1, 2, 3, 4, 5]\nreversed_numbers = numbers[::-1]\nprint(reversed_numbers)",
        "most_similar_instructions": {
            "Can you suggest a way to reverse the order of elements in a given list without using the reverse() method?": 0.6,
            "How can you find the length of a string using Python?": 0.5161290322580645,
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.47058823529411764,
            "Can you come up with a Python function that reverses the order of the elements in a given list?\n[1, 2, 3, 4]": 0.46511627906976744,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.46511627906976744,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.46153846153846156,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.46153846153846156,
            "How can you remove duplicate elements from a list in Python?": 0.45161290322580644,
            "How can you sort the elements of a list in descending order using Python?\nmy_list = [4, 1, 6, 3, 8]": 0.4390243902439024,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.4285714285714286
        },
        "avg_similarity_score": 0.19702323610420752
    },
    {
        "instruction": "Write a Python program that replaces all occurrences of a specified character in a given string.\n\"Hello, world!\" Replace all 'o' with 'a'.",
        "output": "def replace_character(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\ntext = \"Hello, world!\"\nnew_text = replace_character(text, 'o', 'a')\nprint(new_text)",
        "most_similar_instructions": {
            "Write Python code to replace all occurrences of a specified word in a string with a new word.": 0.5853658536585366,
            "Write a Python program that finds and replaces all occurrences of a word in a given string with a new word.\nInput string: \"The brown cat jumped over the brown dog.\"\nWord to replace: \"brown\", New word: \"black\"": 0.5245901639344263,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5128205128205128,
            "Write a Python function that takes a string and replaces all occurrences of a given character with a new character.\nString: \"banana\", Old character: \"a\", New character: \"o\"": 0.5098039215686274,
            "Write a Python script that replaces all occurrences of a specified word in a text with a different word.\ntext = \"I love apples, apples are my favorite fruit.\"\nReplace \"apples\" with \"oranges\".": 0.5090909090909091,
            "Create a Python program that generates all possible combinations of a given string.": 0.5,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.4864864864864865,
            "Write a program that removes all whitespace characters from a given string and returns the result.\nString: 'hello   world'": 0.47619047619047616,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.46511627906976744,
            "Write a Python program to truncate a given string to a specified length.\n\"Hello, World!\", 7": 0.46153846153846156
        },
        "avg_similarity_score": 0.23515970938237285
    },
    {
        "instruction": "Create a Python program that formats a given date string in the format \"MM/DD/YYYY\" to \"YYYY-MM-DD\".",
        "output": "import datetime\n\ndef format_date(date_string):\n    date_object = datetime.datetime.strptime(date_string, '%m/%d/%Y')\n    formatted_date = date_object.strftime('%Y-%m-%d')\n    return formatted_date",
        "most_similar_instructions": {
            "Write a Python script that outputs the current date and time in the format: 'YYYY-MM-DD HH:MM:SS'.": 0.5,
            "Create a Python program that generates all possible combinations of a given string.": 0.4848484848484849,
            "Generate a Python code snippet that converts a string representation of a date in the format \"YYYY-MM-DD\" to a datetime object.\n\"2022-12-31\"": 0.47826086956521735,
            "Write a Python program that converts a number in decimal format to binary format.": 0.47058823529411764,
            "Create a Python program that checks if a given string is a palindrome (reads the same backward as forward).": 0.46153846153846156,
            "Create a Python program that converts a given number from Celsius to Fahrenheit.\nInput: 28": 0.4571428571428572,
            "Create a Python program that converts a given list of strings to lowercase.\n[\"Hello\", \"WORLD\"]": 0.4571428571428572,
            "Write a Python script that converts a given string to uppercase.": 0.45161290322580644,
            "Create a Python program that sorts a given list in ascending order.\nInput: [5, 1, 8, 2]": 0.4324324324324324,
            "Create a Python program to convert a string to a list of words.": 0.4242424242424242
        },
        "avg_similarity_score": 0.22783598487787635
    },
    {
        "instruction": "Write a Python function that accepts two strings as input and returns a new string that combines both strings separated by a space.",
        "output": "def combine_strings(string1, string2):\n    return string1 + \" \" + string2",
        "most_similar_instructions": {
            "Create a Python function that takes two strings as input and returns a new string that combines the characters of the two input strings in alternating order.\nInput strings: 'abc', '123'": 0.5925925925925926,
            "Write a Python function that takes two lists as arguments and returns a new list containing elements that are common to both lists.": 0.5652173913043478,
            "Design a Python function that takes two dictionaries as input and returns a new dictionary that contains the keys and values from both dictionaries.": 0.5531914893617021,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5405405405405405,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.5365853658536586,
            "Write a Python function that takes two strings as input and checks if one string is a substring of the other.\nhello, lo": 0.5217391304347826,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5116279069767442,
            "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']": 0.5106382978723404,
            "Write a Python function that takes a list of strings as input and returns a new list with only the strings that start with a vowel (a, e, i, o, u), ignoring case.": 0.5,
            "Implement a Python function that takes a list of strings as input and returns a new list where each string is reversed.\nList: ['hello', 'world', 'python']": 0.4897959183673469
        },
        "avg_similarity_score": 0.22424659137377048
    },
    {
        "instruction": "Create a Python function that searches for a specific element in a list and returns the index of its first occurrence. If the element is not found, return -1.",
        "output": "def search_list(lst, element):\n    if element in lst:\n        return lst.index(element)\n    else:\n        return -1",
        "most_similar_instructions": {
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.5957446808510638,
            "Generate a Python program to search for a specific character in a string and return the index of the first occurrence.": 0.52,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.48484848484848486,
            "Write Python code to implement a linear search algorithm that searches for a given element in a list. Return the index if found, else return -1.\nList: [4, 7, 2, 5, 9, 1]\nElement: 5": 0.46875000000000006,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4615384615384615,
            "Create a Python function that takes a list as input and returns the maximum element in the list.\nInput: [4, 7, 2, 9, 5, 1]": 0.4444444444444445,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.44,
            "Create a Python function that takes a list of names and returns the number of names that start with the letter \"A\".\n[\"Anna\", \"John\", \"Alice\", \"Adam\"]": 0.43636363636363634,
            "Write a Python function that adds a given element at the end of a given list and returns the updated list.\nList: [5, 2, 9]\nElement: 7": 0.4285714285714286,
            "Write a Python function that accepts a number and returns True if the number is even, and False if the number is odd.\n7": 0.4150943396226415
        },
        "avg_similarity_score": 0.2389920085721341
    },
    {
        "instruction": "How would you implement a Python function to calculate the factorial of a non-negative integer?\nNumber: 6",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 6\nfactorial_result = factorial(number)\nprint(factorial_result)",
        "most_similar_instructions": {
            "Write a Python program to compute the factorial of a non-negative integer using iterative approach.": 0.5882352941176471,
            "How can you implement a Python function to reverse a string?": 0.5517241379310345,
            "How would you implement a Python function that converts a decimal number to binary representation?": 0.5454545454545454,
            "Create a Python function to calculate the factorial of a given number. Prompt the user to enter the number.": 0.5405405405405405,
            "Generate a Python program to calculate the power of a number using recursion.": 0.5161290322580646,
            "How would you implement a Python class with a constructor and a method that returns the square of a given number?": 0.5128205128205129,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.5128205128205129,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.5,
            "Write a Python function to calculate the square root of a given number using the Newton's method.": 0.5,
            "How would you write a Python program to calculate the power of a number? The power of a number is the number multiplied by itself n times.": 0.4888888888888889
        },
        "avg_similarity_score": 0.235080699741828
    },
    {
        "instruction": "How can you generate the current date and time in Python?",
        "output": "import datetime\n\ncurrent_datetime = datetime.datetime.now()\nprint(current_datetime)",
        "most_similar_instructions": {
            "How can you generate a list of the first 10 Fibonacci numbers in Python?": 0.56,
            "How can you concatenate two lists in Python?": 0.5263157894736842,
            "How can you generate a random integer between a given range in Python?": 0.4999999999999999,
            "How can you generate the Fibonacci sequence up to a given number using Python?": 0.4799999999999999,
            "How can you convert a string to uppercase in Python?": 0.47619047619047616,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.4666666666666667,
            "How can you find the length of a string using Python?": 0.45454545454545453,
            "Create a Python program that prints the current date and time.": 0.45454545454545453,
            "How would you implement the Fibonacci sequence in Python using recursion?": 0.45454545454545453,
            "How can you remove duplicate elements from a list in Python?": 0.45454545454545453
        },
        "avg_similarity_score": 0.12371765561820461
    },
    {
        "instruction": "Design a Python function that takes a dictionary of student names and their corresponding grades, and returns the average grade of all the students.\ngrades = {\"John\": 90, \"Emma\": 85, \"Tom\": 95}",
        "output": "def calculate_average_grade(grades):\n    return sum(grades.values()) / len(grades)\n\ngrades = {\"John\": 90, \"Emma\": 85, \"Tom\": 95}\naverage_grade = calculate_average_grade(grades)\nprint(average_grade)",
        "most_similar_instructions": {
            "Create a Python function that takes a list of names and returns the number of names that start with the letter \"A\".\n[\"Anna\", \"John\", \"Alice\", \"Adam\"]": 0.4912280701754386,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.4615384615384615,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4444444444444444,
            "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.": 0.41509433962264153,
            "Design a Python function that takes a list of numbers and returns the largest number in the list.\n[10, 2, 33, 4, 55, 6, 77, 8, 99]": 0.41379310344827586,
            "Implement a Python script that takes a list of integers as input and prints the average of the numbers.\nNumbers: [2, 4, 6, 8, 10]": 0.3928571428571428,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.3928571428571428,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.39215686274509803,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.3859649122807018,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.3846153846153846
        },
        "avg_similarity_score": 0.1998456377393768
    },
    {
        "instruction": "Write a Python program that reads two integers, a and b, and computes their sum, product, and quotient using only the + and * operators.",
        "output": "a = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nsum = a + b\nproduct = a * b\nquotient = a / b\nprint(\"Sum:\", sum)\nprint(\"Product:\", product)\nprint(\"Quotient:\", quotient)",
        "most_similar_instructions": {
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.5333333333333332,
            "Write a Python program that reads two integers from the user and prints the sum of the two integers.": 0.5238095238095238,
            "Write a Python script that takes two integers as input and prints their greatest common divisor using the Euclidean algorithm.": 0.46511627906976744,
            "Create a Python program that reads two integers from the user and swaps their values without using a temporary variable.": 0.46511627906976744,
            "Write a Python program that prompts the user for a dividend and divisor, and prints the quotient and remainder of the division.": 0.4444444444444445,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4444444444444444,
            "Write a Python function that takes two numbers as input and returns their sum.": 0.4324324324324324,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.4186046511627907,
            "Write a Python class that represents a binary search tree and implements the search and insertion operations.": 0.39999999999999997,
            "Write a Python program that reads a list of integers and returns the largest and smallest number in the list.\nExample input: [5, 10, 3, 8, 2]": 0.39999999999999997
        },
        "avg_similarity_score": 0.2194805365762596
    },
    {
        "instruction": "Suggest a completion for the following Python function that checks if two lists are equal.\ndef are_lists_equal(lst1, lst2):\n    return lst1 == lst2",
        "output": "def are_lists_equal(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            return False\n    return True",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to concatenate two lists.\ndef concatenate_lists(list1, list2):\n    return list1 + list2": 0.5454545454545454,
            "Write a Python program that checks if two lists are equal or not.": 0.48648648648648646,
            "Can you write a Python function that checks if two lists are equal?\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]": 0.4444444444444445,
            "Suggest a completion for the following python code.": 0.43750000000000006,
            "How would you implement a Python function that checks if two lists are equal (have the same elements in the same order)?": 0.43478260869565216,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.425531914893617,
            "Suggest an implementation for the following Python function that reverses a given string.\ndef reverse_string(text):\n    return text[::-1]": 0.4090909090909091,
            "Suggest a completion for the following Python code.\nnums = [1, 2, 3, 4, 5]\n\ndef is_even(num):\n    '''This function checks if a given number is even.'''": 0.39215686274509803,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.3829787234042554,
            "Create a Python program that checks if two strings are anagrams of each other.": 0.3684210526315789
        },
        "avg_similarity_score": 0.15293990299272467
    },
    {
        "instruction": "Suggest a completion for the following Python code that checks if a string is a valid email address.\nimport re\n\ndef is_valid_email(email):\n    pattern = re.compile(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$')\n    return bool(re.match(pattern, email))",
        "output": "import re\n\ndef is_valid_email(email):\n    pattern = re.compile(r'^[\\w\\.-]+@[\\w\\.-]+\\.[A-Za-z]+$')\n    return bool(re.match(pattern, email))",
        "most_similar_instructions": {
            "Suggest a completion for the following Python code to check if a given string is a palindrome.\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False": 0.4444444444444444,
            "How can you write a Python function that checks if a given string is a valid email address?\nemail = \"example@example.com\"": 0.43333333333333335,
            "Suggest a completion for the following Python code.\nimport re\n\ndef remove_special_characters(text):\n    return re.sub('[^A-Za-z0-9 ]+', '', text)": 0.4262295081967213,
            "Create a function in Python that checks if a given string is a valid email address. Return True if it is, and False otherwise.\nInput: 'example@email.com'": 0.4242424242424242,
            "Suggest a completion for the following Python code that removes all duplicates from a list.\ndef remove_duplicates(numbers):\n    return list(set(numbers))": 0.39344262295081966,
            "Please complete the following Python function that checks if a given string is a palindrome.\ndef is_palindrome(word):\n    # TODO: Complete the function": 0.39344262295081966,
            "Can you write a Python code that checks whether a given string is a valid email address or not? (Assuming valid email addresses contain a single '@' symbol and at least one '.' after the '@' symbol)": 0.3888888888888889,
            "Suggest a completion for the following Python function that checks if two lists are equal.\ndef are_lists_equal(lst1, lst2):\n    return lst1 == lst2": 0.3870967741935484,
            "Implement a Python script that takes a string as input, then checks if the string is a valid email address.": 0.37931034482758624,
            "Implement a Python function that checks if a given string is a valid email address by matching it against a regular expression pattern. The pattern for a valid email address is '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'.": 0.3703703703703704
        },
        "avg_similarity_score": 0.14947272101107076
    },
    {
        "instruction": "Create a Python function that performs a linear search on a list and returns the index of the first occurrence of a given element.\n['apple', 'banana', 'cherry'], 'banana'",
        "output": "def linear_search(lst, element):\n    for i in range(len(lst)):\n        if lst[i] == element:\n            return i\n    return -1\n\ninput_list = ['apple', 'banana', 'cherry']\nelement = 'banana'\nindex = linear_search(input_list, element)\nprint(index)",
        "most_similar_instructions": {
            "Create a Python program that takes a list of strings as input and returns the number of occurrences of a given word in the list.\n['apple', 'banana', 'cherry', 'banana', 'banana']\n'banana'": 0.5762711864406779,
            "Create a Python function that searches for a specific element in a list and returns the index of its first occurrence. If the element is not found, return -1.": 0.5614035087719299,
            "Write a Python function that removes the first occurrence of a specified element from a given list.\n['apple', 'banana', 'cherry', 'dragonfruit'], 'banana'": 0.56,
            "Write a Python script that performs a linear search on a given list and returns the index of a given element if found, or -1 if not found.\nList: [2, 5, 7, 9, 12, 15]\nElement to search: 9": 0.537313432835821,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.5098039215686274,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.5,
            "Create a Python function that takes a list of names and returns the number of names that start with the letter \"A\".\n[\"Anna\", \"John\", \"Alice\", \"Adam\"]": 0.4814814814814815,
            "Write a Python function that returns a list of all divisors of a given number.": 0.46511627906976744,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.45833333333333337,
            "Create a Python function that merges two dictionaries and returns the result.\n{'apple': 5, 'banana': 7}, {'cherry': 3, 'dragonfruit': 9}": 0.45833333333333337
        },
        "avg_similarity_score": 0.24387587718929013
    },
    {
        "instruction": "Write a Python program that accepts a list of numbers and prints the list in descending order without using any built-in sorting functions.",
        "output": "def sort_list_descending(numbers):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] < numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers",
        "most_similar_instructions": {
            "Write a Python script that generates a list of 10 random numbers between 1 and 100, and then sorts the list in descending order.": 0.5833333333333334,
            "Write a Python script that takes a list of numbers as input and returns a new list with the numbers sorted in descending order.": 0.5416666666666666,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5238095238095238,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5238095238095238,
            "Write a program that accepts a list of words and returns the longest word with its length in Python.": 0.5116279069767442,
            "Write a Python program that takes a list of strings as input and sorts them in alphabetical order, ignoring case.": 0.5,
            "Create a Python program that loops through a list and prints each element in reverse order.": 0.5,
            "Write Python code to remove duplicates from a given list without using any built-in functions.": 0.5,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.4888888888888889,
            "Write a Python program that takes a sentence as input and prints the words in reverse order.\n\"The quick brown fox\"": 0.4888888888888889
        },
        "avg_similarity_score": 0.24921766906720888
    },
    {
        "instruction": "Write a Python function that takes in a string and returns the frequency of each character as a dictionary.",
        "output": "def get_character_frequency(string):\n    frequency = {}\n    for char in string:\n        frequency[char] = frequency.get(char, 0) + 1\n    return frequency",
        "most_similar_instructions": {
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.5581395348837209,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.5500000000000002,
            "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.": 0.5365853658536586,
            "Write a Python function that takes a string as input and counts the occurrences of each character in the string. Return a dictionary with the character as the key and the count as the value.\nInput: \"hello\"": 0.5357142857142857,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.5263157894736842,
            "Write a Python program that extracts digits from a given string and returns them as a list.\nString: 'abc123def456'": 0.5263157894736842,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.5238095238095238,
            "Implement a Python function named \"count_vowels\" that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.": 0.5217391304347826,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.5128205128205129,
            "Write a Python function that takes a sentence as input and returns a dictionary containing the count of each word in the sentence.\nSentence: \"I love Python programming\"": 0.5106382978723404
        },
        "avg_similarity_score": 0.2820485857223157
    },
    {
        "instruction": "How would you find the maximum element in a list of integers using the built-in max() function in Python?\nnumbers = [10, 5, 8, 12, 3]",
        "output": "numbers = [10, 5, 8, 12, 3]\nmaximum = max(numbers)\nprint(maximum)",
        "most_similar_instructions": {
            "In Python, how can you find the maximum and minimum values in a list of numbers?\nList: [10, 5, 8, 3, 12, 6]": 0.5714285714285715,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.5416666666666667,
            "Can you write a Python program to find the minimum and maximum values in a list without using any built-in functions or libraries?\nnumbers = [5, 2, 8, 3, 10]": 0.5,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.4999999999999999,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.4888888888888889,
            "Suggest an implementation for finding the maximum value of a list of numbers in Python using the built-in max() function.\nnumbers = [6, 9, 2, 7, 1, 5]": 0.4814814814814815,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.4680851063829788,
            "How can you calculate the average of a list of numbers using Python?\nnumbers = [5, 10, 15, 20, 25]": 0.4444444444444444,
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.42553191489361697,
            "How would you write Python code to find the maximum and minimum values in a given list?": 0.41860465116279066
        },
        "avg_similarity_score": 0.16806810231340022
    },
    {
        "instruction": "Write a Python program that counts and prints the number of occurrences of each word in a given string.\nsentence = \"She sells sea shells by the seashore.\"",
        "output": "def count_word_occurrences(sentence):\n    word_counts = {}\n    words = sentence.split()\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return word_counts\n\nsentence = \"She sells sea shells by the seashore.\"\nword_occurrences = count_word_occurrences(sentence)\nfor word, count in word_occurrences.items():\n    print(word, count)",
        "most_similar_instructions": {
            "Write a Python program that finds the length of the longest word in a given string.": 0.5581395348837209,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.553191489361702,
            "Create a Python program that counts the frequency of each word in a given sentence.\nThe quick brown fox jumps over the lazy dog.": 0.5490196078431373,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5454545454545455,
            "Write a Python function to count the occurrences of each word in a given sentence and return the result as a dictionary.": 0.5306122448979591,
            "Write a Python program that counts the frequency of words in a given sentence.\nInput: \"I love Python programming programming. Python is the best!\"": 0.5098039215686274,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.5,
            "How would you write a Python program to count the occurrences of each word in a given string?\nstring = \"I love to code. Coding is fun!\"": 0.49056603773584906,
            "Write a Python script that calculates and prints the factorial of a given number.": 0.4878048780487805,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.48148148148148145
        },
        "avg_similarity_score": 0.2467346832019886
    },
    {
        "instruction": "Write a Python function that receives a list of strings and a target string, and returns the index of the first occurrence of the target string in the list. If the target string is not found, return -1.",
        "output": "def find_target_string(strings, target):\n    for i, string in enumerate(strings):\n        if string == target:\n            return i\n    return -1",
        "most_similar_instructions": {
            "Create a Python function that searches for a specific element in a list and returns the index of its first occurrence. If the element is not found, return -1.": 0.5970149253731344,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5423728813559322,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.5333333333333333,
            "Write a Python function that accepts two parameters: a list of integers and a target value. The function should return the indices of the two numbers in the list that add up to the target value.\nInput: [2, 7, 1, 5], target = 9": 0.5185185185185185,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.5,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5,
            "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.": 0.46153846153846156,
            "Create a Python function that performs a linear search on a list and returns the index of the first occurrence of a given element.\n['apple', 'banana', 'cherry'], 'banana'": 0.45454545454545453,
            "Write a function in Python that takes a list of strings and returns the longest string from the list.\nInput: ['cat', 'dog', 'elephant', 'lion']": 0.4516129032258065,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.44067796610169496
        },
        "avg_similarity_score": 0.23328492794000846
    },
    {
        "instruction": "Write a Python function that receives a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of the strings.",
        "output": "def generate_string_lengths_dictionary(strings):\n    string_lengths = {string: len(string) for string in strings}\n    return string_lengths",
        "most_similar_instructions": {
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.56,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.5106382978723404,
            "Write a Python function that takes a list of strings as input and returns the longest string from the list. If there are multiple strings with the same maximum length, return the first occurrence.": 0.507936507936508,
            "Write a Python function that receives a list of strings and a target string, and returns the index of the first occurrence of the target string in the list. If the target string is not found, return -1.": 0.5074626865671642,
            "Create a Python function that accepts a list of strings and returns a new list with the strings in uppercase.\n['apple', 'banana', 'cherry']": 0.4999999999999999,
            "Write a Python function that takes in a list of strings and converts all strings to lowercase.": 0.4782608695652174,
            "Write a Python function that takes a list of strings as input and returns the number of strings with length greater than 5.\nInput: [\"apple\", \"banana\", \"pear\", \"kiwi\"]\nOutput: 2": 0.47457627118644075,
            "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.": 0.4642857142857143,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.456140350877193,
            "Write a Python function that receives two lists of integers and returns a new list with the intersection of the two lists (numbers that appear in both lists).": 0.456140350877193
        },
        "avg_similarity_score": 0.24665037292543618
    },
    {
        "instruction": "Is it possible to sort a dictionary by its values in descending order? If so, how can you achieve that in Python?",
        "output": "Yes, it is possible to sort a dictionary by its values in descending order in Python. One way to achieve this is by using the sorted() function along with the 'key' parameter. Here's an example:\n\nmy_dict = {'a': 3, 'b': 1, 'c': 2}\nsorted_dict = dict(sorted(my_dict.items(), key=lambda x: x[1], reverse=True))\nprint(sorted_dict)",
        "most_similar_instructions": {
            "How can you sort a dictionary by its values in descending order?": 0.5294117647058824,
            "Write a Python program to sort a dictionary by values in descending order.\n{'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}": 0.4186046511627907,
            "How can you concatenate two lists in Python?": 0.3333333333333333,
            "If you want to find and replace a specific word in a string, how would you do it in Python?": 0.3333333333333333,
            "What is the Python code to sort a list of strings in alphabetical order?": 0.33333333333333326,
            "Write a Python function that sorts a dictionary by its values in ascending order.\n{'apple': 3, 'banana': 2, 'kiwi': 5, 'grapes': 4}": 0.3181818181818182,
            "How can you convert a string to uppercase in Python?": 0.3125,
            "How can you remove duplicate elements from a list in Python?": 0.30303030303030304,
            "How can you generate the current date and time in Python?": 0.30303030303030304,
            "Provide a code snippet to sort a list of integers in descending order.\nnumbers = [5, 2, 9, 1, 7]": 0.2926829268292683
        },
        "avg_similarity_score": 0.12329912892069035
    },
    {
        "instruction": "Create a Python program that counts the number of occurrences of each word in a given string and stores them in a dictionary.\n\"This is a sample string. This string contains multiple occurrences of words.\"",
        "output": "def count_word_occurrences(string):\n    word_list = string.split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\ninput_string = \"This is a sample string. This string contains multiple occurrences of words.\"\nresult = count_word_occurrences(input_string)\nprint(result)",
        "most_similar_instructions": {
            "How would you create a Python function that counts the occurrence of each word in a given string?\n'This is a test. This is only a test.'": 0.5483870967741936,
            "Write a Python function that counts the occurrences of each word in a given string and returns a dictionary of word frequencies.\n\"I enjoy coding and coding is fun\"": 0.53125,
            "Create a Python script that counts and prints the frequency of each word in a given text.\n\"This is a sample text. This text is used for counting word frequency.\"": 0.523076923076923,
            "Complete the following Python code to count the number of occurrences of each word in a given string.\ntext = \"This is a sample sentence. This sentence is just a sample.\"": 0.523076923076923,
            "Write a Python program that counts and prints the number of occurrences of each word in a given string.\nsentence = \"She sells sea shells by the seashore.\"": 0.5161290322580645,
            "Create a Python program that counts the occurrences of each word in a given list.\n['apple', 'banana', 'cherry', 'apple', 'banana']": 0.509090909090909,
            "Write a Python function that counts the number of occurrences of a given element in a list.": 0.5,
            "Given a string variable called \"sentence\", write a Python script that counts the occurrences of each word in the sentence and stores the results in a dictionary.": 0.48387096774193544,
            "Create a Python function that counts the number of uppercase and lowercase letters in a given string.\nstring = \"Hello World\"": 0.4727272727272728,
            "Write Python code to count the frequency of each word in a given text.\nInput text: \"This is a sample text. It contains multiple words and words may repeat.\"": 0.46875000000000006
        },
        "avg_similarity_score": 0.2187626862312119
    },
    {
        "instruction": "Write a Python program that finds the median of a given list of numbers. The median is the middle value of a set of numbers when they are arranged in order.\n[1, 2, 3, 4, 5, 6]",
        "output": "def find_median(nums):\n    sorted_nums = sorted(nums)\n    length = len(sorted_nums)\n    if length % 2 == 0:\n        median = (sorted_nums[length // 2] + sorted_nums[length // 2 - 1]) / 2\n    else:\n        median = sorted_nums[length // 2]\n    return median\n\nnumbers = [1, 2, 3, 4, 5, 6]\nresult = find_median(numbers)\nprint('Median:', result)",
        "most_similar_instructions": {
            "Write a Python script that finds the middle element(s) of a given list. Print the middle element(s).\nList: [1, 2, 3, 4, 5, 6]": 0.5714285714285714,
            "Create a Python program that finds the median of a list of numbers.\n[1, 3, 5, 7, 9, 2, 4, 6, 8]": 0.5423728813559323,
            "Implement a Python function that calculates the average of a list of numbers.\nnumbers = [1, 2, 3, 4, 5]": 0.5357142857142857,
            "Write a Python function that checks if a given list is sorted in ascending order.\nnumbers = [1, 2, 3, 4, 5]": 0.5172413793103449,
            "Write a Python function that finds and returns the mode(s) of a given list of integers. If there are multiple modes, return them in ascending order.\nInput: [1, 2, 3, 2, 4, 2]": 0.5070422535211269,
            "Implement a Python program that calculates the square of each number in a given list and stores the results in a new list.\n[1, 2, 3, 4, 5]": 0.49230769230769234,
            "Develop a Python script that calculates the mean, median, and mode of a given list of numbers.\n[2, 3, 5, 3, 2, 8, 6, 2]": 0.48387096774193555,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.48387096774193555,
            "Write a Python function that finds and returns the median of a given list of numbers. If the list has an even number of elements, return the average of the two middle numbers.\n[6, 4, 8, 2, 9]": 0.4799999999999999,
            "Write a Python program that computes the sum and average of a given list of numbers.\nInput: [4, 7, 2, 9, 5]": 0.4745762711864407
        },
        "avg_similarity_score": 0.24324182967453617
    },
    {
        "instruction": "Write a Python program that converts a given list of tuples into a dictionary where the first element of each tuple is the key and the second element is the value.\n[('a', 1), ('b', 2), ('c', 3)]",
        "output": "def convert_to_dictionary(tuples):\n    return dict(tuples)\n\ntuple_list = [('a', 1), ('b', 2), ('c', 3)]\nresult = convert_to_dictionary(tuple_list)\nprint(result)",
        "most_similar_instructions": {
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.5614035087719298,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.49230769230769234,
            "Write a Python program that finds the median of a given list of numbers. The median is the middle value of a set of numbers when they are arranged in order.\n[1, 2, 3, 4, 5, 6]": 0.4594594594594595,
            "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']": 0.45901639344262296,
            "Write a Python function that receives a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of the strings.": 0.4545454545454546,
            "Write a Python program that finds the index of the first occurrence of a given element in a given list. If the element is not found, the program should return -1.\n[5, 10, 3, 8, 2], 3": 0.43243243243243246,
            "Write Python code that converts a list of integers into a comma-separated string.\nnumbers = [1, 2, 3, 4, 5]": 0.4210526315789474,
            "Design a Python script that merges two dictionaries into a new dictionary. If the same key exists in both dictionaries, the value from the second dictionary should overwrite the value from the first dictionary.\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}": 0.41975308641975306,
            "Can you write a Python program that counts the occurrence of each element in a list?\nnumbers = [1, 2, 3, 1, 2, 3, 4, 5]": 0.4193548387096775,
            "Create a Python program that converts a list of integers into a single integer by concatenating the digits (without using any external library or functions).\nNumbers: [1, 2, 3, 4, 5]": 0.411764705882353
        },
        "avg_similarity_score": 0.23334983797158762
    },
    {
        "instruction": "Design a Python function called \"swap_variables\" that takes two variables as input and swaps their values.\nx = 5, y = 10",
        "output": "def swap_variables(a, b):\n    a, b = b, a\n    return a, b\n\nx, y = 5, 10\nx, y = swap_variables(x, y)\nprint(x, y)",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5714285714285714,
            "Write a Python program to swap the values of two variables.\nx = 5\ny = 10": 0.5,
            "Design a Python function that takes two dictionaries as input and returns a new dictionary that contains the keys and values from both dictionaries.": 0.4888888888888889,
            "Create a Python function called \"compute_average\" that takes any number of arguments as input and returns their average.\nArguments: 4, 5, 6, 7, 8": 0.4782608695652174,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.4615384615384615,
            "Create a Python function called \"factorial\" that takes an integer as input and computes and returns its factorial value.": 0.45,
            "Write a Python script that takes two integers as input and prints their greatest common divisor using the Euclidean algorithm.": 0.4390243902439024,
            "Create a Python function called \"print_pattern\" that takes an integer as input and prints a pattern of numbers from 1 to the input number.\n5": 0.42553191489361697,
            "Write a Python function that takes a dictionary as input and returns the keys with the maximum value.\n{\"apple\": 5, \"banana\": 10, \"cherry\": 3, \"dragonfruit\": 7}": 0.42553191489361697,
            "Create a Python function that takes a dictionary as input and returns a list of keys sorted in descending order based on their values.\nDictionary: {'apple': 5, 'banana': 2, 'cherry': 7}": 0.4230769230769231
        },
        "avg_similarity_score": 0.18512352037674487
    },
    {
        "instruction": "Is there a Python library to generate random passwords? If yes, please provide an example of how to use it.",
        "output": "Yes, there is a Python library called \"secrets\" that can be used to generate random passwords. Here's an example:\n\nimport secrets\nimport string\n\ndef generate_random_password(length=10):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(secrets.choice(characters) for _ in range(length))\n    return password\n\nrandom_password = generate_random_password()\nprint(random_password)",
        "most_similar_instructions": {
            "Please write a Python function to generate a random password of a given length.": 0.3529411764705882,
            "You want to generate a random password of length \"n\" using Python. How would you do it?": 0.3243243243243243,
            "Please provide a Python code snippet to generate a list of squares of numbers from 1 to 10.": 0.3157894736842105,
            "Write a Python function that checks if an integer is a power of 2.\n16": 0.28571428571428575,
            "Write a Python function to generate a list of random integers within a specified range.\nRange: 1 to 100\nList length: 10": 0.28571428571428564,
            "Write a Python program to generate a random number between a given range of numbers using the random module.\nRange: 1-100": 0.28571428571428564,
            "Can you show an example of how to use the Python random module to generate a random number between 1 and 10, inclusive?": 0.27906976744186046,
            "Write Python code to generate a random number between 1 and 100 (inclusive) and print it.": 0.2777777777777778,
            "Create a Python function that converts a string to title case.\nstring = \"this is an example\"": 0.2777777777777778,
            "Can you show an example of how to use the Python re module to find all occurrences of a specific pattern in a string?": 0.2727272727272727
        },
        "avg_similarity_score": 0.14674023699143915
    },
    {
        "instruction": "Create a Python program that reads an integer and prints all the even numbers from 0 to that number.",
        "output": "def print_even_numbers(num):\n    for i in range(num+1):\n        if i % 2 == 0:\n            print(i)\n\nnumber = 10\nprint('Even numbers from 0 to', number, ':')\nprint_even_numbers(number)",
        "most_similar_instructions": {
            "Write a Python program that reads an integer n from the user, then prints the numbers from 1 to n (inclusive) along with their squares.": 0.5454545454545454,
            "Create a Python function called \"print_pattern\" that takes an integer as input and prints a pattern of numbers from 1 to the input number.\n5": 0.5333333333333333,
            "Create a Python program that generates a Fibonacci sequence. The program should take an integer as input and generate the Fibonacci sequence up to that number.": 0.5333333333333333,
            "Write a Python script that reads an integer from the user and prints all its divisors.": 0.5142857142857142,
            "Write a Python script that prompts the user to enter a number, and then prints the sum of all even numbers from 1 to that number (inclusive).\n12": 0.5106382978723404,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.5,
            "Create a Python program that generates a random integer and prints whether it is even or odd.": 0.5,
            "Create a Python program that calculates the sum of all the even numbers between two given positive integers.": 0.4864864864864865,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.47368421052631576,
            "Create a Python program that prints the current date and time.": 0.4666666666666667
        },
        "avg_similarity_score": 0.22529747648636078
    },
    {
        "instruction": "Suggest a code snippet that finds the maximum value in a given list using a Python built-in function.\n[1, 5, 3, 10, 7]",
        "output": "numbers = [1, 5, 3, 10, 7]\nmax_value = max(numbers)\nprint(f\"The maximum value is: {max_value}\")",
        "most_similar_instructions": {
            "What would be a Python code snippet to find the maximum value in a list?\ninput: [5, 2, 8, 3, 1]": 0.4888888888888889,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.4888888888888889,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.48780487804878053,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.4615384615384615,
            "Suggest an implementation for finding the maximum value of a list of numbers in Python using the built-in max() function.\nnumbers = [6, 9, 2, 7, 1, 5]": 0.4615384615384615,
            "Can you write a Python program to find the minimum and maximum values in a list without using any built-in functions or libraries?\nnumbers = [5, 2, 8, 3, 10]": 0.4444444444444445,
            "How would you find the maximum element in a list of integers using the built-in max() function in Python?\nnumbers = [10, 5, 8, 12, 3]": 0.43999999999999995,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.43478260869565216,
            "How would you implement a Python function that finds the maximum value in a list of integers?\n[5, 8, 2, 6, 1]": 0.43478260869565216,
            "Write a Python function that sums all the values in a dictionary.\n{'a': 5, 'b': 3, 'c': 7}": 0.42857142857142855
        },
        "avg_similarity_score": 0.2100457473038103
    },
    {
        "instruction": "What would be the Python code to sort the elements of a given list in descending order?\n['apple', 'banana', 'cherry', 'date']",
        "output": "fruits = ['apple', 'banana', 'cherry', 'date']\nsorted_fruits = sorted(fruits, reverse=True)\nprint(sorted_fruits)",
        "most_similar_instructions": {
            "What is the Python code to sort a list of strings in alphabetical order?": 0.5714285714285714,
            "Generate Python code to reverse the elements of a given list.": 0.5625,
            "Explain how to use the \"sorted()\" function in Python to sort a list of strings in descending order.\nlist1 = ['apple', 'banana', 'cherry']": 0.5581395348837208,
            "Complete the Python code to sort the given list of numbers in ascending order.\nnumbers = [5, 2, 8, 1, 9]": 0.4878048780487805,
            "What is the Python code to calculate the length of a string?": 0.4848484848484849,
            "Write a Python program to sort a dictionary by values in descending order.\n{'apple': 5, 'banana': 7, 'cherry': 3, 'dragonfruit': 9}": 0.47619047619047616,
            "Write Python code to sort a given list in ascending order.\nList: [9, 3, 2, 7, 1]": 0.4736842105263158,
            "Write a Python program that randomly shuffles the elements of a given list.\n['apple', 'banana', 'kiwi', 'orange', 'mango']": 0.4615384615384615,
            "Complete the following Python code to sort a list of strings based on their length in descending order.\nnames = ['John', 'Emily', 'Michael', 'Sarah']": 0.4545454545454545,
            "Fill in the missing parts of the following Python code snippet to sort a list in descending order.\ninput_list = [5, 2, 8, 1]": 0.4444444444444445
        },
        "avg_similarity_score": 0.19897961515595536
    },
    {
        "instruction": "How can you generate a random password using Python? The password should have a length of 8 characters and contain a combination of letters (uppercase and lowercase) and numbers.",
        "output": "import random\nimport string\n\ndef generate_random_password():\n    characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(characters) for _ in range(8))\n    return password\n\nrandom_password = generate_random_password()\nprint(random_password)",
        "most_similar_instructions": {
            "Write a Python function to generate a random password of length n. The password should contain a combination of uppercase letters, lowercase letters, and numbers.": 0.5555555555555556,
            "How can you generate a random password of length 8 using uppercase letters, lowercase letters, and numbers in Python?": 0.5416666666666666,
            "How can you write a Python function to generate a random password with 8 characters using lowercase letters, uppercase letters, and digits?": 0.47058823529411764,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.39215686274509803,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.3829787234042554,
            "Create a Python program that generates a random password containing a combination of letters (upper and lower case) and special characters. The password should have a length of 10 characters.": 0.3728813559322034,
            "How would you implement a Python script that generates a random password of length 8, using lowercase alphabets and digits?": 0.3673469387755102,
            "How would you write a Python function to find the average of a list of numbers?\n[5, 7, 3, 9, 2]": 0.36000000000000004,
            "Create a Python program that generates a random password of length n. The password should include both uppercase and lowercase letters, numbers, and special characters.\nn = 8": 0.35714285714285715,
            "How can you implement a stack using a Python list? Write the code for push, pop, and peek operations of a stack.": 0.35294117647058826
        },
        "avg_similarity_score": 0.19219245710676278
    },
    {
        "instruction": "How would you write a Python code that prompts the user to enter their name, then greets them with a personalized message?",
        "output": "name = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"! Welcome!\")",
        "most_similar_instructions": {
            "Write a Python script that prompts the user to enter their name and prints a personalized greeting.\nname = input(\"Enter your name: \")": 0.5909090909090909,
            "Write a Python script that prompts the user to enter their name and age. The script should then print a message that says \"Hello, [name]! You are [age] years old.\"": 0.5384615384615385,
            "Create a Python program that prompts the user for their name and then prints a welcome message with their name.": 0.5238095238095238,
            "Create a Python program that prompts the user to enter a name and age, then stores this information in a dictionary.": 0.5116279069767442,
            "Write a Python program that prompts the user to enter a string and prints its characters in reverse order.": 0.4878048780487805,
            "Write a Python program that prompts the user for their name and age, then prints a message greeting them and stating how many years until they turn 100 years old.": 0.4615384615384615,
            "Write a Python program that prompts the user to enter two numbers, then calculates and prints their sum, difference, product, and quotient.": 0.45454545454545453,
            "Write a Python program that prompts the user to enter two strings and checks if they are anagrams.": 0.45,
            "How can you write a Python code that generates a random password with a given length?\nlength = 8": 0.45,
            "Write a Python script that prompts the user to enter the radius of a circle, then calculates and prints the area of the circle.": 0.43478260869565216
        },
        "avg_similarity_score": 0.22649733486847137
    },
    {
        "instruction": "Implement a Python function that accepts two parameters, a string and a character, and returns the count of occurrences of that character in the string.\n\"hello world\", 'l'",
        "output": "def count_occurrences(string, char):\n    return string.count(char)\n\ninput_string = \"hello world\"\ncharacter = 'l'\noccurrences = count_occurrences(input_string, character)\nprint(occurrences)",
        "most_similar_instructions": {
            "Implement a Python program that takes a string input and counts the frequency of each character in the string. Print the result.\nHello, World!": 0.576923076923077,
            "Create a function in Python that accepts a string and returns the number of vowels in it.\n'Hello, World!'": 0.5531914893617021,
            "Write a Python function that takes a string as input and counts the number of occurrences of a specific substring within the string.\nstring = \"hello hello world\"\nsubstring = \"hello\"": 0.5263157894736843,
            "Implement a Python function named \"count_vowels\" that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.": 0.509090909090909,
            "Write a Python program that accepts a string and calculates the number of uppercase and lowercase letters in the string.": 0.5,
            "Create a Python function that takes a string input and returns the reverse of the string without using the built-in reverse function.\nInput: \"hello\"": 0.49056603773584906,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.48979591836734687,
            "Write a Python function that accepts a string and returns a new string with only the first and last character of each word capitalized.\nString: \"hello world, how are you?\"": 0.4827586206896552,
            "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.": 0.46808510638297873,
            "Write a Python function that takes in a string and returns the frequency of each character as a dictionary.": 0.46808510638297873
        },
        "avg_similarity_score": 0.23457581031432984
    },
    {
        "instruction": "Create a Python program that accepts two numbers as input and displays their division rounded to two decimal places.\nInput: 10, 3",
        "output": "num1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\ndivision = round(num1 / num2, 2)\nprint(division)",
        "most_similar_instructions": {
            "Write a Python function that takes two numbers as input and returns their sum.": 0.5000000000000001,
            "Create a Python program that takes a string as input and converts it to title case.\nInput: \"hello world\"": 0.4878048780487805,
            "Create a Python generator function that generates Fibonacci numbers up to a specified limit.\nInput: 10": 0.4210526315789474,
            "Design a Python function called \"swap_variables\" that takes two variables as input and swaps their values.\nx = 5, y = 10": 0.4186046511627907,
            "Create a Python program that generates a list of Fibonacci numbers.\n10": 0.4117647058823529,
            "Create a Python dictionary with keys as integers and values as their squares from 1 to 10.": 0.41025641025641024,
            "Create a Python program that takes two lists and combines them by alternating elements.\nInput lists: [1, 2, 3], [4, 5, 6]": 0.4090909090909091,
            "Can you write a Python program that calculates the average of a list of numbers and rounds it to two decimal places?\nnumbers = [4, 7, 9, 11, 13]": 0.4,
            "Create a Python function that takes two strings as input and concatenates them with a space in between.": 0.39999999999999997,
            "Create a Python function that takes a floating-point number as input and rounds it to the nearest integer.": 0.3902439024390244
        },
        "avg_similarity_score": 0.19939886981056756
    },
    {
        "instruction": "Design a Python class that simulates a stack data structure and includes methods to push, pop, and check if it's empty.",
        "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.stack.pop()\n        else:\n            return \"Stack is empty\"\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\nstack = Stack()\nstack.push(3)\nstack.push(5)\nstack.push(1)\nstack.push(7)\nprint(stack.pop())\nprint(stack.is_empty())",
        "most_similar_instructions": {
            "Implement a Python class that represents a stack. The class should have methods to push an element onto the stack, pop an element from the stack, and check if the stack is empty.": 0.5090909090909091,
            "Implement a Python class to represent a stack data structure and its associated methods.": 0.5000000000000001,
            "Implement a Python class that represents a stack data structure using a list. The stack should have push, pop, and peek methods.": 0.5,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.43902439024390244,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.43243243243243246,
            "Design a Python class for a bank account that has methods to withdraw money, deposit money, and check the current balance.": 0.4186046511627907,
            "How would you implement a Python class called \"Stack\" with methods for push, pop, and peek operations?": 0.41025641025641024,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.4090909090909091,
            "Design a Python class to represent a student with attributes like name, age, and grade. Include methods to update the student's grade and display the student's information.": 0.39215686274509803,
            "Design a Python class that represents a bank account with attributes for the account holder's name and balance. Include methods to deposit and withdraw money from the account.": 0.39215686274509803
        },
        "avg_similarity_score": 0.18988248231782973
    },
    {
        "instruction": "Design a Python class that represents a book and includes methods to get and set its title, author, and publication year.",
        "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_year(self):\n        return self.year\n\n    def set_title(self, new_title):\n        self.title = new_title\n\n    def set_author(self, new_author):\n        self.author = new_author\n\n    def set_year(self, new_year):\n        self.year = new_year\n\nbook = Book(\"Python Programming\", \"John Doe\", 2022)\nprint(book.get_title())\nprint(book.get_author())\nprint(book.get_year())\nbook.set_title(\"Advanced Python Programming\")\nbook.set_author(\"Jane Smith\")\nbook.set_year(2023)\nprint(book.get_title())\nprint(book.get_author())\nprint(book.get_year())",
        "most_similar_instructions": {
            "Design a Python class that represents a book, which has attributes like title, author, and number of pages.": 0.5641025641025642,
            "Design a Python class that represents a book, with properties like title, author, and publication year.\nTitle: \"To Kill a Mockingbird\"\nAuthor: \"Harper Lee\"\nPublication year: 1960": 0.5416666666666666,
            "Write a Python class that represents a person with attributes such as name, age, and occupation. Provide methods to get and set these attributes.": 0.5333333333333333,
            "Design a Python class that simulates a stack data structure and includes methods to push, pop, and check if it's empty.": 0.5116279069767442,
            "Create a Python class called Circle that has a radius attribute and methods to calculate its area and circumference.": 0.5,
            "Design a Python class that represents a simple bank account with deposit and withdrawal methods.": 0.5,
            "Design a Python class that represents a simple calculator. The class should have methods to add, subtract, multiply, and divide two numbers.": 0.46511627906976744,
            "Design a Python class that represents a library. The class should have methods to add books to the library, remove books from the library, and search for books by title or author.": 0.4528301886792453,
            "Create a Python class that represents a book with attributes like title, author, and year of publication. The class should have methods for getting and setting the attributes.": 0.4489795918367347,
            "Write a Python class that represents a circle. The class should have methods to calculate its area and circumference.\nRadius of the circle: 5": 0.4444444444444445
        },
        "avg_similarity_score": 0.19225307243308526
    },
    {
        "instruction": "How can you implement a Python script that retrieves data from an API using the requests library and prints the response content?\nAPI URL: https://api.example.com/data",
        "output": "import requests\n\nurl = \"https://api.example.com/data\"\nresponse = requests.get(url)\nprint(response.content)",
        "most_similar_instructions": {
            "How would you implement a Python script that reads data from a CSV file and prints each row?": 0.46808510638297873,
            "How can you implement a Python script that validates whether an email address is in the correct format?": 0.4255319148936171,
            "Write a Python script that uses the requests library to send an HTTP GET request to a given URL and prints the response status code.": 0.4074074074074074,
            "How would you implement a Python script that sorts a list of numbers in ascending order and prints the sorted list?": 0.39999999999999997,
            "How would you implement a Python script that parses XML data and extracts specific elements from it?": 0.391304347826087,
            "How can you write a Python script that finds and prints the largest number in a list?\nlist = [5, 2, 9, 1, 7]": 0.38461538461538464,
            "How do you implement a Python script that calculates the sum of all the numbers in a list?": 0.3829787234042554,
            "How would you implement a Python script that generates a random password of length 8, using lowercase alphabets and digits?": 0.3673469387755102,
            "Implement a Python script that generates a random number between 1 and 100 using the random module and prints it.": 0.3673469387755102,
            "Suggest a completion for the following python code.\nimport requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()": 0.36000000000000004
        },
        "avg_similarity_score": 0.1745239844175714
    },
    {
        "instruction": "Write a Python function that converts a list of integers into a single integer. The elements in the list should be concatenated without any separator.",
        "output": "def convert_to_integer(numbers):\n    integer = int(''.join(str(num) for num in numbers))\n    return integer\n\nnumbers = [2, 3, 4, 5]\nprint(convert_to_integer(numbers))",
        "most_similar_instructions": {
            "Create a Python program that converts a list of integers into a single integer by concatenating the digits (without using any external library or functions).\nNumbers: [1, 2, 3, 4, 5]": 0.5357142857142857,
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5238095238095238,
            "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.": 0.5217391304347826,
            "Write a Python function that takes a list of integers and returns the largest negative number in the list, or None if there are no negative numbers.": 0.5,
            "Write a Python script that reads a list of integers from user input and prints the maximum and minimum numbers in the list.": 0.4999999999999999,
            "Write a Python function that converts a list of strings into a single string, where each string is separated by a space.\n['Hello', 'world']": 0.4897959183673469,
            "Write a Python function that converts a given list of tuples into a dictionary.\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]": 0.48888888888888893,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.46511627906976744,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.46511627906976744,
            "Write a Python function that accepts a list of strings and returns the list sorted by string length.": 0.46511627906976744
        },
        "avg_similarity_score": 0.24710263592762746
    },
    {
        "instruction": "Write a Python program that finds the maximum element in a list of integers without using the built-in max() function.",
        "output": "def find_max_element(numbers):\n    max_element = numbers[0]\n    for num in numbers:\n        if num > max_element:\n            max_element = num\n    return max_element\n\ninput_list = [5, 10, 2, 8, 3]\nmax_num = find_max_element(input_list)\nprint(\"The maximum element is\", max_num)",
        "most_similar_instructions": {
            "How would you find the maximum element in a list of integers using the built-in max() function in Python?\nnumbers = [10, 5, 8, 12, 3]": 0.5957446808510638,
            "Write a Python program that finds and prints the maximum element in a list.\n[12, 45, 23, 76, 87, 34, 65]": 0.5714285714285714,
            "Write a Python program that sorts a list of integers in ascending order using the bubble sort algorithm.": 0.5641025641025642,
            "Create a Python program that finds the maximum and minimum numbers in a given list.": 0.5555555555555556,
            "Write a Python program that finds the length of the longest word in a given string.": 0.5405405405405405,
            "Design a Python program that finds the smallest number in a given list of integers.\n[6, 3, 8, 1, 9]": 0.5365853658536585,
            "Suggest a code snippet that finds the maximum value in a given list using a Python built-in function.\n[1, 5, 3, 10, 7]": 0.5333333333333333,
            "Write a Python program that accepts a list of numbers and prints the list in descending order without using any built-in sorting functions.": 0.5333333333333333,
            "Suggest a Python code that finds and prints the maximum element from a given list of numbers.": 0.5263157894736842,
            "Write a Python function that finds and returns the maximum element in a given list.\nList: [7, 3, 9, 2, 10]": 0.5238095238095238
        },
        "avg_similarity_score": 0.26487959828297675
    },
    {
        "instruction": "Write a Python program that converts a string into a list of characters and prints each character on a new line.",
        "output": "string = \"Hello\"\ncharacter_list = list(string)\n\nfor char in character_list:\n    print(char)",
        "most_similar_instructions": {
            "Write a Python function that converts a given string of words into a list of individual words.": 0.5789473684210527,
            "Write a Python program that converts a list of characters into a string.\n['h', 'e', 'l', 'l', 'o']": 0.5641025641025642,
            "Write a Python script that randomly selects a name from a list and prints it.": 0.5,
            "Write a Python function that takes in a string and returns the frequency of each character as a dictionary.": 0.5,
            "Create a Python program that loops through a list and prints each element in reverse order.": 0.4864864864864864,
            "Write a Python function that takes a string as an argument and returns a list of unique characters in the string.": 0.47619047619047616,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.47058823529411764,
            "Create a Python program to convert a string to a list of words.": 0.47058823529411764,
            "Write a Python program that generates a random password with a length of 10 characters using uppercase letters, lowercase letters, and digits.": 0.46511627906976744,
            "Write a Python program that searches for a specific element in a given list and returns its index.": 0.4615384615384615
        },
        "avg_similarity_score": 0.2533485605779212
    },
    {
        "instruction": "Create a Python dictionary with keys as names and values as ages. Write a function that takes the dictionary as input and returns the name of the oldest person.\n{\"Alice\": 25, \"Bob\": 30, \"Charlie\": 22}",
        "output": "def get_oldest_person(dictionary):\n    oldest_name = max(dictionary, key=dictionary.get)\n    return oldest_name\n\ndictionary = {\"Alice\": 25, \"Bob\": 30, \"Charlie\": 22}\nprint(get_oldest_person(dictionary))",
        "most_similar_instructions": {
            "Create a Python dictionary with keys as strings and values as integers. Write a script that prints the sum of all the values.": 0.5517241379310345,
            "Create a Python dictionary with keys \"name\", \"age\", and \"city\". Write a function that takes the dictionary as input and prints each key-value pair on a separate line.": 0.53125,
            "Create a Python dictionary called \"students\" with keys as student names and values as their respective ages. Write a function to print the keys of the students who are above 18 years old.": 0.5294117647058822,
            "Create a Python dictionary with keys as integers ranging from 1 to 10 (inclusive) and values as the squares of the corresponding keys.": 0.4482758620689655,
            "Write a Python function called \"calculate_hypotenuse\" that takes the lengths of two sides of a right triangle as input and returns the length of the hypotenuse.": 0.41935483870967744,
            "Create a Python function called 'calculate_average' that takes in a list of numbers as input and returns the average of those numbers.": 0.4137931034482759,
            "Create a Python dictionary with the keys as months of the year and the values as the number of days in each month.": 0.4137931034482759,
            "Create a Python function called \"circle_area\" that takes the radius of a circle as input and returns its area. Print the area of a circle with radius 5.": 0.40625,
            "Create a Python function called \"power_of_n\" that takes two integers n and p as input and returns the value of n raised to the power of p.": 0.40625,
            "Create a Python function that takes a string as input and returns a new string with all the vowels removed.": 0.4
        },
        "avg_similarity_score": 0.1928553115612497
    },
    {
        "instruction": "Write a Python program that prints the first N prime numbers, where N is given as an input.\n10",
        "output": "def get_prime_numbers(n):\n    prime_numbers = []\n    number = 2\n    while len(prime_numbers) < n:\n        if all(number % i != 0 for i in range(2, int(number**0.5) + 1)):\n            prime_numbers.append(number)\n        number += 1\n    return prime_numbers\n\nn = 10\nprime_numbers = get_prime_numbers(n)\nprint(prime_numbers)",
        "most_similar_instructions": {
            "Create a Python script that generates and prints the first N Fibonacci numbers, where N is a positive integer input by the user.": 0.5714285714285715,
            "Write a Python program that finds and prints all the prime numbers between two given numbers (inclusive).\n1, 100": 0.5263157894736842,
            "Write a Python program to generate a Fibonacci sequence of length `n`, where `n` is provided as input by the user.": 0.5,
            "Create a Python program to calculate the sum of first n natural numbers using a while loop.\nn = 10": 0.47368421052631576,
            "Create a Python program to find the first n Fibonacci numbers.": 0.4666666666666667,
            "Write a Python program that generates all prime numbers less than a given number.\nlimit = 20": 0.45714285714285713,
            "Create a Python program that generates a random password of length n, where n is user-inputted.": 0.4444444444444444,
            "Write a Python program that rolls a dice and prints the number rolled.": 0.4375,
            "Write a Python program to find and print all the even numbers within a given range.\n1, 10": 0.43243243243243246,
            "Create a Python program that finds the largest prime number within a given range.\nstart: 1\nend: 10": 0.43243243243243246
        },
        "avg_similarity_score": 0.22004088260638702
    },
    {
        "instruction": "Generate a Python dictionary from two lists: keys and values. The keys list contains names and the values list contains corresponding ages.\n['Alice', 'Bob', 'Charlie'], [25, 32, 42]",
        "output": "def create_dict(keys, values):\n    return dict(zip(keys, values))\n\nkeys = ['Alice', 'Bob', 'Charlie']\nvalues = [25, 32, 42]\nresult_dict = create_dict(keys, values)\nprint(result_dict)",
        "most_similar_instructions": {
            "Write a Python program to create a dictionary from two lists, where the keys come from one list and the values come from the other list.": 0.4814814814814815,
            "Write a Python script that creates a dictionary from two lists, where one list contains the keys and the other list contains the values.\nkeys = [\"apple\", \"banana\", \"cherry\"]\nvalues = [3, 6, 9]": 0.4333333333333333,
            "How would you create a Python dictionary from two lists, one containing the keys and the other containing the values?\nkeys = ['name', 'age', 'country']\nvalues = ['John', 25, 'USA']": 0.42857142857142855,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.42857142857142855,
            "Create a Python dictionary with keys as names and values as ages. Write a function that takes the dictionary as input and returns the name of the oldest person.\n{\"Alice\": 25, \"Bob\": 30, \"Charlie\": 22}": 0.38095238095238093,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.3703703703703704,
            "Create a Python dictionary with keys as strings and values as integers. Write a script that prints the sum of all the values.": 0.35294117647058826,
            "Create a Python dictionary with keys as integers ranging from 1 to 10 (inclusive) and values as the squares of the corresponding keys.": 0.35294117647058826,
            "Generate a Python script that finds and prints the largest number in a given list of integers.\nList: [25, 8, 56, 32, 18, 98, 43]": 0.33962264150943394,
            "Create a Python dictionary with days of the week as keys and their corresponding number of the day as values.": 0.3333333333333333
        },
        "avg_similarity_score": 0.15949011842873675
    },
    {
        "instruction": "How can you create a Python dictionary from two parallel lists, where each element in the first list corresponds to the element at the same index in the second list?\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]",
        "output": "def create_dictionary(list1, list2):\n    dictionary = dict(zip(list1, list2))\n    return dictionary\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\ndictionary = create_dictionary(list1, list2)\nprint(dictionary)",
        "most_similar_instructions": {
            "How can you create a Python dictionary comprehension to square each element of a list and store it as key-value pairs in a dictionary?\ninput_list = [1, 2, 3, 4, 5]": 0.4285714285714286,
            "Write Python code to create a dictionary from two lists, one containing keys and the other containing values.\nKeys: ['a', 'b', 'c']\nValues: [1, 2, 3]": 0.40625000000000006,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.3939393939393939,
            "How can you write a Python function to find the maximum element in a given list?\nmy_list = [1, 4, 2, 7, 5]": 0.39344262295081966,
            "Create a Python list comprehension that squares each element in a given list.\nList: [1, 2, 3, 4, 5]": 0.3859649122807018,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.37931034482758624,
            "Write a Python program to create a dictionary from two lists, where the keys come from one list and the values come from the other list.": 0.37499999999999994,
            "Write a Python program that converts a given list of tuples into a dictionary where the first element of each tuple is the key and the second element is the value.\n[('a', 1), ('b', 2), ('c', 3)]": 0.37333333333333335,
            "Can you write a Python function that checks if two lists are equal?\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]": 0.3728813559322034,
            "Write a Python program that accepts two lists and combines them into a dictionary where the first list contains the keys and the second list contains the values.": 0.36363636363636365
        },
        "avg_similarity_score": 0.18426249236551637
    },
    {
        "instruction": "How can you count the frequency of each unique element in a list and store it in a dictionary?\nlist = ['a', 'b', 'a', 'c', 'b', 'a']",
        "output": "def count_frequency(lst):\n    frequency_dict = {}\n    for elem in lst:\n        if elem in frequency_dict:\n            frequency_dict[elem] += 1\n        else:\n            frequency_dict[elem] = 1\n    return frequency_dict \n\nlst = ['a', 'b', 'a', 'c', 'b', 'a']\nfrequency = count_frequency(lst)\nprint(frequency)",
        "most_similar_instructions": {
            "Write Python code to count the frequency of each element in a list and store it in a dictionary.\nList: [1, 2, 3, 2, 4, 1, 3, 2, 4, 1, 5, 6, 4, 3]": 0.5333333333333333,
            "How can you write a Python function that counts the frequency of each element in a list and returns a dictionary?\n['apple', 'banana', 'apple', 'kiwi', 'banana', 'orange']": 0.5283018867924528,
            "How can you create a Python dictionary comprehension to square each element of a list and store it as key-value pairs in a dictionary?\ninput_list = [1, 2, 3, 4, 5]": 0.4827586206896552,
            "How can you implement a Python function to count the frequency of each element in a list?\nnumbers = [4, 2, 5, 2, 8, 4, 8, 2, 4]": 0.4528301886792453,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.44897959183673475,
            "Write a Python program to count the frequency of each element in a given list.": 0.43902439024390244,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.4074074074074074,
            "How can you extract all the odd numbers from a given list and store them in a new list?\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]": 0.4,
            "How can you reverse the order of elements in a given list using Python? Write a Python script to demonstrate.": 0.3913043478260869,
            "Write Python code to extract all the unique elements from a given list and store them in a new list.": 0.3913043478260869
        },
        "avg_similarity_score": 0.15772054117734163
    },
    {
        "instruction": "How would you find the sum of all numbers in a list using a Python function?\nlist = [1, 2, 3, 4, 5]",
        "output": "def calculate_sum(lst):\n    return sum(lst)\n\nlst = [1, 2, 3, 4, 5]\ntotal_sum = calculate_sum(lst)\nprint(total_sum)",
        "most_similar_instructions": {
            "In Python, how can you remove all the elements in a list at once?\nmy_list = [1, 2, 3, 4, 5]": 0.5581395348837208,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.5365853658536586,
            "Write Python code to calculate the average of elements in a given list.\nList: [1, 2, 3, 4, 5]": 0.5365853658536586,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.5333333333333332,
            "How can you reverse a list in Python without using the reverse() method?\nmy_list = [1, 2, 3, 4, 5]": 0.5238095238095238,
            "How can you write a Python function to calculate the sum of all the values in a given dictionary?\ndictionary = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}": 0.52,
            "How can you find the common elements between two lists in Python?\ninput: [1, 2, 3, 4], [3, 4, 5, 6]": 0.5116279069767442,
            "How can you sort the elements of a list in descending order using Python?\nmy_list = [4, 1, 6, 3, 8]": 0.5116279069767442,
            "How can you extract all the odd numbers from a given list and store them in a new list?\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]": 0.5098039215686274,
            "How can you find the maximum value in a list of numbers using Python?\nnumbers = [4, 9, 2, 6, 5, 1, 7]": 0.5
        },
        "avg_similarity_score": 0.19383609667588536
    },
    {
        "instruction": "How can you capitalize the first letter of each word in a string using a Python function?\nstring = \"hello world\"",
        "output": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())\n\nstring = \"hello world\"\nprint(capitalize_words(string))",
        "most_similar_instructions": {
            "How can you find the length of a string using Python?": 0.5806451612903226,
            "Write Python code to capitalize the first letter of each word in a string.\nInput: \"welcome to the world of programming\"": 0.5365853658536585,
            "How can you reverse the order of elements in a given list using Python? Write a Python script to demonstrate.": 0.5,
            "In Python, how can you convert a string to a list of characters?\nstring = \"Hello, World!\"": 0.5,
            "Can you suggest a Python code snippet to find the length of a string without using the built-in len() function?\nstring = \"Hello, World!\"": 0.5,
            "How would you find the sum of all numbers in a list using a Python function?\nlist = [1, 2, 3, 4, 5]": 0.47619047619047616,
            "Can you write a Python function that reverses a given string?\nstring = \"Hello, World!\"": 0.47058823529411764,
            "How can you count the number of occurrences of each element in a list using Python?\ninput: [1, 2, 2, 3, 3, 3]": 0.46511627906976744,
            "How would you find the index of the first occurrence of a specific element in a list using Python?": 0.46153846153846156,
            "How can you implement a Python function to reverse a string?": 0.45161290322580644
        },
        "avg_similarity_score": 0.16693756610746588
    }
]